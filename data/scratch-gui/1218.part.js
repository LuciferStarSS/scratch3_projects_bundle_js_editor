/* 1218 */\n (function(module, exports, __webpack_require__) {\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n/**\n * Get and send assets with a worker that uses fetch.\n */\nvar PrivateFetchWorkerTool = function () {\n  function PrivateFetchWorkerTool() {\n    var _this = this;\n    _classCallCheck(this, PrivateFetchWorkerTool);\n    /**\n     * What does the worker support of the APIs we need?\n     * @type {{fetch:boolean}}\n     */\n    this._workerSupport = {\n      fetch: typeof fetch !== 'undefined'\n    };\n    /**\n     * A possible error occurred standing up the worker.\n     * @type {!Error}\n     */\n    this._supportError = null;\n    /**\n     * The worker that runs fetch and returns data for us.\n     * @type {!Worker}\n     */\n    this.worker = null;\n    /**\n     * A map of ids to fetch job objects.\n     * @type {object}\n     */\n    this.jobs = {};\n    try {\n      if (this.isGetSupported) {\n        // eslint-disable-next-line global-require\n        var FetchWorker = __webpack_require__(1219);\n        this.worker = new FetchWorker();\n        this.worker.addEventListener('message', function (_ref) {\n          var data = _ref.data;\n          if (data.support) {\n            _this._workerSupport = data.support;\n            return;\n          }\n          var _iterator = _createForOfIteratorHelper(data),\n              _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var message = _step.value;\n              if (_this.jobs[message.id]) {\n                if (message.error) {\n                  _this.jobs[message.id].reject(message.error);\n                } else {\n                  _this.jobs[message.id].resolve(message.buffer);\n                }\n                delete _this.jobs[message.id];\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      }\n    } catch (error) {\n      this._supportError = error;\n    }\n  }\n  /**\n   * Is get supported?\n   *\n   * false if the environment does not workers, fetch, or fetch from inside a\n   * worker. Finding out the worker supports fetch is asynchronous and will\n   * guess that it does if the window does until the worker can inform us.\n   * @returns {boolean} Is get supported?\n   */\n  _createClass(PrivateFetchWorkerTool, [{\n    key: \"get\",\n    /**\n     * Request data from a server with a worker using fetch.\n     * @param {{url:string}} reqConfig - Request configuration for data to get.\n     * @param {{method:string}} options - Additional options to configure fetch.\n     * @returns {Promise.<Buffer>} Resolve to Buffer of data from server.\n     */\n    value: function get(_ref2) {\n      var _this2 = this;\n      var url = _ref2.url,\n          options = _objectWithoutProperties(_ref2, [\"url\"]);\n      return new Promise(function (resolve, reject) {\n        // TODO: Use a Scratch standard ID generator ...\n        var id = Math.random().toString(16).substring(2);\n        _this2.worker.postMessage({\n          id: id,\n          url: url,\n          options: Object.assign({\n            method: 'GET'\n          }, options)\n        });\n        _this2.jobs[id] = {\n          id: id,\n          resolve: resolve,\n          reject: reject\n        };\n      }).then(function (body) {\n        return new Uint8Array(body);\n      });\n    }\n    /**\n     * Is sending supported? always false for FetchWorkerTool.\n     * @returns {boolean} Is sending supported?\n     */\n  }, {\n    key: \"send\",\n    /**\n     * Send data to a server with nets.\n     * @throws {Error} A not implemented error.\n     */\n    value: function send() {\n      throw new Error('Not implemented.');\n    }\n    /**\n     * Return a static PrivateFetchWorkerTool instance on demand.\n     * @returns {PrivateFetchWorkerTool} A static PrivateFetchWorkerTool\n     *   instance\n     */\n  }, {\n    key: \"isGetSupported\",\n    get: function get() {\n      return typeof Worker !== 'undefined' && this._workerSupport.fetch && !this._supportError;\n    }\n  }, {\n    key: \"isSendSupported\",\n    get: function get() {\n      return false;\n    }\n  }], [{\n    key: \"instance\",\n    get: function get() {\n      if (!this._instance) {\n        this._instance = new PrivateFetchWorkerTool();\n      }\n      return this._instance;\n    }\n  }]);\n  return PrivateFetchWorkerTool;\n}();\n/**\n * Get and send assets with a worker that uses fetch.\n */\nvar PublicFetchWorkerTool = function () {\n  function PublicFetchWorkerTool() {\n    _classCallCheck(this, PublicFetchWorkerTool);\n    /**\n     * Shared instance of an internal worker. PublicFetchWorkerTool proxies\n     * it.\n     * @type {PrivateFetchWorkerTool}\n     */\n    this.inner = PrivateFetchWorkerTool.instance;\n  }\n  /**\n   * Is get supported?\n   * @returns {boolean} Is get supported?\n   */\n  _createClass(PublicFetchWorkerTool, [{\n    key: \"get\",\n    /**\n     * Request data from a server with a worker that uses fetch.\n     * @param {{url:string}} reqConfig - Request configuration for data to get.\n     * @returns {Promise.<Buffer>} Resolve to Buffer of data from server.\n     */\n    value: function get(reqConfig) {\n      return this.inner.get(reqConfig);\n    }\n    /**\n     * Is sending supported?\n     * @returns {boolean} Is sending supported?\n     */\n  }, {\n    key: \"send\",\n    /**\n     * Send data to a server with a worker that uses fetch.\n     * @throws {Error} A not implemented error.\n     */\n    value: function send() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"isGetSupported\",\n    get: function get() {\n      return this.inner.isGetSupported;\n    }\n  }, {\n    key: \"isSendSupported\",\n    get: function get() {\n      return false;\n    }\n  }]);\n  return PublicFetchWorkerTool;\n}();\nmodule.exports = PublicFetchWorkerTool;\n })