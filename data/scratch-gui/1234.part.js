/* 1234 */\n (function(module, exports) {\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nvar EffectChain = function () {\n  /**\n   * Chain of effects that can be applied to a group of SoundPlayers.\n   * @param {AudioEngine} audioEngine - engine whose effects these belong to\n   * @param {Array<Effect>} effects - array of Effect classes to construct\n   */\n  function EffectChain(audioEngine, effects) {\n    var _this = this;\n    _classCallCheck(this, EffectChain);\n    /**\n     * AudioEngine whose effects these belong to.\n     * @type {AudioEngine}\n     */\n    this.audioEngine = audioEngine;\n    /**\n     * Node incoming connections will attach to. This node than connects to\n     * the items in the chain which finally connect to some output.\n     * @type {AudioNode}\n     */\n    this.inputNode = this.audioEngine.audioContext.createGain();\n    /**\n     * List of Effect types to create.\n     * @type {Array<Effect>}\n     */\n    this.effects = effects; // Effects are instantiated in reverse so that the first refers to the\n    // second, the second refers to the third, etc and the last refers to\n    // null.\n    var lastEffect = null;\n    /**\n     * List of instantiated Effects.\n     * @type {Array<Effect>}\n     */\n    this._effects = effects.reverse().map(function (Effect) {\n      var effect = new Effect(audioEngine, _this, lastEffect);\n      _this[effect.name] = effect;\n      lastEffect = effect;\n      return effect;\n    }).reverse();\n    /**\n     * First effect of this chain.\n     * @type {Effect}\n     */\n    this.firstEffect = this._effects[0];\n    /**\n     * Last effect of this chain.\n     * @type {Effect}\n     */\n    this.lastEffect = this._effects[this._effects.length - 1];\n    /**\n     * A set of players this chain is managing.\n     */\n    this._soundPlayers = new Set();\n  }\n  /**\n   * Create a clone of the EffectChain.\n   * @returns {EffectChain} a clone of this EffectChain\n   */\n  _createClass(EffectChain, [{\n    key: \"clone\",\n    value: function clone() {\n      var chain = new EffectChain(this.audioEngine, this.effects);\n      if (this.target) {\n        chain.connect(this.target);\n      }\n      return chain;\n    }\n    /**\n     * Add a sound player.\n     * @param {SoundPlayer} soundPlayer - a sound player to manage\n     */\n  }, {\n    key: \"addSoundPlayer\",\n    value: function addSoundPlayer(soundPlayer) {\n      if (!this._soundPlayers.has(soundPlayer)) {\n        this._soundPlayers.add(soundPlayer);\n        this.update();\n      }\n    }\n    /**\n     * Remove a sound player.\n     * @param {SoundPlayer} soundPlayer - a sound player to stop managing\n     */\n  }, {\n    key: \"removeSoundPlayer\",\n    value: function removeSoundPlayer(soundPlayer) {\n      this._soundPlayers.remove(soundPlayer);\n    }\n    /**\n     * Get the audio input node.\n     * @returns {AudioNode} audio node the upstream can connect to\n     */\n  }, {\n    key: \"getInputNode\",\n    value: function getInputNode() {\n      return this.inputNode;\n    }\n    /**\n     * Connnect this player's output to another audio node.\n     * @param {object} target - target whose node to should be connected\n     */\n  }, {\n    key: \"connect\",\n    value: function connect(target) {\n      var firstEffect = this.firstEffect,\n          lastEffect = this.lastEffect;\n      if (target === lastEffect) {\n        this.inputNode.disconnect();\n        this.inputNode.connect(lastEffect.getInputNode());\n        return;\n      } else if (target === firstEffect) {\n        return;\n      }\n      this.target = target;\n      firstEffect.connect(target);\n    }\n    /**\n     * Array of SoundPlayers managed by this EffectChain.\n     * @returns {Array<SoundPlayer>} sound players managed by this chain\n     */\n  }, {\n    key: \"getSoundPlayers\",\n    value: function getSoundPlayers() {\n      return _toConsumableArray(this._soundPlayers);\n    }\n    /**\n     * Set Effect values with named values on target.soundEffects if it exist\n     * and then from target itself.\n     * @param {Target} target - target to set values from\n     */\n  }, {\n    key: \"setEffectsFromTarget\",\n    value: function setEffectsFromTarget(target) {\n      this._effects.forEach(function (effect) {\n        if ('soundEffects' in target && effect.name in target.soundEffects) {\n          effect.set(target.soundEffects[effect.name]);\n        } else if (effect.name in target) {\n          effect.set(target[effect.name]);\n        }\n      });\n    }\n    /**\n     * Set an effect value by its name.\n     * @param {string} effect - effect name to change\n     * @param {number} value - value to set effect to\n     */\n  }, {\n    key: \"set\",\n    value: function set(effect, value) {\n      if (effect in this) {\n        this[effect].set(value);\n      }\n    }\n    /**\n     * Update managed sound players with the effects on this chain.\n     */\n  }, {\n    key: \"update\",\n    value: function update() {\n      this._effects.forEach(function (effect) {\n        return effect.update();\n      });\n    }\n    /**\n     * Clear all effects to their default values.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._effects.forEach(function (effect) {\n        return effect.clear();\n      });\n    }\n    /**\n     * Dispose of all effects in this chain. Nothing is done to managed\n     * SoundPlayers.\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._soundPlayers = null;\n      this._effects.forEach(function (effect) {\n        return effect.dispose();\n      });\n      this._effects = null;\n    }\n  }]);\n  return EffectChain;\n}();\nmodule.exports = EffectChain;\n })