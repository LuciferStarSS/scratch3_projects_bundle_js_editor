/* 113 */\n (function(module, exports) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n/**\n * Methods for cloning JavaScript objects.\n * @type {object}\n */\nvar Clone = function () {\n  function Clone() {\n    _classCallCheck(this, Clone);\n  }\n  _createClass(Clone, null, [{\n    key: \"simple\",\n    /**\n     * Deep-clone a \"simple\" object: one which can be fully expressed with JSON.\n     * Non-JSON values, such as functions, will be stripped from the clone.\n     * @param {object} original - the object to be cloned.\n     * @returns {object} a deep clone of the original object.\n     */\n    value: function simple(original) {\n      return JSON.parse(JSON.stringify(original));\n    }\n  }]);\n  return Clone;\n}();\nmodule.exports = Clone;\n })