/* 1266 */\n (function(module, exports, __webpack_require__) {\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nvar twgl = __webpack_require__(103);\nvar TextWrapper = __webpack_require__(1267);\nvar CanvasMeasurementProvider = __webpack_require__(1275);\nvar Skin = __webpack_require__(187);\nvar BubbleStyle = {\n  MAX_LINE_WIDTH: 170,\n  // Maximum width, in Scratch pixels, of a single line of text\n  MIN_WIDTH: 50,\n  // Minimum width, in Scratch pixels, of a text bubble\n  STROKE_WIDTH: 4,\n  // Thickness of the stroke around the bubble. Only half's visible because it's drawn under the fill\n  PADDING: 10,\n  // Padding around the text area\n  CORNER_RADIUS: 16,\n  // Radius of the rounded corners\n  TAIL_HEIGHT: 12,\n  // Height of the speech bubble's \"tail\". Probably should be a constant.\n  FONT: 'Helvetica',\n  // Font to render the text with\n  FONT_SIZE: 14,\n  // Font size, in Scratch pixels\n  FONT_HEIGHT_RATIO: 0.9,\n  // Height, in Scratch pixels, of the text, as a proportion of the font's size\n  LINE_HEIGHT: 16,\n  // Spacing between each line of text\n  COLORS: {\n    BUBBLE_FILL: 'white',\n    BUBBLE_STROKE: 'rgba(0, 0, 0, 0.15)',\n    TEXT_FILL: '#575E75'\n  }\n};\nvar TextBubbleSkin = function (_Skin) {\n  _inherits(TextBubbleSkin, _Skin);\n  var _super = _createSuper(TextBubbleSkin);\n  /**\n   * Create a new text bubble skin.\n   * @param {!int} id - The ID for this Skin.\n   * @param {!RenderWebGL} renderer - The renderer which will use this skin.\n   * @constructor\n   * @extends Skin\n   */\n  function TextBubbleSkin(id, renderer) {\n    var _this;\n    _classCallCheck(this, TextBubbleSkin);\n    _this = _super.call(this, id);\n    /** @type {RenderWebGL} */\n    _this._renderer = renderer;\n    /** @type {HTMLCanvasElement} */\n    _this._canvas = document.createElement('canvas');\n    /** @type {Array<number>} */\n    _this._size = [0, 0];\n    /** @type {number} */\n    _this._renderedScale = 0;\n    /** @type {Array<string>} */\n    _this._lines = [];\n    /** @type {object} */\n    _this._textAreaSize = {\n      width: 0,\n      height: 0\n    };\n    /** @type {string} */\n    _this._bubbleType = '';\n    /** @type {boolean} */\n    _this._pointsLeft = false;\n    /** @type {boolean} */\n    _this._textDirty = true;\n    /** @type {boolean} */\n    _this._textureDirty = true;\n    _this.measurementProvider = new CanvasMeasurementProvider(_this._canvas.getContext('2d',{willReadFrequently:true}));\n    _this.textWrapper = new TextWrapper(_this.measurementProvider);\n    _this._restyleCanvas();\n    return _this;\n  }\n  /**\n   * Dispose of this object. Do not use it after calling this method.\n   */\n  _createClass(TextBubbleSkin, [{\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._texture) {\n        this._renderer.gl.deleteTexture(this._texture);\n        this._texture = null;\n      }\n      this._canvas = null;\n      _get(_getPrototypeOf(TextBubbleSkin.prototype), \"dispose\", this).call(this);\n    }\n    /**\n     * @return {Array<number>} the dimensions, in Scratch units, of this skin.\n     */\n  }, {\n    key: \"setTextBubble\",\n    /**\n     * Set parameters for this text bubble.\n     * @param {!string} type - either \"say\" or \"think\".\n     * @param {!string} text - the text for the bubble.\n     * @param {!boolean} pointsLeft - which side the bubble is pointing.\n     */\n    value: function setTextBubble(type, text, pointsLeft) {\n      this._text = text;\n      this._bubbleType = type;\n      this._pointsLeft = pointsLeft;\n      this._textDirty = true;\n      this._textureDirty = true;\n      this.emit(Skin.Events.WasAltered);\n    }\n    /**\n     * Re-style the canvas after resizing it. This is necessary to ensure proper text measurement.\n     */\n  }, {\n    key: \"_restyleCanvas\",\n    value: function _restyleCanvas() {\n      this._canvas.getContext('2d',{willReadFrequently:true}).font = \"\".concat(BubbleStyle.FONT_SIZE, \"px \").concat(BubbleStyle.FONT, \", sans-serif\");\n    }\n    /**\n     * Update the array of wrapped lines and the text dimensions.\n     */\n  }, {\n    key: \"_reflowLines\",\n    value: function _reflowLines() {\n      this._lines = this.textWrapper.wrapText(BubbleStyle.MAX_LINE_WIDTH, this._text); // Measure width of longest line to avoid extra-wide bubbles\n      var longestLineWidth = 0;\n      var _iterator = _createForOfIteratorHelper(this._lines),\n          _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var line = _step.value;\n          longestLineWidth = Math.max(longestLineWidth, this.measurementProvider.measureText(line));\n        } // Calculate the canvas-space sizes of the padded text area and full text bubble\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var paddedWidth = Math.max(longestLineWidth, BubbleStyle.MIN_WIDTH) + BubbleStyle.PADDING * 2;\n      var paddedHeight = BubbleStyle.LINE_HEIGHT * this._lines.length + BubbleStyle.PADDING * 2;\n      this._textAreaSize.width = paddedWidth;\n      this._textAreaSize.height = paddedHeight;\n      this._size[0] = paddedWidth + BubbleStyle.STROKE_WIDTH;\n      this._size[1] = paddedHeight + BubbleStyle.STROKE_WIDTH + BubbleStyle.TAIL_HEIGHT;\n      this._textDirty = false;\n    }\n    /**\n     * Render this text bubble at a certain scale, using the current parameters, to the canvas.\n     * @param {number} scale The scale to render the bubble at\n     */\n  }, {\n    key: \"_renderTextBubble\",\n    value: function _renderTextBubble(scale) {\n      var ctx = this._canvas.getContext('2d',{willReadFrequently:true});\n      if (this._textDirty) {\n        this._reflowLines();\n      } // Calculate the canvas-space sizes of the padded text area and full text bubble\n      var paddedWidth = this._textAreaSize.width;\n      var paddedHeight = this._textAreaSize.height; // Resize the canvas to the correct screen-space size\n      this._canvas.width = Math.ceil(this._size[0] * scale);\n      this._canvas.height = Math.ceil(this._size[1] * scale);\n      this._restyleCanvas(); // Reset the transform before clearing to ensure 100% clearage\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n      ctx.scale(scale, scale);\n      ctx.translate(BubbleStyle.STROKE_WIDTH * 0.5, BubbleStyle.STROKE_WIDTH * 0.5); // If the text bubble points leftward, flip the canvas\n      ctx.save();\n      if (this._pointsLeft) {\n        ctx.scale(-1, 1);\n        ctx.translate(-paddedWidth, 0);\n      } // Draw the bubble's rounded borders\n      ctx.beginPath();\n      ctx.moveTo(BubbleStyle.CORNER_RADIUS, paddedHeight);\n      ctx.arcTo(0, paddedHeight, 0, paddedHeight - BubbleStyle.CORNER_RADIUS, BubbleStyle.CORNER_RADIUS);\n      ctx.arcTo(0, 0, paddedWidth, 0, BubbleStyle.CORNER_RADIUS);\n      ctx.arcTo(paddedWidth, 0, paddedWidth, paddedHeight, BubbleStyle.CORNER_RADIUS);\n      ctx.arcTo(paddedWidth, paddedHeight, paddedWidth - BubbleStyle.CORNER_RADIUS, paddedHeight, BubbleStyle.CORNER_RADIUS); // Translate the canvas so we don't have to do a bunch of width/height arithmetic\n      ctx.save();\n      ctx.translate(paddedWidth - BubbleStyle.CORNER_RADIUS, paddedHeight); // Draw the bubble's \"tail\"\n      if (this._bubbleType === 'say') {\n        // For a speech bubble, draw one swoopy thing\n        ctx.bezierCurveTo(0, 4, 4, 8, 4, 10);\n        ctx.arcTo(4, 12, 2, 12, 2);\n        ctx.bezierCurveTo(-1, 12, -11, 8, -16, 0);\n        ctx.closePath();\n      } else {\n        // For a thinking bubble, draw a partial circle attached to the bubble...\n        ctx.arc(-16, 0, 4, 0, Math.PI);\n        ctx.closePath(); // and two circles detached from it\n        ctx.moveTo(-7, 7.25);\n        ctx.arc(-9.25, 7.25, 2.25, 0, Math.PI * 2);\n        ctx.moveTo(0, 9.5);\n        ctx.arc(-1.5, 9.5, 1.5, 0, Math.PI * 2);\n      } // Un-translate the canvas and fill + stroke the text bubble\n      ctx.restore();\n      ctx.fillStyle = BubbleStyle.COLORS.BUBBLE_FILL;\n      ctx.strokeStyle = BubbleStyle.COLORS.BUBBLE_STROKE;\n      ctx.lineWidth = BubbleStyle.STROKE_WIDTH;\n      ctx.stroke();\n      ctx.fill(); // Un-flip the canvas if it was flipped\n      ctx.restore(); // Draw each line of text\n      ctx.fillStyle = BubbleStyle.COLORS.TEXT_FILL;\n      ctx.font = \"\".concat(BubbleStyle.FONT_SIZE, \"px \").concat(BubbleStyle.FONT, \", sans-serif\");\n      var lines = this._lines;\n      for (var lineNumber = 0; lineNumber < lines.length; lineNumber++) {\n        var line = lines[lineNumber];\n        ctx.fillText(line, BubbleStyle.PADDING, BubbleStyle.PADDING + BubbleStyle.LINE_HEIGHT * lineNumber + BubbleStyle.FONT_HEIGHT_RATIO * BubbleStyle.FONT_SIZE);\n      }\n      this._renderedScale = scale;\n    }\n  }, {\n    key: \"updateSilhouette\",\n    value: function updateSilhouette() {\n      var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [100, 100];\n      // Ensure a silhouette exists.\n      this.getTexture(scale);\n    }\n    /**\n     * @param {Array<number>} scale - The scaling factors to be used, each in the [0,100] range.\n     * @return {WebGLTexture} The GL texture representation of this skin when drawing at the given scale.\n     */\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(scale) {\n      // The texture only ever gets uniform scale. Take the larger of the two axes.\n      var scaleMax = scale ? Math.max(Math.abs(scale[0]), Math.abs(scale[1])) : 100;\n      var requestedScale = scaleMax / 100; // If we already rendered the text bubble at this scale, we can skip re-rendering it.\n      if (this._textureDirty || this._renderedScale !== requestedScale) {\n        this._renderTextBubble(requestedScale);\n        this._textureDirty = false;\n        var context = this._canvas.getContext('2d',{willReadFrequently:true});\n        var textureData = context.getImageData(0, 0, this._canvas.width, this._canvas.height);\n        var gl = this._renderer.gl;\n        if (this._texture === null) {\n          var textureOptions = {\n            auto: false,\n            wrap: gl.CLAMP_TO_EDGE\n          };\n          this._texture = twgl.createTexture(gl, textureOptions);\n        }\n        this._setTexture(textureData);\n      }\n      return this._texture;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      if (this._textDirty) {\n        this._reflowLines();\n      }\n      return this._size;\n    }\n  }]);\n  return TextBubbleSkin;\n}(Skin);\nmodule.exports = TextBubbleSkin;\n })