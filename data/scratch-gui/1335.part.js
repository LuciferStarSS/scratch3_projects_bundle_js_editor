/* 1335 */\n (function(module, exports, __webpack_require__) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = supportedValue;\nvar _isInBrowser = __webpack_require__(316);\nvar _isInBrowser2 = _interopRequireDefault(_isInBrowser);\nvar _prefix = __webpack_require__(315);\nvar _prefix2 = _interopRequireDefault(_prefix);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\nvar cache = {};\nvar el = void 0;\nif (_isInBrowser2['default']) el = document.createElement('p');\n/**\n * Returns prefixed value if needed. Returns `false` if value is not supported.\n *\n * @param {String} property\n * @param {String} value\n * @return {String|Boolean}\n * @api public\n */\nfunction supportedValue(property, value) {\n  // For server-side rendering.\n  if (!el) return value;\n  // It is a string or a number as a string like '1'.\n  // We want only prefixable values here.\n  if (typeof value !== 'string' || !isNaN(parseInt(value, 10))) return value;\n  var cacheKey = property + value;\n  if (cache[cacheKey] != null) return cache[cacheKey];\n  // IE can even throw an error in some cases, for e.g. style.content = 'bar'\n  try {\n    // Test value as it is.\n    el.style[property] = value;\n  } catch (err) {\n    cache[cacheKey] = false;\n    return false;\n  }\n  // Value is supported as it is.\n  if (el.style[property] !== '') {\n    cache[cacheKey] = value;\n  } else {\n    // Test value with vendor prefix.\n    value = _prefix2['default'].css + value;\n    // Hardcode test to convert \"flex\" to \"-ms-flexbox\" for IE10.\n    if (value === '-ms-flex') value = '-ms-flexbox';\n    el.style[property] = value;\n    // Value is supported with vendor prefix.\n    if (el.style[property] !== '') cache[cacheKey] = value;\n  }\n  if (!cache[cacheKey]) cache[cacheKey] = false;\n  // Reset style value.\n  el.style[property] = '';\n  return cache[cacheKey];\n}\n })