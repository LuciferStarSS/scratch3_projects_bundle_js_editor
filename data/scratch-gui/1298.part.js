/* 1298 */\n (function(module, exports, __webpack_require__) {\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nvar DOMPurify = __webpack_require__(489);\nvar inlineSvgFonts = __webpack_require__(496);\nvar SvgElement = __webpack_require__(314);\nvar convertFonts = __webpack_require__(497);\nvar fixupSvgString = __webpack_require__(1299);\nvar transformStrokeWidths = __webpack_require__(1300);\n/**\n * Main quirks-mode SVG rendering code.\n */\nvar SvgRenderer = function () {\n  /**\n   * Create a quirks-mode SVG renderer for a particular canvas.\n   * @param {HTMLCanvasElement} [canvas] An optional canvas element to draw to. If this is not provided, the renderer\n   * will create a new canvas.\n   * @constructor\n   */\n  function SvgRenderer(canvas) {\n    _classCallCheck(this, SvgRenderer);\n    this._canvas = canvas || document.createElement('canvas');\n    this._context = this._canvas.getContext('2d',{willReadFrequently:true});\n    this._measurements = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    this._cachedImage = null;\n    this.loaded = false;\n  }\n  /**\n   * @returns {!HTMLCanvasElement} this renderer's target canvas.\n   */\n  _createClass(SvgRenderer, [{\n    key: \"fromString\",\n    /**\n     * Load an SVG from a string and draw it.\n     * This will be parsed and transformed, and finally drawn.\n     * When drawing is finished, the `onFinish` callback is called.\n     * @param {string} svgString String of SVG data to draw in quirks-mode.\n     * @param {number} [scale] - Optionally, also scale the image by this factor.\n     * @param {Function} [onFinish] Optional callback for when drawing finished.\n     * @deprecated Use the `loadSVG` method and public `draw` method instead.\n     */\n    value: function fromString(svgString, scale, onFinish) {\n      var _this = this;\n      this.loadSVG(svgString, false, function () {\n        _this.draw(scale);\n        if (onFinish) onFinish();\n      });\n    }\n    /**\n     * Load an SVG from a string and measure it.\n     * @param {string} svgString String of SVG data to draw in quirks-mode.\n     * @return {object} the natural size, in Scratch units, of this SVG.\n     */\n  }, {\n    key: \"measure\",\n    value: function measure(svgString) {\n      this.loadString(svgString);\n      return this._measurements;\n    }\n    /**\n     * @return {Array<number>} the natural size, in Scratch units, of this SVG.\n     */\n  }, {\n    key: \"loadString\",\n    /**\n     * Load an SVG string and normalize it. All the steps before drawing/measuring.\n     * @param {!string} svgString String of SVG data to draw in quirks-mode.\n     * @param {?boolean} fromVersion2 True if we should perform conversion from\n     *     version 2 to version 3 svg.\n     */\n    value: function loadString(svgString, fromVersion2) {\n      // New svg string invalidates the cached image\n      this._cachedImage = null; // Parse string into SVG XML.\n      var parser = new DOMParser();\n      svgString = fixupSvgString(svgString);\n      this._svgDom = parser.parseFromString(svgString, 'text/xml');\n      if (this._svgDom.childNodes.length < 1 || this._svgDom.documentElement.localName !== 'svg') {\n        throw new Error('Document does not appear to be SVG.');\n      }\n      this._svgTag = this._svgDom.documentElement;\n      if (fromVersion2) {\n        // Fix gradients. Scratch 2 exports no x2 when x2 = 0, but\n        // SVG default is that x2 is 1. This must be done before\n        // transformStrokeWidths since transformStrokeWidths affects\n        // gradients.\n        this._transformGradients();\n      }\n      transformStrokeWidths(this._svgTag, window);\n      this._transformImages(this._svgTag);\n      if (fromVersion2) {\n        // Transform all text elements.\n        this._transformText(); // Transform measurements.\n        this._transformMeasurements(); // Fix stroke roundedness.\n        this._setGradientStrokeRoundedness();\n      } else if (!this._svgTag.getAttribute('viewBox')) {\n        // Renderer expects a view box.\n        this._transformMeasurements();\n      } else if (!this._svgTag.getAttribute('width') || !this._svgTag.getAttribute('height')) {\n        this._svgTag.setAttribute('width', this._svgTag.viewBox.baseVal.width);\n        this._svgTag.setAttribute('height', this._svgTag.viewBox.baseVal.height);\n      }\n      this._measurements = {\n        width: this._svgTag.viewBox.baseVal.width,\n        height: this._svgTag.viewBox.baseVal.height,\n        x: this._svgTag.viewBox.baseVal.x,\n        y: this._svgTag.viewBox.baseVal.y\n      };\n    }\n    /**\n     * Load an SVG string, normalize it, and prepare it for (synchronous) rendering.\n     * @param {!string} svgString String of SVG data to draw in quirks-mode.\n     * @param {?boolean} fromVersion2 True if we should perform conversion from version 2 to version 3 svg.\n     * @param {Function} [onFinish] - An optional callback to call when the SVG is loaded and can be rendered.\n     */\n  }, {\n    key: \"loadSVG\",\n    value: function loadSVG(svgString, fromVersion2, onFinish) {\n      this.loadString(svgString, fromVersion2);\n      this._createSVGImage(onFinish);\n    }\n    /**\n     * Creates an <img> element for the currently loaded SVG string, then calls the callback once it's loaded.\n     * @param {Function} [onFinish] - An optional callback to call when the <img> has loaded.\n     */\n  }, {\n    key: \"_createSVGImage\",\n    value: function _createSVGImage(onFinish) {\n      var _this2 = this;\n      if (this._cachedImage === null) this._cachedImage = new Image();\n      var img = this._cachedImage;\n      img.onload = function () {\n        _this2.loaded = true;\n        if (onFinish) onFinish();\n      };\n      var svgText = this.toString(true\n      /* shouldInjectFonts */\n      );\n      img.src = \"data:image/svg+xml;utf8,\".concat(encodeURIComponent(svgText));\n      this.loaded = false;\n    }\n    /**\n     * Transforms an SVG's text elements for Scratch 2.0 quirks.\n     * These quirks include:\n     * 1. `x` and `y` properties are removed/ignored.\n     * 2. Alignment is set to `text-before-edge`.\n     * 3. Line-breaks are converted to explicit <tspan> elements.\n     * 4. Any required fonts are injected.\n     */\n  }, {\n    key: \"_transformText\",\n    value: function _transformText() {\n      // Collect all text elements into a list.\n      var textElements = [];\n      var collectText = function collectText(domElement) {\n        if (domElement.localName === 'text') {\n          textElements.push(domElement);\n        }\n        for (var i = 0; i < domElement.childNodes.length; i++) {\n          collectText(domElement.childNodes[i]);\n        }\n      };\n      collectText(this._svgTag);\n      convertFonts(this._svgTag); // For each text element, apply quirks.\n      for (var _i = 0, _textElements = textElements; _i < _textElements.length; _i++) {\n        var textElement = _textElements[_i];\n        // Remove x and y attributes - they are not used in Scratch.\n        textElement.removeAttribute('x');\n        textElement.removeAttribute('y'); // Set text-before-edge alignment:\n        // Scratch renders all text like this.\n        textElement.setAttribute('alignment-baseline', 'text-before-edge');\n        textElement.setAttribute('xml:space', 'preserve'); // If there's no font size provided, provide one.\n        if (!textElement.getAttribute('font-size')) {\n          textElement.setAttribute('font-size', '18');\n        }\n        var text = textElement.textContent; // Fix line breaks in text, which are not natively supported by SVG.\n        // Only fix if text does not have child tspans.\n        // @todo this will not work for font sizes with units such as em, percent\n        // However, text made in scratch 2 should only ever export size 22 font.\n        var fontSize = parseFloat(textElement.getAttribute('font-size'));\n        var tx = 2;\n        var ty = 0;\n        var spacing = 1.2; // Try to match the position and spacing of Scratch 2.0's fonts.\n        // Different fonts seem to use different line spacing.\n        // Scratch 2 always uses alignment-baseline=text-before-edge\n        // However, most SVG readers don't support this attribute\n        // or don't support it alongside use of tspan, so the translations\n        // here are to make up for that.\n        if (textElement.getAttribute('font-family') === 'Handwriting') {\n          spacing = 2;\n          ty = -11 * fontSize / 22;\n        } else if (textElement.getAttribute('font-family') === 'Scratch') {\n          spacing = 0.89;\n          ty = -3 * fontSize / 22;\n        } else if (textElement.getAttribute('font-family') === 'Curly') {\n          spacing = 1.38;\n          ty = -6 * fontSize / 22;\n        } else if (textElement.getAttribute('font-family') === 'Marker') {\n          spacing = 1.45;\n          ty = -6 * fontSize / 22;\n        } else if (textElement.getAttribute('font-family') === 'Sans Serif') {\n          spacing = 1.13;\n          ty = -3 * fontSize / 22;\n        } else if (textElement.getAttribute('font-family') === 'Serif') {\n          spacing = 1.25;\n          ty = -4 * fontSize / 22;\n        }\n        if (textElement.transform.baseVal.numberOfItems === 0) {\n          var transform = this._svgTag.createSVGTransform();\n          textElement.transform.baseVal.appendItem(transform);\n        } // Right multiply matrix by a translation of (tx, ty)\n        var mtx = textElement.transform.baseVal.getItem(0).matrix;\n        mtx.e += mtx.a * tx + mtx.c * ty;\n        mtx.f += mtx.b * tx + mtx.d * ty;\n        if (text && textElement.childElementCount === 0) {\n          textElement.textContent = '';\n          var lines = text.split('\\n');\n          text = '';\n          var _iterator = _createForOfIteratorHelper(lines),\n              _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var line = _step.value;\n              var tspanNode = SvgElement.create('tspan');\n              tspanNode.setAttribute('x', '0');\n              tspanNode.setAttribute('style', 'white-space: pre');\n              tspanNode.setAttribute('dy', \"\".concat(spacing, \"em\"));\n              tspanNode.textContent = line ? line : ' ';\n              textElement.appendChild(tspanNode);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      }\n    }\n    /**\n     * @param {string} [tagName] svg tag to search for (or collect all elements if not given)\n     * @return {Array} a list of elements with the given tagname in _svgTag\n     */\n  }, {\n    key: \"_collectElements\",\n    value: function _collectElements(tagName) {\n      var elts = [];\n      var collectElements = function collectElements(domElement) {\n        if ((domElement.localName === tagName || typeof tagName === 'undefined') && domElement.getAttribute) {\n          elts.push(domElement);\n        }\n        for (var i = 0; i < domElement.childNodes.length; i++) {\n          collectElements(domElement.childNodes[i]);\n        }\n      };\n      collectElements(this._svgTag);\n      return elts;\n    }\n    /**\n     * Fix SVGs to comply with SVG spec. Scratch 2 defaults to x2 = 0 when x2 is missing, but\n     * SVG defaults to x2 = 1 when missing.\n     */\n  }, {\n    key: \"_transformGradients\",\n    value: function _transformGradients() {\n      var linearGradientElements = this._collectElements('linearGradient'); // For each gradient element, supply x2 if necessary.\n      var _iterator2 = _createForOfIteratorHelper(linearGradientElements),\n          _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var gradientElement = _step2.value;\n          if (!gradientElement.getAttribute('x2')) {\n            gradientElement.setAttribute('x2', '0');\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * Fix SVGs to match appearance in Scratch 2, which used nearest neighbor scaling for bitmaps\n     * within SVGs.\n     */\n  }, {\n    key: \"_transformImages\",\n    value: function _transformImages() {\n      var imageElements = this._collectElements('image'); // For each image element, set image rendering to pixelated\n      var pixelatedImages = 'image-rendering: optimizespeed; image-rendering: pixelated;';\n      var _iterator3 = _createForOfIteratorHelper(imageElements),\n          _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var elt = _step3.value;\n          if (elt.getAttribute('style')) {\n            elt.setAttribute('style', \"\".concat(pixelatedImages, \" \").concat(elt.getAttribute('style')));\n          } else {\n            elt.setAttribute('style', pixelatedImages);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n    /**\n     * Find the largest stroke width in the svg. If a shape has no\n     * `stroke` property, it has a stroke-width of 0. If it has a `stroke`,\n     * it is by default a stroke-width of 1.\n     * This is used to enlarge the computed bounding box, which doesn't take\n     * stroke width into account.\n     * @param {SVGSVGElement} rootNode The root SVG node to traverse.\n     * @return {number} The largest stroke width in the SVG.\n     */\n  }, {\n    key: \"_findLargestStrokeWidth\",\n    value: function _findLargestStrokeWidth(rootNode) {\n      var largestStrokeWidth = 0;\n      var collectStrokeWidths = function collectStrokeWidths(domElement) {\n        if (domElement.getAttribute) {\n          if (domElement.getAttribute('stroke')) {\n            largestStrokeWidth = Math.max(largestStrokeWidth, 1);\n          }\n          if (domElement.getAttribute('stroke-width')) {\n            largestStrokeWidth = Math.max(largestStrokeWidth, Number(domElement.getAttribute('stroke-width')) || 0);\n          }\n        }\n        for (var i = 0; i < domElement.childNodes.length; i++) {\n          collectStrokeWidths(domElement.childNodes[i]);\n        }\n      };\n      collectStrokeWidths(rootNode);\n      return largestStrokeWidth;\n    }\n    /**\n     * Find all instances of a URL-referenced `stroke` in the svg. In 2.0, all gradient strokes\n     * have a round `stroke-linejoin` and `stroke-linecap`... for some reason.\n     */\n  }, {\n    key: \"_setGradientStrokeRoundedness\",\n    value: function _setGradientStrokeRoundedness() {\n      var elements = this._collectElements();\n      var _iterator4 = _createForOfIteratorHelper(elements),\n          _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var elt = _step4.value;\n          if (!elt.style) continue;\n          var stroke = elt.style.stroke || elt.getAttribute('stroke');\n          if (stroke && stroke.match(/^url\\(#.*\\)$/)) {\n            elt.style['stroke-linejoin'] = 'round';\n            elt.style['stroke-linecap'] = 'round';\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n    /**\n     * Transform the measurements of the SVG.\n     * In Scratch 2.0, SVGs are drawn without respect to the width,\n     * height, and viewBox attribute on the tag. The exporter\n     * does output these properties - but they appear to be incorrect often.\n     * To address the incorrect measurements, we append the DOM to the\n     * document, and then use SVG's native `getBBox` to find the real\n     * drawn dimensions. This ensures things drawn in negative dimensions,\n     * outside the given viewBox, etc., are all eventually drawn to the canvas.\n     * I tried to do this several other ways: stripping the width/height/viewBox\n     * attributes and then drawing (Firefox won't draw anything),\n     * or inflating them and then measuring a canvas. But this seems to be\n     * a natural and performant way.\n     */\n  }, {\n    key: \"_transformMeasurements\",\n    value: function _transformMeasurements() {\n      // Append the SVG dom to the document.\n      // This allows us to use `getBBox` on the page,\n      // which returns the full bounding-box of all drawn SVG\n      // elements, similar to how Scratch 2.0 did measurement.\n      var svgSpot = document.createElement('span'); // Since we're adding user-provided SVG to document.body,\n      // sanitizing is required. This should not affect bounding box calculation.\n      // outerHTML is attribute of Element (and not HTMLElement), so use it instead of\n      // calling serializer or toString()\n      // NOTE: this._svgTag remains untouched!\n      var rawValue = this._svgTag.outerHTML;\n      var sanitizedValue = DOMPurify.sanitize(rawValue, {\n        // Use SVG profile (no HTML elements)\n        USE_PROFILES: {\n          svg: true\n        },\n        // Remove some tags that Scratch does not use.\n        FORBID_TAGS: ['a', 'audio', 'canvas', 'video'],\n        // Allow data URI in image tags (e.g. SVGs converted from bitmap)\n        ADD_DATA_URI_TAGS: ['image']\n      });\n      var bbox;\n      try {\n        // Insert sanitized value.\n        svgSpot.innerHTML = sanitizedValue;\n        document.body.appendChild(svgSpot); // Take the bounding box. We have to get elements via svgSpot\n        // because we added it via innerHTML.\n        bbox = svgSpot.children[0].getBBox();\n      } finally {\n        // Always destroy the element, even if, for example, getBBox throws.\n        document.body.removeChild(svgSpot);\n      } // Enlarge the bbox from the largest found stroke width\n      // This may have false-positives, but at least the bbox will always\n      // contain the full graphic including strokes.\n      // If the width or height is zero however, don't enlarge since\n      // they won't have a stroke width that needs to be enlarged.\n      var halfStrokeWidth;\n      if (bbox.width === 0 || bbox.height === 0) {\n        halfStrokeWidth = 0;\n      } else {\n        halfStrokeWidth = this._findLargestStrokeWidth(this._svgTag) / 2;\n      }\n      var width = bbox.width + halfStrokeWidth * 2;\n      var height = bbox.height + halfStrokeWidth * 2;\n      var x = bbox.x - halfStrokeWidth;\n      var y = bbox.y - halfStrokeWidth; // Set the correct measurements on the SVG tag\n      this._svgTag.setAttribute('width', width);\n      this._svgTag.setAttribute('height', height);\n      this._svgTag.setAttribute('viewBox', \"\".concat(x, \" \").concat(y, \" \").concat(width, \" \").concat(height));\n    }\n    /**\n     * Serialize the active SVG DOM to a string.\n     * @param {?boolean} shouldInjectFonts True if fonts should be included in the SVG as\n     *     base64 data.\n     * @returns {string} String representing current SVG data.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString(shouldInjectFonts) {\n      var serializer = new XMLSerializer();\n      var string = serializer.serializeToString(this._svgDom);\n      if (shouldInjectFonts) {\n        string = inlineSvgFonts(string);\n      }\n      return string;\n    }\n    /**\n     * Synchronously draw the loaded SVG to this renderer's `canvas`.\n     * @param {number} [scale] - Optionally, also scale the image by this factor.\n     */\n  }, {\n    key: \"draw\",\n    value: function draw(scale) {\n      if (!this.loaded) throw new Error('SVG image has not finished loading');\n      this._drawFromImage(scale);\n    }\n    /**\n     * Asynchronously draw the (possibly non-loaded) SVG to a canvas.\n     * @param {number} [scale] - Optionally, also scale the image by this factor.\n     * @param {Function} [onFinish] - An optional callback to call when the draw operation is complete.\n     * @deprecated Use the `loadSVG` and public `draw` method instead.\n     */\n  }, {\n    key: \"_draw\",\n    value: function _draw(scale, onFinish) {\n      var _this3 = this;\n      // Convert the SVG text to an Image, and then draw it to the canvas.\n      if (this._cachedImage === null) {\n        this._createSVGImage(function () {\n          _this3._drawFromImage(scale);\n          onFinish();\n        });\n      } else {\n        this._drawFromImage(scale);\n        onFinish();\n      }\n    }\n    /**\n     * Draw to the canvas from a loaded image element.\n     * @param {number} [scale] - Optionally, also scale the image by this factor.\n     **/\n  }, {\n    key: \"_drawFromImage\",\n    value: function _drawFromImage(scale) {\n      if (this._cachedImage === null) return;\n      var ratio = Number.isFinite(scale) ? scale : 1;\n      var bbox = this._measurements;\n      this._canvas.width = bbox.width * ratio;\n      this._canvas.height = bbox.height * ratio; // Even if the canvas at the current scale has a nonzero size, the image's dimensions are floored pre-scaling.\n      // e.g. if an image has a width of 0.4 and is being rendered at 3x scale, the canvas will have a width of 1, but\n      // the image's width will be rounded down to 0 on some browsers (Firefox) prior to being drawn at that scale.\n      if (this._canvas.width <= 0 || this._canvas.height <= 0 || this._cachedImage.naturalWidth <= 0 || this._cachedImage.naturalHeight <= 0) return;\n      this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);\n      this._context.scale(ratio, ratio);\n      this._context.drawImage(this._cachedImage, 0, 0); // Reset the canvas transform after drawing.\n      this._context.setTransform(1, 0, 0, 1, 0, 0); // Set the CSS style of the canvas to the actual measurements.\n      this._canvas.style.width = bbox.width;\n      this._canvas.style.height = bbox.height;\n    }\n  }, {\n    key: \"canvas\",\n    get: function get() {\n      return this._canvas;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return [this._measurements.width, this._measurements.height];\n    }\n    /**\n     * @return {Array<number>} the offset (upper left corner) of the SVG's view box.\n     */\n  }, {\n    key: \"viewOffset\",\n    get: function get() {\n      return [this._measurements.x, this._measurements.y];\n    }\n  }]);\n  return SvgRenderer;\n}();\nmodule.exports = SvgRenderer;\n })