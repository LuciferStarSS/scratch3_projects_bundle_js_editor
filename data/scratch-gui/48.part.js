/* 48 */\n (function(module, exports, __webpack_require__) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nvar Color = __webpack_require__(180);\n/**\n * @fileoverview\n * Utilities for casting and comparing Scratch data-types.\n * Scratch behaves slightly differently from JavaScript in many respects,\n * and these differences should be encapsulated below.\n * For example, in Scratch, add(1, join(\"hello\", world\")) -> 1.\n * This is because \"hello world\" is cast to 0.\n * In JavaScript, 1 + Number(\"hello\" + \"world\") would give you NaN.\n * Use when coercing a value before computation.\n */\nvar Cast = function () {\n  function Cast() {\n    _classCallCheck(this, Cast);\n  }\n  _createClass(Cast, null, [{\n    key: \"toNumber\",\n    /**\n     * Scratch cast to number.\n     * Treats NaN as 0.\n     * In Scratch 2.0, this is captured by `interp.numArg.`\n     * @param {*} value Value to cast to number.\n     * @return {number} The Scratch-casted number value.\n     */\n    value: function toNumber(value) {\n      // If value is already a number we don't need to coerce it with\n      // Number().\n      if (typeof value === 'number') {\n        // Scratch treats NaN as 0, when needed as a number.\n        // E.g., 0 + NaN -> 0.\n        if (Number.isNaN(value)) {\n          return 0;\n        }\n        return value;\n      }\n      var n = Number(value);\n      if (Number.isNaN(n)) {\n        // Scratch treats NaN as 0, when needed as a number.\n        // E.g., 0 + NaN -> 0.\n        return 0;\n      }\n      return n;\n    }\n    /**\n     * Scratch cast to boolean.\n     * In Scratch 2.0, this is captured by `interp.boolArg.`\n     * Treats some string values differently from JavaScript.\n     * @param {*} value Value to cast to boolean.\n     * @return {boolean} The Scratch-casted boolean value.\n     */\n  }, {\n    key: \"toBoolean\",\n    value: function toBoolean(value) {\n      // Already a boolean?\n      if (typeof value === 'boolean') {\n        return value;\n      }\n      if (typeof value === 'string') {\n        // These specific strings are treated as false in Scratch.\n        if (value === '' || value === '0' || value.toLowerCase() === 'false') {\n          return false;\n        } // All other strings treated as true.\n        return true;\n      } // Coerce other values and numbers.\n      return Boolean(value);\n    }\n    /**\n     * Scratch cast to string.\n     * @param {*} value Value to cast to string.\n     * @return {string} The Scratch-casted string value.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString(value) {\n      return String(value);\n    }\n    /**\n     * Cast any Scratch argument to an RGB color array to be used for the renderer.\n     * @param {*} value Value to convert to RGB color array.\n     * @return {Array.<number>} [r,g,b], values between 0-255.\n     */\n  }, {\n    key: \"toRgbColorList\",\n    value: function toRgbColorList(value) {\n      var color = Cast.toRgbColorObject(value);\n      return [color.r, color.g, color.b];\n    }\n    /**\n     * Cast any Scratch argument to an RGB color object to be used for the renderer.\n     * @param {*} value Value to convert to RGB color object.\n     * @return {RGBOject} [r,g,b], values between 0-255.\n     */\n  }, {\n    key: \"toRgbColorObject\",\n    value: function toRgbColorObject(value) {\n      var color;\n      if (typeof value === 'string' && value.substring(0, 1) === '#') {\n        color = Color.hexToRgb(value); // If the color wasn't *actually* a hex color, cast to black\n        if (!color) color = {\n          r: 0,\n          g: 0,\n          b: 0,\n          a: 255\n        };\n      } else {\n        color = Color.decimalToRgb(Cast.toNumber(value));\n      }\n      return color;\n    }\n    /**\n     * Determine if a Scratch argument is a white space string (or null / empty).\n     * @param {*} val value to check.\n     * @return {boolean} True if the argument is all white spaces or null / empty.\n     */\n  }, {\n    key: \"isWhiteSpace\",\n    value: function isWhiteSpace(val) {\n      return val === null || typeof val === 'string' && val.trim().length === 0;\n    }\n    /**\n     * Compare two values, using Scratch cast, case-insensitive string compare, etc.\n     * In Scratch 2.0, this is captured by `interp.compare.`\n     * @param {*} v1 First value to compare.\n     * @param {*} v2 Second value to compare.\n     * @returns {number} Negative number if v1 < v2; 0 if equal; positive otherwise.\n     */\n  }, {\n    key: \"compare\",\n    value: function compare(v1, v2) {\n      var n1 = Number(v1);\n      var n2 = Number(v2);\n      if (n1 === 0 && Cast.isWhiteSpace(v1)) {\n        n1 = NaN;\n      } else if (n2 === 0 && Cast.isWhiteSpace(v2)) {\n        n2 = NaN;\n      }\n      if (isNaN(n1) || isNaN(n2)) {\n        // At least one argument can't be converted to a number.\n        // Scratch compares strings as case insensitive.\n        var s1 = String(v1).toLowerCase();\n        var s2 = String(v2).toLowerCase();\n        if (s1 < s2) {\n          return -1;\n        } else if (s1 > s2) {\n          return 1;\n        }\n        return 0;\n      } // Handle the special case of Infinity\n      if (n1 === Infinity && n2 === Infinity || n1 === -Infinity && n2 === -Infinity) {\n        return 0;\n      } // Compare as numbers.\n      return n1 - n2;\n    }\n    /**\n     * Determine if a Scratch argument number represents a round integer.\n     * @param {*} val Value to check.\n     * @return {boolean} True if number looks like an integer.\n     */\n  }, {\n    key: \"isInt\",\n    value: function isInt(val) {\n      // Values that are already numbers.\n      if (typeof val === 'number') {\n        if (isNaN(val)) {\n          // NaN is considered an integer.\n          return true;\n        } // True if it's \"round\" (e.g., 2.0 and 2).\n        return val === parseInt(val, 10);\n      } else if (typeof val === 'boolean') {\n        // `True` and `false` always represent integer after Scratch cast.\n        return true;\n      } else if (typeof val === 'string') {\n        // If it contains a decimal point, don't consider it an int.\n        return val.indexOf('.') < 0;\n      }\n      return false;\n    }\n  }, {\n    key: \"toListIndex\",\n    /**\n     * Compute a 1-based index into a list, based on a Scratch argument.\n     * Two special cases may be returned:\n     * LIST_ALL: if the block is referring to all of the items in the list.\n     * LIST_INVALID: if the index was invalid in any way.\n     * @param {*} index Scratch arg, including 1-based numbers or special cases.\n     * @param {number} length Length of the list.\n     * @param {boolean} acceptAll Whether it should accept \"all\" or not.\n     * @return {(number|string)} 1-based index for list, LIST_ALL, or LIST_INVALID.\n     */\n    value: function toListIndex(index, length, acceptAll) {\n      if (typeof index !== 'number') {\n        if (index === 'all') {\n          return acceptAll ? Cast.LIST_ALL : Cast.LIST_INVALID;\n        }\n        if (index === 'last') {\n          if (length > 0) {\n            return length;\n          }\n          return Cast.LIST_INVALID;\n        } else if (index === 'random' || index === 'any') {\n          if (length > 0) {\n            return 1 + Math.floor(Math.random() * length);\n          }\n          return Cast.LIST_INVALID;\n        }\n      }\n      index = Math.floor(Cast.toNumber(index));\n      if (index < 1 || index > length) {\n        return Cast.LIST_INVALID;\n      }\n      return index;\n    }\n  }, {\n    key: \"LIST_INVALID\",\n    get: function get() {\n      return 'INVALID';\n    }\n  }, {\n    key: \"LIST_ALL\",\n    get: function get() {\n      return 'ALL';\n    }\n  }]);\n  return Cast;\n}();\nmodule.exports = Cast;\n })