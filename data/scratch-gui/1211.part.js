/* 1211 */\n (function(module, exports, __webpack_require__) {\n(function(Buffer) {function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nvar md5 = __webpack_require__(161);\nvar log = __webpack_require__(308);\nvar Asset = __webpack_require__(309);\nvar AssetType = __webpack_require__(483);\nvar DataFormat = __webpack_require__(310);\nvar Helper = __webpack_require__(484);\n/**\n * @typedef {object} BuiltinAssetRecord\n * @property {AssetType} type - The type of the asset.\n * @property {DataFormat} format - The format of the asset's data.\n * @property {?string} id - The asset's unique ID.\n * @property {Buffer} data - The asset's data.\n */\n/**\n * @type {BuiltinAssetRecord[]}\n */\nvar DefaultAssets = [{\n  type: AssetType.ImageBitmap,\n  format: DataFormat.PNG,\n  id: null,\n  data: new Buffer(__webpack_require__(1213) // eslint-disable-line global-require\n  )\n}, {\n  type: AssetType.Sound,\n  format: DataFormat.WAV,\n  id: null,\n  data: new Buffer(__webpack_require__(1214) // eslint-disable-line global-require\n  )\n}, {\n  type: AssetType.ImageVector,\n  format: DataFormat.SVG,\n  id: null,\n  data: new Buffer(__webpack_require__(1215) // eslint-disable-line global-require\n  )\n}];\n/**\n * @type {BuiltinAssetRecord[]}\n */\nvar BuiltinAssets = DefaultAssets.concat([]);\nvar BuiltinHelper = function (_Helper) {\n  _inherits(BuiltinHelper, _Helper);\n  var _super = _createSuper(BuiltinHelper);\n  function BuiltinHelper(parent) {\n    var _this;\n    _classCallCheck(this, BuiltinHelper);\n    _this = _super.call(this, parent);\n    /**\n     * In-memory storage for all built-in assets.\n     * @type {Object.<AssetType, AssetIdMap>} Maps asset type to a map of asset ID to actual assets.\n     * @typedef {Object.<string, BuiltinAssetRecord>} AssetIdMap - Maps asset ID to asset.\n     */\n    _this.assets = {};\n    BuiltinAssets.forEach(function (assetRecord) {\n      assetRecord.id = _this._store(assetRecord.type, assetRecord.format, assetRecord.data, assetRecord.id);\n    });\n    return _this;\n  }\n  /**\n   * Call `setDefaultAssetId` on the parent `ScratchStorage` instance to register all built-in default assets.\n   */\n  _createClass(BuiltinHelper, [{\n    key: \"registerDefaultAssets\",\n    value: function registerDefaultAssets() {\n      var numAssets = DefaultAssets.length;\n      for (var assetIndex = 0; assetIndex < numAssets; ++assetIndex) {\n        var assetRecord = DefaultAssets[assetIndex];\n        this.parent.setDefaultAssetId(assetRecord.type, assetRecord.id);\n      }\n    }\n    /**\n     * Synchronously fetch a cached asset for a given asset id. Returns null if not found.\n     * @param {string} assetId - The id for the asset to fetch.\n     * @returns {?Asset} The asset for assetId, if it exists.\n     */\n  }, {\n    key: \"get\",\n    value: function get(assetId) {\n      var asset = null;\n      if (this.assets.hasOwnProperty(assetId)) {\n        /** @type{BuiltinAssetRecord} */\n        var assetRecord = this.assets[assetId];\n        asset = new Asset(assetRecord.type, assetRecord.id, assetRecord.format, assetRecord.data);\n      }\n      return asset;\n    }\n    /**\n     * Alias for store (old name of store)\n     * @deprecated Use BuiltinHelper.store\n     * @param {AssetType} assetType - The type of the asset to cache.\n     * @param {DataFormat} dataFormat - The dataFormat of the data for the cached asset.\n     * @param {Buffer} data - The data for the cached asset.\n     * @param {string} id - The id for the cached asset.\n     * @returns {string} The calculated id of the cached asset, or the supplied id if the asset is mutable.\n     */\n  }, {\n    key: \"cache\",\n    value: function cache(assetType, dataFormat, data, id) {\n      log.warn('Deprecation: BuiltinHelper.cache has been replaced with BuiltinHelper.store.');\n      return this.store(assetType, dataFormat, data, id);\n    }\n    /**\n     * Deprecated external API for _store\n     * @deprecated Not for external use. Create assets and keep track of them outside of the storage instance.\n     * @param {AssetType} assetType - The type of the asset to cache.\n     * @param {DataFormat} dataFormat - The dataFormat of the data for the cached asset.\n     * @param {Buffer} data - The data for the cached asset.\n     * @param {(string|number)} id - The id for the cached asset.\n     * @returns {string} The calculated id of the cached asset, or the supplied id if the asset is mutable.\n     */\n  }, {\n    key: \"store\",\n    value: function store(assetType, dataFormat, data, id) {\n      log.warn('Deprecation: use Storage.createAsset. BuiltinHelper is for internal use only.');\n      return this._store(assetType, dataFormat, data, id);\n    }\n    /**\n     * Cache an asset for future lookups by ID.\n     * @param {AssetType} assetType - The type of the asset to cache.\n     * @param {DataFormat} dataFormat - The dataFormat of the data for the cached asset.\n     * @param {Buffer} data - The data for the cached asset.\n     * @param {(string|number)} id - The id for the cached asset.\n     * @returns {string} The calculated id of the cached asset, or the supplied id if the asset is mutable.\n     */\n  }, {\n    key: \"_store\",\n    value: function _store(assetType, dataFormat, data, id) {\n      if (!dataFormat) throw new Error('Data cached without specifying its format');\n      if (id !== '' && id !== null && typeof id !== 'undefined') {\n        if (this.assets.hasOwnProperty(id) && assetType.immutable) return id;\n      } else if (assetType.immutable) {\n        id = md5(data);\n      } else {\n        throw new Error('Tried to cache data without an id');\n      }\n      this.assets[id] = {\n        type: assetType,\n        format: dataFormat,\n        id: id,\n        data: data\n      };\n      return id;\n    }\n    /**\n     * Fetch an asset but don't process dependencies.\n     * @param {AssetType} assetType - The type of asset to fetch.\n     * @param {string} assetId - The ID of the asset to fetch: a project ID, MD5, etc.\n     * @return {?Promise.<Asset>} A promise for the contents of the asset.\n     */\n  }, {\n    key: \"load\",\n    value: function load(assetType, assetId) {\n      if (!this.get(assetId)) {\n        // Return null immediately so Storage can quickly move to trying the\n        // next helper.\n        return null;\n      }\n      return Promise.resolve(this.get(assetId));\n    }\n  }]);\n  return BuiltinHelper;\n}(Helper);\nmodule.exports = BuiltinHelper;\n}.call(this, __webpack_require__(56).Buffer))\n })