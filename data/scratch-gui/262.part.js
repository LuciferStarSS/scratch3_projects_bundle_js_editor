/* 262 */\n (function(module, exports, __webpack_require__) {\n\"use strict\";\nfunction encodeSync(audioData, opts) {\n  opts = opts || {};\n  audioData = toAudioData(audioData);\n  if (audioData === null) {\n    throw new TypeError(\"Invalid AudioData\");\n  }\n  var floatingPoint = !!(opts.floatingPoint || opts.float);\n  var bitDepth = floatingPoint ? 32 : ((opts.bitDepth|0) || 16);\n  var bytes = bitDepth >> 3;\n  var length = audioData.length * audioData.numberOfChannels * bytes;\n  var dataView = new DataView(new Uint8Array(44 + length).buffer);\n  var writer = createWriter(dataView);\n  var format = {\n    formatId: floatingPoint ? 0x0003 : 0x0001,\n    floatingPoint: floatingPoint,\n    numberOfChannels: audioData.numberOfChannels,\n    sampleRate: audioData.sampleRate,\n    bitDepth: bitDepth\n  };\n  writeHeader(writer, format, dataView.buffer.byteLength - 8);\n  var err = writeData(writer, format, length, audioData, opts);\n  if (err instanceof Error) {\n    throw err;\n  }\n  return dataView.buffer;\n}\nfunction encode(audioData, opts) {\n  return new Promise(function(resolve) {\n    resolve(encodeSync(audioData, opts));\n  });\n}\nfunction toAudioData(data) {\n  var audioData = {};\n  if (typeof data.sampleRate !== \"number\") {\n    return null;\n  }\n  if (!Array.isArray(data.channelData)) {\n    return null;\n  }\n  if (!(data.channelData[0] instanceof Float32Array)) {\n    return null;\n  }\n  audioData.numberOfChannels = data.channelData.length;\n  audioData.length = data.channelData[0].length|0;\n  audioData.sampleRate = data.sampleRate|0;\n  audioData.channelData = data.channelData;\n  return audioData;\n}\nfunction writeHeader(writer, format, length) {\n  var bytes = format.bitDepth >> 3;\n  writer.string(\"RIFF\");\n  writer.uint32(length);\n  writer.string(\"WAVE\");\n  writer.string(\"fmt \");\n  writer.uint32(16);\n  writer.uint16(format.floatingPoint ? 0x0003 : 0x0001);\n  writer.uint16(format.numberOfChannels);\n  writer.uint32(format.sampleRate);\n  writer.uint32(format.sampleRate * format.numberOfChannels * bytes);\n  writer.uint16(format.numberOfChannels * bytes);\n  writer.uint16(format.bitDepth);\n}\nfunction writeData(writer, format, length, audioData, opts) {\n  var bitDepth = format.bitDepth;\n  var encoderOption = format.floatingPoint ? \"f\" : opts.symmetric ? \"s\" : \"\";\n  var methodName = \"pcm\" + bitDepth + encoderOption;\n  if (!writer[methodName]) {\n    return new TypeError(\"Not supported bit depth: \" + bitDepth);\n  }\n  var write = writer[methodName].bind(writer);\n  var numberOfChannels = format.numberOfChannels;\n  var channelData = audioData.channelData;\n  writer.string(\"data\");\n  writer.uint32(length);\n  for (var i = 0, imax = audioData.length; i < imax; i++) {\n    for (var ch = 0; ch < numberOfChannels; ch++) {\n      write(channelData[ch][i]);\n    }\n  }\n}\nfunction createWriter(dataView) {\n  var pos = 0;\n  return {\n    int16: function(value) {\n      dataView.setInt16(pos, value, true);\n      pos += 2;\n    },\n    uint16: function(value) {\n      dataView.setUint16(pos, value, true);\n      pos += 2;\n    },\n    uint32: function(value) {\n      dataView.setUint32(pos, value, true);\n      pos += 4;\n    },\n    string: function(value) {\n      for (var i = 0, imax = value.length; i < imax; i++) {\n        dataView.setUint8(pos++, value.charCodeAt(i));\n      }\n    },\n    pcm8: function(value) {\n      value = Math.max(-1, Math.min(value, +1));\n      value = (value * 0.5 + 0.5) * 255;\n      value = Math.round(value)|0;\n      dataView.setUint8(pos, value, true);\n      pos += 1;\n    },\n    pcm8s: function(value) {\n      value = Math.round(value * 128) + 128;\n      value = Math.max(0, Math.min(value, 255));\n      dataView.setUint8(pos, value, true);\n      pos += 1;\n    },\n    pcm16: function(value) {\n      value = Math.max(-1, Math.min(value, +1));\n      value = value < 0 ? value * 32768 : value * 32767;\n      value = Math.round(value)|0;\n      dataView.setInt16(pos, value, true);\n      pos += 2;\n    },\n    pcm16s: function(value) {\n      value = Math.round(value * 32768);\n      value = Math.max(-32768, Math.min(value, 32767));\n      dataView.setInt16(pos, value, true);\n      pos += 2;\n    },\n    pcm24: function(value) {\n      value = Math.max(-1, Math.min(value, +1));\n      value = value < 0 ? 0x1000000 + value * 8388608 : value * 8388607;\n      value = Math.round(value)|0;\n      var x0 = (value >>  0) & 0xFF;\n      var x1 = (value >>  8) & 0xFF;\n      var x2 = (value >> 16) & 0xFF;\n      dataView.setUint8(pos + 0, x0);\n      dataView.setUint8(pos + 1, x1);\n      dataView.setUint8(pos + 2, x2);\n      pos += 3;\n    },\n    pcm24s: function(value) {\n      value = Math.round(value * 8388608);\n      value = Math.max(-8388608, Math.min(value, 8388607));\n      var x0 = (value >>  0) & 0xFF;\n      var x1 = (value >>  8) & 0xFF;\n      var x2 = (value >> 16) & 0xFF;\n      dataView.setUint8(pos + 0, x0);\n      dataView.setUint8(pos + 1, x1);\n      dataView.setUint8(pos + 2, x2);\n      pos += 3;\n    },\n    pcm32: function(value) {\n      value = Math.max(-1, Math.min(value, +1));\n      value = value < 0 ? value * 2147483648 : value * 2147483647;\n      value = Math.round(value)|0;\n      dataView.setInt32(pos, value, true);\n      pos += 4;\n    },\n    pcm32s: function(value) {\n      value = Math.round(value * 2147483648);\n      value = Math.max(-2147483648, Math.min(value, +2147483647));\n      dataView.setInt32(pos, value, true);\n      pos += 4;\n    },\n    pcm32f: function(value) {\n      dataView.setFloat32(pos, value, true);\n      pos += 4;\n    }\n  };\n}\nmodule.exports.encode = encode;\nmodule.exports.encode.sync = encodeSync;\n })