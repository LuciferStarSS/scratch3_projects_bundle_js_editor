/* 1232 */\n (function(module, exports, __webpack_require__) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nvar log = __webpack_require__(229);\nvar Loudness = function () {\n  /**\n   * Instrument and detect a loudness value from a local microphone.\n   * @param {AudioContext} audioContext - context to create nodes from for\n   *     detecting loudness\n   * @constructor\n   */\n  function Loudness(audioContext) {\n    _classCallCheck(this, Loudness);\n    /**\n     * AudioContext the mic will connect to and provide analysis of\n     * @type {AudioContext}\n     */\n    this.audioContext = audioContext;\n    /**\n     * Are we connecting to the mic yet?\n     * @type {Boolean}\n     */\n    this.connectingToMic = false;\n    /**\n     * microphone, for measuring loudness, with a level meter analyzer\n     * @type {MediaStreamSourceNode}\n     */\n    this.mic = null;\n  }\n  /**\n   * Get the current loudness of sound received by the microphone.\n   * Sound is measured in RMS and smoothed.\n   * Some code adapted from Tone.js: https://github.com/Tonejs/Tone.js\n   * @return {number} loudness scaled 0 to 100\n   */\n  _createClass(Loudness, [{\n    key: \"getLoudness\",\n    value: function getLoudness() {\n      var _this = this;\n      // The microphone has not been set up, so try to connect to it\n      if (!this.mic && !this.connectingToMic) {\n        this.connectingToMic = true; // prevent multiple connection attempts\n        navigator.mediaDevices.getUserMedia({\n          audio: true\n        }).then(function (stream) {\n          _this.audioStream = stream;\n          _this.mic = _this.audioContext.createMediaStreamSource(stream);\n          _this.analyser = _this.audioContext.createAnalyser();\n          _this.mic.connect(_this.analyser);\n          _this.micDataArray = new Float32Array(_this.analyser.fftSize);\n        }).catch(function (err) {\n          log.warn(err);\n        });\n      } // If the microphone is set up and active, measure the loudness\n      if (this.mic && this.audioStream.active) {\n        this.analyser.getFloatTimeDomainData(this.micDataArray);\n        var sum = 0; // compute the RMS of the sound\n        for (var i = 0; i < this.micDataArray.length; i++) {\n          sum += Math.pow(this.micDataArray[i], 2);\n        }\n        var rms = Math.sqrt(sum / this.micDataArray.length); // smooth the value, if it is descending\n        if (this._lastValue) {\n          rms = Math.max(rms, this._lastValue * 0.6);\n        }\n        this._lastValue = rms; // Scale the measurement so it's more sensitive to quieter sounds\n        rms *= 1.63;\n        rms = Math.sqrt(rms); // Scale it up to 0-100 and round\n        rms = Math.round(rms * 100); // Prevent it from going above 100\n        rms = Math.min(rms, 100);\n        return rms;\n      } // if there is no microphone input, return -1\n      return -1;\n    }\n  }]);\n  return Loudness;\n}();\nmodule.exports = Loudness;\n })