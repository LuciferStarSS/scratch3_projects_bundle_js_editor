/* 1380 */\n (function(module, exports, __webpack_require__) {\n\"use strict\";\nvar camelize     = __webpack_require__(504)\nvar hyphenate    = __webpack_require__(505)\nvar toLowerFirst = __webpack_require__(1383)\nvar toUpperFirst = __webpack_require__(503)\nvar prefixInfo = __webpack_require__(502)\nvar prefixProperties = __webpack_require__(499)\nvar docStyle = typeof document == 'undefined'?\n                {}:\n                document.documentElement.style\nmodule.exports = function(asStylePrefix){\n    return function(name, config){\n        config = config || {}\n        var styleName = toLowerFirst(camelize(name)),\n            cssName   = hyphenate(name),\n            theName   = asStylePrefix?\n                            styleName:\n                            cssName,\n            thePrefix = prefixInfo.style?\n                            asStylePrefix?\n                                prefixInfo.style:\n                                prefixInfo.css\n                            :\n                            ''\n        if ( styleName in docStyle ) {\n            return config.asString?\n                              theName :\n                            [ theName ]\n        }\n        //not a valid style name, so we'll return the value with a prefix\n        var upperCased     = theName,\n            prefixProperty = prefixProperties[cssName],\n            result         = []\n        if (asStylePrefix){\n            upperCased = toUpperFirst(theName)\n        }\n        if (typeof prefixProperty == 'function'){\n            var prefixedCss = prefixProperty(theName, thePrefix) || []\n            if (prefixedCss && !Array.isArray(prefixedCss)){\n                prefixedCss = [prefixedCss]\n            }\n            if (prefixedCss.length){\n                prefixedCss = prefixedCss.map(function(property){\n                    return asStylePrefix?\n                                toLowerFirst(camelize(property)):\n                                hyphenate(property)\n                })\n            }\n            result = result.concat(prefixedCss)\n        }\n        if (thePrefix){\n            result.push(thePrefix + upperCased)\n        }\n        result.push(theName)\n        if (config.asString || result.length == 1){\n            return result[0]\n        }\n        return result\n    }\n}\n })