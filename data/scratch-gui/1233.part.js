/* 1233 */\n (function(module, exports, __webpack_require__) {\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nvar _require = __webpack_require__(91),\n    EventEmitter = _require.EventEmitter;\nvar VolumeEffect = __webpack_require__(485);\n/**\n * Name of event that indicates playback has ended.\n * @const {string}\n */\nvar ON_ENDED = 'ended';\nvar SoundPlayer = function (_EventEmitter) {\n  _inherits(SoundPlayer, _EventEmitter);\n  var _super = _createSuper(SoundPlayer);\n  /**\n   * Play sounds that stop without audible clipping.\n   *\n   * @param {AudioEngine} audioEngine - engine to play sounds on\n   * @param {object} data - required data for sound playback\n   * @param {string} data.id - a unique id for this sound\n   * @param {ArrayBuffer} data.buffer - buffer of the sound's waveform to play\n   * @constructor\n   */\n  function SoundPlayer(audioEngine, _ref) {\n    var _this;\n    var id = _ref.id,\n        buffer = _ref.buffer;\n    _classCallCheck(this, SoundPlayer);\n    _this = _super.call(this);\n    /**\n     * Unique sound identifier set by AudioEngine.\n     * @type {string}\n     */\n    _this.id = id;\n    /**\n     * AudioEngine creating this sound player.\n     * @type {AudioEngine}\n     */\n    _this.audioEngine = audioEngine;\n    /**\n     * Decoded audio buffer from audio engine for playback.\n     * @type {AudioBuffer}\n     */\n    _this.buffer = buffer;\n    /**\n     * Output audio node.\n     * @type {AudioNode}\n     */\n    _this.outputNode = null;\n    /**\n     * VolumeEffect used to fade out playing sounds when stopping them.\n     * @type {VolumeEffect}\n     */\n    _this.volumeEffect = null;\n    /**\n     * Target engine, effect, or chain this player directly connects to.\n     * @type {AudioEngine|Effect|EffectChain}\n     */\n    _this.target = null;\n    /**\n     * Internally is the SoundPlayer initialized with at least its buffer\n     * source node and output node.\n     * @type {boolean}\n     */\n    _this.initialized = false;\n    /**\n     * Is the sound playing or starting to play?\n     * @type {boolean}\n     */\n    _this.isPlaying = false;\n    /**\n     * Timestamp sound is expected to be starting playback until. Once the\n     * future timestamp is reached the sound is considered to be playing\n     * through the audio hardware and stopping should fade out instead of\n     * cutting off playback.\n     * @type {number}\n     */\n    _this.startingUntil = 0;\n    /**\n     * Rate to play back the audio at.\n     * @type {number}\n     */\n    _this.playbackRate = 1; // handleEvent is a EventTarget api for the DOM, however the\n    // web-audio-test-api we use uses an addEventListener that isn't\n    // compatable with object and requires us to pass this bound function\n    // instead\n    _this.handleEvent = _this.handleEvent.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n   * Is plaback currently starting?\n   * @type {boolean}\n   */\n  _createClass(SoundPlayer, [{\n    key: \"handleEvent\",\n    /**\n     * Handle any event we have told the output node to listen for.\n     * @param {Event} event - dom event to handle\n     */\n    value: function handleEvent(event) {\n      if (event.type === ON_ENDED) {\n        this.onEnded();\n      }\n    }\n    /**\n     * Event listener for when playback ends.\n     */\n  }, {\n    key: \"onEnded\",\n    value: function onEnded() {\n      this.emit('stop');\n      this.isPlaying = false;\n    }\n    /**\n     * Create the buffer source node during initialization or secondary\n     * playback.\n     */\n  }, {\n    key: \"_createSource\",\n    value: function _createSource() {\n      if (this.outputNode !== null) {\n        this.outputNode.removeEventListener(ON_ENDED, this.handleEvent);\n        this.outputNode.disconnect();\n      }\n      this.outputNode = this.audioEngine.audioContext.createBufferSource();\n      this.outputNode.playbackRate.value = this.playbackRate;\n      this.outputNode.buffer = this.buffer;\n      this.outputNode.addEventListener(ON_ENDED, this.handleEvent);\n      if (this.target !== null) {\n        this.connect(this.target);\n      }\n    }\n    /**\n     * Initialize the player for first playback.\n     */\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      this.initialized = true;\n      this._createSource();\n    }\n    /**\n     * Connect the player to the engine or an effect chain.\n     * @param {object} target - object to connect to\n     * @returns {object} - return this sound player\n     */\n  }, {\n    key: \"connect\",\n    value: function connect(target) {\n      if (target === this.volumeEffect) {\n        this.outputNode.disconnect();\n        this.outputNode.connect(this.volumeEffect.getInputNode());\n        return;\n      }\n      this.target = target;\n      if (!this.initialized) {\n        return;\n      }\n      if (this.volumeEffect === null) {\n        this.outputNode.disconnect();\n        this.outputNode.connect(target.getInputNode());\n      } else {\n        this.volumeEffect.connect(target);\n      }\n      return this;\n    }\n    /**\n     * Teardown the player.\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (!this.initialized) {\n        return;\n      }\n      this.stopImmediately();\n      if (this.volumeEffect !== null) {\n        this.volumeEffect.dispose();\n        this.volumeEffect = null;\n      }\n      this.outputNode.disconnect();\n      this.outputNode = null;\n      this.target = null;\n      this.initialized = false;\n    }\n    /**\n     * Take the internal state of this player and create a new player from\n     * that. Restore the state of this player to that before its first playback.\n     *\n     * The returned player can be used to stop the original playback or\n     * continue it without manipulation from the original player.\n     *\n     * @returns {SoundPlayer} - new SoundPlayer with old state\n     */\n  }, {\n    key: \"take\",\n    value: function take() {\n      if (this.outputNode) {\n        this.outputNode.removeEventListener(ON_ENDED, this.handleEvent);\n      }\n      var taken = new SoundPlayer(this.audioEngine, this);\n      taken.playbackRate = this.playbackRate;\n      if (this.isPlaying) {\n        taken.startingUntil = this.startingUntil;\n        taken.isPlaying = this.isPlaying;\n        taken.initialized = this.initialized;\n        taken.outputNode = this.outputNode;\n        taken.outputNode.addEventListener(ON_ENDED, taken.handleEvent);\n        taken.volumeEffect = this.volumeEffect;\n        if (taken.volumeEffect) {\n          taken.volumeEffect.audioPlayer = taken;\n        }\n        if (this.target !== null) {\n          taken.connect(this.target);\n        }\n        this.emit('stop');\n        taken.emit('play');\n      }\n      this.outputNode = null;\n      this.volumeEffect = null;\n      this.initialized = false;\n      this.startingUntil = 0;\n      this.isPlaying = false;\n      return taken;\n    }\n    /**\n     * Start playback for this sound.\n     *\n     * If the sound is already playing it will stop playback with a quick fade\n     * out.\n     */\n  }, {\n    key: \"play\",\n    value: function play() {\n      if (this.isStarting) {\n        this.emit('stop');\n        this.emit('play');\n        return;\n      }\n      if (this.isPlaying) {\n        this.stop();\n      }\n      if (this.initialized) {\n        this._createSource();\n      } else {\n        this.initialize();\n      }\n      this.outputNode.start();\n      this.isPlaying = true;\n      var _this$audioEngine = this.audioEngine,\n          currentTime = _this$audioEngine.currentTime,\n          DECAY_DURATION = _this$audioEngine.DECAY_DURATION;\n      this.startingUntil = currentTime + DECAY_DURATION;\n      this.emit('play');\n    }\n    /**\n     * Stop playback after quickly fading out.\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this.isPlaying) {\n        return;\n      } // always do a manual stop on a taken / volume effect fade out sound\n      // player take will emit \"stop\" as well as reset all of our playing\n      // statuses / remove our nodes / etc\n      var taken = this.take();\n      taken.volumeEffect = new VolumeEffect(taken.audioEngine, taken, null);\n      taken.volumeEffect.connect(taken.target); // volumeEffect will recursively connect to us if it needs to, so this\n      // happens too:\n      // taken.connect(taken.volumeEffect);\n      taken.finished().then(function () {\n        return taken.dispose();\n      });\n      taken.volumeEffect.set(0);\n      var _this$audioEngine2 = this.audioEngine,\n          currentTime = _this$audioEngine2.currentTime,\n          DECAY_DURATION = _this$audioEngine2.DECAY_DURATION;\n      taken.outputNode.stop(currentTime + DECAY_DURATION);\n    }\n    /**\n     * Stop immediately without fading out. May cause audible clipping.\n     */\n  }, {\n    key: \"stopImmediately\",\n    value: function stopImmediately() {\n      if (!this.isPlaying) {\n        return;\n      }\n      this.outputNode.stop();\n      this.isPlaying = false;\n      this.startingUntil = 0;\n      this.emit('stop');\n    }\n    /**\n     * Return a promise that resolves when the sound next finishes.\n     * @returns {Promise} - resolves when the sound finishes\n     */\n  }, {\n    key: \"finished\",\n    value: function finished() {\n      var _this2 = this;\n      return new Promise(function (resolve) {\n        _this2.once('stop', resolve);\n      });\n    }\n    /**\n     * Set the sound's playback rate.\n     * @param {number} value - playback rate. Default is 1.\n     */\n  }, {\n    key: \"setPlaybackRate\",\n    value: function setPlaybackRate(value) {\n      this.playbackRate = value;\n      if (this.initialized) {\n        this.outputNode.playbackRate.value = value;\n      }\n    }\n  }, {\n    key: \"isStarting\",\n    get: function get() {\n      return this.isPlaying && this.startingUntil > this.audioEngine.currentTime;\n    }\n  }]);\n  return SoundPlayer;\n}(EventEmitter);\nmodule.exports = SoundPlayer;\n })