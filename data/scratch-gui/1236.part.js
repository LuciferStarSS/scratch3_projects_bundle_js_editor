/* 1236 */\n (function(module, exports, __webpack_require__) {\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nvar Effect = __webpack_require__(311);\n/**\n * A pitch change effect, which changes the playback rate of the sound in order\n * to change its pitch: reducing the playback rate lowers the pitch, increasing\n * the rate raises the pitch. The duration of the sound is also changed.\n *\n * Changing the value of the pitch effect by 10 causes a change in pitch by 1\n * semitone (i.e. a musical half-step, such as the difference between C and C#)\n * Changing the pitch effect by 120 changes the pitch by one octave (12\n * semitones)\n *\n * The value of this effect is not clamped (i.e. it is typically between -120\n * and 120, but can be set much higher or much lower, with weird and fun\n * results). We should consider what extreme values to use for clamping it.\n *\n * Note that this effect functions differently from the other audio effects. It\n * is not part of a chain of audio nodes. Instead, it provides a way to set the\n * playback on one SoundPlayer or a group of them.\n */\nvar PitchEffect = function (_Effect) {\n  _inherits(PitchEffect, _Effect);\n  var _super = _createSuper(PitchEffect);\n  /**\n   * @param {AudioEngine} audioEngine - audio engine this runs with\n   * @param {AudioPlayer} audioPlayer - audio player this affects\n   * @param {Effect} lastEffect - effect in the chain before this one\n   * @constructor\n   */\n  function PitchEffect(audioEngine, audioPlayer, lastEffect) {\n    var _this;\n    _classCallCheck(this, PitchEffect);\n    _this = _super.call(this, audioEngine, audioPlayer, lastEffect);\n    /**\n     * The playback rate ratio\n     * @type {Number}\n     */\n    _this.ratio = 1;\n    return _this;\n  }\n  /**\n   * Return the name of the effect.\n   * @type {string}\n   */\n  _createClass(PitchEffect, [{\n    key: \"getInputNode\",\n    /**\n     * Get the input node.\n     * @return {AudioNode} - audio node that is the input for this effect\n     */\n    value: function getInputNode() {\n      return this.target.getInputNode();\n    }\n    /**\n     * Initialize the Effect.\n     * Effects start out uninitialized. Then initialize when they are first set\n     * with some value.\n     * @throws {Error} throws when left unimplemented\n     */\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      this.initialized = true;\n    }\n    /**\n     * Set the effect value.\n     * @param {number} value - the new value to set the effect to\n     */\n  }, {\n    key: \"_set\",\n    value: function _set(value) {\n      this.value = value;\n      this.ratio = this.getRatio(this.value);\n      this.updatePlayers(this.audioPlayer.getSoundPlayers());\n    }\n    /**\n     * Update the effect for changes in the audioPlayer.\n     */\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.updatePlayers(this.audioPlayer.getSoundPlayers());\n    }\n    /**\n     * Compute the playback ratio for an effect value.\n     * The playback ratio is scaled so that a change of 10 in the effect value\n     * gives a change of 1 semitone in the ratio.\n     * @param {number} val - an effect value\n     * @returns {number} a playback ratio\n     */\n  }, {\n    key: \"getRatio\",\n    value: function getRatio(val) {\n      var interval = val / 10; // Convert the musical interval in semitones to a frequency ratio\n      return Math.pow(2, interval / 12);\n    }\n    /**\n     * Update a sound player's playback rate using the current ratio for the\n     * effect\n     * @param {object} player - a SoundPlayer object\n     */\n  }, {\n    key: \"updatePlayer\",\n    value: function updatePlayer(player) {\n      player.setPlaybackRate(this.ratio);\n    }\n    /**\n     * Update a sound player's playback rate using the current ratio for the\n     * effect\n     * @param {object} players - a dictionary of SoundPlayer objects to update,\n     *     indexed by md5\n     */\n  }, {\n    key: \"updatePlayers\",\n    value: function updatePlayers(players) {\n      if (!players) return;\n      for (var id in players) {\n        if (players.hasOwnProperty(id)) {\n          this.updatePlayer(players[id]);\n        }\n      }\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'pitch';\n    }\n    /**\n     * Should the effect be connected to the audio graph?\n     * @return {boolean} is the effect affecting the graph?\n     */\n  }, {\n    key: \"_isPatch\",\n    get: function get() {\n      return false;\n    }\n  }]);\n  return PitchEffect;\n}(Effect);\nmodule.exports = PitchEffect;\n })