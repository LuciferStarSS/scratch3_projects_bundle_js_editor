/* 227 */\n (function(module, exports, __webpack_require__) {\n\"use strict\";\n(function(Buffer) {\nmodule.exports = {\n    /**\n     * True if this is running in Nodejs, will be undefined in a browser.\n     * In a browser, browserify won't include this file and the whole module\n     * will be resolved an empty object.\n     */\n    isNode : typeof Buffer !== \"undefined\",\n    /**\n     * Create a new nodejs Buffer from an existing content.\n     * @param {Object} data the data to pass to the constructor.\n     * @param {String} encoding the encoding to use.\n     * @return {Buffer} a new Buffer.\n     */\n    newBufferFrom: function(data, encoding) {\n        // XXX We can't use `Buffer.from` which comes from `Uint8Array.from`\n        // in nodejs v4 (< v.4.5). It's not the expected implementation (and\n        // has a different signature).\n        // see https://github.com/nodejs/node/issues/8053\n        // A condition on nodejs' version won't solve the issue as we don't\n        // control the Buffer polyfills that may or may not be used.\n        return new Buffer(data, encoding);\n    },\n    /**\n     * Create a new nodejs Buffer with the specified size.\n     * @param {Integer} size the size of the buffer.\n     * @return {Buffer} a new Buffer.\n     */\n    allocBuffer: function (size) {\n        if (Buffer.alloc) {\n            return Buffer.alloc(size);\n        } else {\n            return new Buffer(size);\n        }\n    },\n    /**\n     * Find out if an object is a Buffer.\n     * @param {Object} b the object to test.\n     * @return {Boolean} true if the object is a Buffer, false otherwise.\n     */\n    isBuffer : function(b){\n        return Buffer.isBuffer(b);\n    },\n    isStream : function (obj) {\n        return obj &&\n            typeof obj.on === \"function\" &&\n            typeof obj.pause === \"function\" &&\n            typeof obj.resume === \"function\";\n    }\n};\n}.call(this, __webpack_require__(56).Buffer))\n })