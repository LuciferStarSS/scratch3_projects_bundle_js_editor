/* 180 */\n (function(module, exports) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nvar Color = function () {\n  function Color() {\n    _classCallCheck(this, Color);\n  }\n  _createClass(Color, null, [{\n    key: \"decimalToHex\",\n    /**\n     * Convert a Scratch decimal color to a hex string, #RRGGBB.\n     * @param {number} decimal RGB color as a decimal.\n     * @return {string} RGB color as #RRGGBB hex string.\n     */\n    value: function decimalToHex(decimal) {\n      if (decimal < 0) {\n        decimal += 0xFFFFFF + 1;\n      }\n      var hex = Number(decimal).toString(16);\n      hex = \"#\".concat('000000'.substr(0, 6 - hex.length)).concat(hex);\n      return hex;\n    }\n    /**\n     * Convert a Scratch decimal color to an RGB color object.\n     * @param {number} decimal RGB color as decimal.\n     * @return {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     */\n  }, {\n    key: \"decimalToRgb\",\n    value: function decimalToRgb(decimal) {\n      var a = decimal >> 24 & 0xFF;\n      var r = decimal >> 16 & 0xFF;\n      var g = decimal >> 8 & 0xFF;\n      var b = decimal & 0xFF;\n      return {\n        r: r,\n        g: g,\n        b: b,\n        a: a > 0 ? a : 255\n      };\n    }\n    /**\n     * Convert a hex color (e.g., F00, #03F, #0033FF) to an RGB color object.\n     * CC-BY-SA Tim Down:\n     * https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\n     * @param {!string} hex Hex representation of the color.\n     * @return {RGBObject} null on failure, or rgb: {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     */\n  }, {\n    key: \"hexToRgb\",\n    value: function hexToRgb(hex) {\n      var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n      hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n        return r + r + g + g + b + b;\n      });\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n      } : null;\n    }\n    /**\n     * Convert an RGB color object to a hex color.\n     * @param {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     * @return {!string} Hex representation of the color.\n     */\n  }, {\n    key: \"rgbToHex\",\n    value: function rgbToHex(rgb) {\n      return Color.decimalToHex(Color.rgbToDecimal(rgb));\n    }\n    /**\n     * Convert an RGB color object to a Scratch decimal color.\n     * @param {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     * @return {!number} Number representing the color.\n     */\n  }, {\n    key: \"rgbToDecimal\",\n    value: function rgbToDecimal(rgb) {\n      return (rgb.r << 16) + (rgb.g << 8) + rgb.b;\n    }\n    /**\n    * Convert a hex color (e.g., F00, #03F, #0033FF) to a decimal color number.\n    * @param {!string} hex Hex representation of the color.\n    * @return {!number} Number representing the color.\n    */\n  }, {\n    key: \"hexToDecimal\",\n    value: function hexToDecimal(hex) {\n      return Color.rgbToDecimal(Color.hexToRgb(hex));\n    }\n    /**\n     * Convert an HSV color to RGB format.\n     * @param {HSVObject} hsv - {h: hue [0,360), s: saturation [0,1], v: value [0,1]}\n     * @return {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     */\n  }, {\n    key: \"hsvToRgb\",\n    value: function hsvToRgb(hsv) {\n      var h = hsv.h % 360;\n      if (h < 0) h += 360;\n      var s = Math.max(0, Math.min(hsv.s, 1));\n      var v = Math.max(0, Math.min(hsv.v, 1));\n      var i = Math.floor(h / 60);\n      var f = h / 60 - i;\n      var p = v * (1 - s);\n      var q = v * (1 - s * f);\n      var t = v * (1 - s * (1 - f));\n      var r;\n      var g;\n      var b;\n      switch (i) {\n        default:\n        case 0:\n          r = v;\n          g = t;\n          b = p;\n          break;\n        case 1:\n          r = q;\n          g = v;\n          b = p;\n          break;\n        case 2:\n          r = p;\n          g = v;\n          b = t;\n          break;\n        case 3:\n          r = p;\n          g = q;\n          b = v;\n          break;\n        case 4:\n          r = t;\n          g = p;\n          b = v;\n          break;\n        case 5:\n          r = v;\n          g = p;\n          b = q;\n          break;\n      }\n      return {\n        r: Math.floor(r * 255),\n        g: Math.floor(g * 255),\n        b: Math.floor(b * 255)\n      };\n    }\n    /**\n     * Convert an RGB color to HSV format.\n     * @param {RGBObject} rgb - {r: red [0,255], g: green [0,255], b: blue [0,255]}.\n     * @return {HSVObject} hsv - {h: hue [0,360), s: saturation [0,1], v: value [0,1]}\n     */\n  }, {\n    key: \"rgbToHsv\",\n    value: function rgbToHsv(rgb) {\n      var r = rgb.r / 255;\n      var g = rgb.g / 255;\n      var b = rgb.b / 255;\n      var x = Math.min(Math.min(r, g), b);\n      var v = Math.max(Math.max(r, g), b); // For grays, hue will be arbitrarily reported as zero. Otherwise, calculate\n      var h = 0;\n      var s = 0;\n      if (x !== v) {\n        var f = r === x ? g - b : g === x ? b - r : r - g;\n        var i = r === x ? 3 : g === x ? 5 : 1;\n        h = (i - f / (v - x)) * 60 % 360;\n        s = (v - x) / v;\n      }\n      return {\n        h: h,\n        s: s,\n        v: v\n      };\n    }\n    /**\n     * Linear interpolation between rgb0 and rgb1.\n     * @param {RGBObject} rgb0 - the color corresponding to fraction1 <= 0.\n     * @param {RGBObject} rgb1 - the color corresponding to fraction1 >= 1.\n     * @param {number} fraction1 - the interpolation parameter. If this is 0.5, for example, mix the two colors equally.\n     * @return {RGBObject} the interpolated color.\n     */\n  }, {\n    key: \"mixRgb\",\n    value: function mixRgb(rgb0, rgb1, fraction1) {\n      if (fraction1 <= 0) return rgb0;\n      if (fraction1 >= 1) return rgb1;\n      var fraction0 = 1 - fraction1;\n      return {\n        r: fraction0 * rgb0.r + fraction1 * rgb1.r,\n        g: fraction0 * rgb0.g + fraction1 * rgb1.g,\n        b: fraction0 * rgb0.b + fraction1 * rgb1.b\n      };\n    }\n  }, {\n    key: \"RGB_BLACK\",\n    /**\n     * @typedef {object} RGBObject - An object representing a color in RGB format.\n     * @property {number} r - the red component, in the range [0, 255].\n     * @property {number} g - the green component, in the range [0, 255].\n     * @property {number} b - the blue component, in the range [0, 255].\n     */\n    /**\n     * @typedef {object} HSVObject - An object representing a color in HSV format.\n     * @property {number} h - hue, in the range [0-359).\n     * @property {number} s - saturation, in the range [0,1].\n     * @property {number} v - value, in the range [0,1].\n     */\n    /** @type {RGBObject} */\n    get: function get() {\n      return {\n        r: 0,\n        g: 0,\n        b: 0\n      };\n    }\n    /** @type {RGBObject} */\n  }, {\n    key: \"RGB_WHITE\",\n    get: function get() {\n      return {\n        r: 255,\n        g: 255,\n        b: 255\n      };\n    }\n  }]);\n  return Color;\n}();\nmodule.exports = Color;\n })