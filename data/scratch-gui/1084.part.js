/* 1084 */\n (function(module, exports) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nvar UserData = function () {\n  function UserData() {\n    _classCallCheck(this, UserData);\n    this._username = '';\n  }\n  /**\n   * Handler for updating the username\n   * @param {object} data Data posted to this ioDevice.\n   * @property {!string} username The new username.\n   */\n  _createClass(UserData, [{\n    key: \"postData\",\n    value: function postData(data) {\n      this._username = data.username;\n    }\n    /**\n     * Getter for username. Initially empty string, until set via postData.\n     * @returns {!string} The current username\n     */\n  }, {\n    key: \"getUsername\",\n    value: function getUsername() {\n      return this._username;\n    }\n  }]);\n  return UserData;\n}();\nmodule.exports = UserData;\n })