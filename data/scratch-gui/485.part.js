/* 485 */\n (function(module, exports, __webpack_require__) {\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nvar Effect = __webpack_require__(311);\n/**\n * Affect the volume of an effect chain.\n */\nvar VolumeEffect = function (_Effect) {\n  _inherits(VolumeEffect, _Effect);\n  var _super = _createSuper(VolumeEffect);\n  function VolumeEffect() {\n    _classCallCheck(this, VolumeEffect);\n    return _super.apply(this, arguments);\n  }\n  _createClass(VolumeEffect, [{\n    key: \"initialize\",\n    /**\n     * Initialize the Effect.\n     * Effects start out uninitialized. Then initialize when they are first set\n     * with some value.\n     * @throws {Error} throws when left unimplemented\n     */\n    value: function initialize() {\n      this.inputNode = this.audioEngine.audioContext.createGain();\n      this.outputNode = this.inputNode;\n      this.initialized = true;\n    }\n    /**\n     * Set the effects value.\n     * @private\n     * @param {number} value - new value to set effect to\n     */\n  }, {\n    key: \"_set\",\n    value: function _set(value) {\n      this.value = value;\n      var gain = this.outputNode.gain;\n      var _this$audioEngine = this.audioEngine,\n          currentTime = _this$audioEngine.currentTime,\n          DECAY_DURATION = _this$audioEngine.DECAY_DURATION;\n      gain.linearRampToValueAtTime(value / 100, currentTime + DECAY_DURATION);\n    }\n    /**\n     * Clean up and disconnect audio nodes.\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (!this.initialized) {\n        return;\n      }\n      this.outputNode.disconnect();\n      this.inputNode = null;\n      this.outputNode = null;\n      this.target = null;\n      this.initialized = false;\n    }\n  }, {\n    key: \"DEFAULT_VALUE\",\n    /**\n     * Default value to set the Effect to when constructed and when clear'ed.\n     * @const {number}\n     */\n    get: function get() {\n      return 100;\n    }\n    /**\n     * Return the name of the effect.\n     * @type {string}\n     */\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'volume';\n    }\n  }]);\n  return VolumeEffect;\n}(Effect);\nmodule.exports = VolumeEffect;\n })