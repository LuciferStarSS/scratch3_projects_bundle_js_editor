/* 1210 */\n (function(module, exports, __webpack_require__) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nvar log = __webpack_require__(308);\nvar BuiltinHelper = __webpack_require__(1211);\nvar WebHelper = __webpack_require__(1216);\nvar _Asset = __webpack_require__(309);\nvar _AssetType = __webpack_require__(483);\nvar _DataFormat = __webpack_require__(310);\nvar ScratchStorage = function () {\n  function ScratchStorage() {\n    _classCallCheck(this, ScratchStorage);\n    this.defaultAssetId = {};\n    this.builtinHelper = new BuiltinHelper(this);\n    this.webHelper = new WebHelper(this);\n    this.builtinHelper.registerDefaultAssets(this);\n    this._helpers = [{\n      helper: this.builtinHelper,\n      priority: 100\n    }, {\n      helper: this.webHelper,\n      priority: -100\n    }];\n  }\n  /**\n   * @return {Asset} - the `Asset` class constructor.\n   * @constructor\n   */\n  _createClass(ScratchStorage, [{\n    key: \"addHelper\",\n    /**\n     * Add a storage helper to this manager. Helpers with a higher priority number will be checked first when loading\n     * or storing assets. For comparison, the helper for built-in assets has `priority=100` and the default web helper\n     * has `priority=-100`. The relative order of helpers with equal priorities is undefined.\n     * @param {Helper} helper - the helper to be added.\n     * @param {number} [priority] - the priority for this new helper (default: 0).\n     */\n    value: function addHelper(helper) {\n      var priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this._helpers.push({\n        helper: helper,\n        priority: priority\n      });\n      this._helpers.sort(function (a, b) {\n        return b.priority - a.priority;\n      });\n    }\n    /**\n     * Synchronously fetch a cached asset from built-in storage. Assets are cached when they are loaded.\n     * @param {string} assetId - The id of the asset to fetch.\n     * @returns {?Asset} The asset, if it exists.\n     */\n  }, {\n    key: \"get\",\n    value: function get(assetId) {\n      return this.builtinHelper.get(assetId);\n    }\n    /**\n     * Deprecated API for caching built-in assets. Use createAsset.\n     * @param {AssetType} assetType - The type of the asset to cache.\n     * @param {DataFormat} dataFormat - The dataFormat of the data for the cached asset.\n     * @param {Buffer} data - The data for the cached asset.\n     * @param {string} id - The id for the cached asset.\n     * @returns {string} The calculated id of the cached asset, or the supplied id if the asset is mutable.\n     */\n  }, {\n    key: \"cache\",\n    value: function cache(assetType, dataFormat, data, id) {\n      log.warn('Deprecation: Storage.cache is deprecated. Use Storage.createAsset, and store assets externally.');\n      return this.builtinHelper._store(assetType, dataFormat, data, id);\n    }\n    /**\n     * Construct an Asset, and optionally generate an md5 hash of its data to create an id\n     * @param {AssetType} assetType - The type of the asset to cache.\n     * @param {DataFormat} dataFormat - The dataFormat of the data for the cached asset.\n     * @param {Buffer} data - The data for the cached asset.\n     * @param {string} [id] - The id for the cached asset.\n     * @param {bool} [generateId] - flag to set id to an md5 hash of data if `id` isn't supplied\n     * @returns {Asset} generated Asset with `id` attribute set if not supplied\n     */\n  }, {\n    key: \"createAsset\",\n    value: function createAsset(assetType, dataFormat, data, id, generateId) {\n      if (!dataFormat) throw new Error('Tried to create asset without a dataFormat');\n      return new _Asset(assetType, id, dataFormat, data, generateId);\n    }\n    /**\n     * Register a web-based source for assets. Sources will be checked in order of registration.\n     * @param {Array.<AssetType>} types - The types of asset provided by this source.\n     * @param {UrlFunction} getFunction - A function which computes a GET URL from an Asset.\n     * @param {UrlFunction} createFunction - A function which computes a POST URL for asset data.\n     * @param {UrlFunction} updateFunction - A function which computes a PUT URL for asset data.\n     */\n  }, {\n    key: \"addWebStore\",\n    value: function addWebStore(types, getFunction, createFunction, updateFunction) {\n      this.webHelper.addStore(types, getFunction, createFunction, updateFunction);\n    }\n    /**\n     * Register a web-based source for assets. Sources will be checked in order of registration.\n     * @deprecated Please use addWebStore\n     * @param {Array.<AssetType>} types - The types of asset provided by this source.\n     * @param {UrlFunction} urlFunction - A function which computes a GET URL from an Asset.\n     */\n  }, {\n    key: \"addWebSource\",\n    value: function addWebSource(types, urlFunction) {\n      log.warn('Deprecation: Storage.addWebSource has been replaced by addWebStore.');\n      this.addWebStore(types, urlFunction);\n    }\n    /**\n     * TODO: Should this be removed in favor of requesting an asset with `null` as the ID?\n     * @param {AssetType} type - Get the default ID for assets of this type.\n     * @return {?string} The ID of the default asset of the given type, if any.\n     */\n  }, {\n    key: \"getDefaultAssetId\",\n    value: function getDefaultAssetId(type) {\n      if (this.defaultAssetId.hasOwnProperty(type.name)) {\n        return this.defaultAssetId[type.name];\n      }\n    }\n    /**\n     * Set the default ID for a particular type of asset. This default asset will be used if a requested asset cannot\n     * be found and automatic fallback is enabled. Ideally this should be an asset that is available locally or even\n     * one built into this module.\n     * TODO: Should this be removed in favor of requesting an asset with `null` as the ID?\n     * @param {AssetType} type - The type of asset for which the default will be set.\n     * @param {string} id - The default ID to use for this type of asset.\n     */\n  }, {\n    key: \"setDefaultAssetId\",\n    value: function setDefaultAssetId(type, id) {\n      this.defaultAssetId[type.name] = id;\n    }\n    /**\n     * Fetch an asset by type & ID.\n     * @param {AssetType} assetType - The type of asset to fetch. This also determines which asset store to use.\n     * @param {string} assetId - The ID of the asset to fetch: a project ID, MD5, etc.\n     * @param {DataFormat} [dataFormat] - Optional: load this format instead of the AssetType's default.\n     * @return {Promise.<Asset>} A promise for the requested Asset.\n     *   If the promise is resolved with non-null, the value is the requested asset or a fallback.\n     *   If the promise is resolved with null, the desired asset could not be found with the current asset sources.\n     *   If the promise is rejected, there was an error on at least one asset source. HTTP 404 does not count as an\n     *   error here, but (for example) HTTP 403 does.\n     */\n  }, {\n    key: \"load\",\n    value: function load(assetType, assetId, dataFormat) {\n      /** @type {Helper[]} */\n      var helpers = this._helpers.map(function (x) {\n        return x.helper;\n      });\n      var errors = [];\n      dataFormat = dataFormat || assetType.runtimeFormat;\n      var helperIndex = 0;\n      var helper;\n      var tryNextHelper = function tryNextHelper(err) {\n        if (err) {\n          errors.push(err);\n        }\n        helper = helpers[helperIndex++];\n        if (helper) {\n          var loading = helper.load(assetType, assetId, dataFormat);\n          if (loading === null) {\n            return tryNextHelper();\n          } // Note that other attempts may have logged errors; if this succeeds they will be suppressed.\n          return loading // TODO: maybe some types of error should prevent trying the next helper?\n          .catch(tryNextHelper);\n        } else if (errors.length > 0) {\n          // At least one thing went wrong and also we couldn't find the\n          // asset.\n          return Promise.reject(errors);\n        } // Nothing went wrong but we couldn't find the asset.\n        return Promise.resolve(null);\n      };\n      return tryNextHelper();\n    }\n    /**\n     * Store an asset by type & ID.\n     * @param {AssetType} assetType - The type of asset to fetch. This also determines which asset store to use.\n     * @param {?DataFormat} [dataFormat] - Optional: load this format instead of the AssetType's default.\n     * @param {Buffer} data - Data to store for the asset\n     * @param {?string} [assetId] - The ID of the asset to fetch: a project ID, MD5, etc.\n     * @return {Promise.<object>} A promise for asset metadata\n     */\n  }, {\n    key: \"store\",\n    value: function store(assetType, dataFormat, data, assetId) {\n      var _this = this;\n      dataFormat = dataFormat || assetType.runtimeFormat;\n      return new Promise(function (resolve, reject) {\n        return _this.webHelper.store(assetType, dataFormat, data, assetId).then(function (body) {\n          _this.builtinHelper._store(assetType, dataFormat, data, body.id);\n          return resolve(body);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"Asset\",\n    get: function get() {\n      return _Asset;\n    }\n    /**\n     * @return {AssetType} - the list of supported asset types.\n     * @constructor\n     */\n  }, {\n    key: \"AssetType\",\n    get: function get() {\n      return _AssetType;\n    }\n    /**\n     * @return {DataFormat} - the list of supported data formats.\n     * @constructor\n     */\n  }, {\n    key: \"DataFormat\",\n    get: function get() {\n      return _DataFormat;\n    }\n    /**\n     * @deprecated Please use the `Asset` member of a storage instance instead.\n     * @return {Asset} - the `Asset` class constructor.\n     * @constructor\n     */\n  }], [{\n    key: \"Asset\",\n    get: function get() {\n      return _Asset;\n    }\n    /**\n     * @deprecated Please use the `AssetType` member of a storage instance instead.\n     * @return {AssetType} - the list of supported asset types.\n     * @constructor\n     */\n  }, {\n    key: \"AssetType\",\n    get: function get() {\n      return _AssetType;\n    }\n  }]);\n  return ScratchStorage;\n}();\nmodule.exports = ScratchStorage;\n })