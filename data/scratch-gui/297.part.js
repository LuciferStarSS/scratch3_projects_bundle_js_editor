/* 297 */\n (function(module, exports, __webpack_require__) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n/**\n * @fileoverview\n * Object representing a Scratch Comment (block or workspace).\n */\nvar uid = __webpack_require__(94);\nvar xmlEscape = __webpack_require__(220);\nvar Comment = function () {\n  /**\n   * @param {string} id Id of the comment.\n   * @param {string} text Text content of the comment.\n   * @param {number} x X position of the comment on the workspace.\n   * @param {number} y Y position of the comment on the workspace.\n   * @param {number} width The width of the comment when it is full size.\n   * @param {number} height The height of the comment when it is full size.\n   * @param {boolean} minimized Whether the comment is minimized.\n   * @constructor\n   */\n  function Comment(id, text, x, y, width, height, minimized) {\n    _classCallCheck(this, Comment);\n    this.id = id || uid();\n    this.text = text;\n    this.x = x;\n    this.y = y;\n    this.width = Math.max(Number(width), Comment.MIN_WIDTH);\n    this.height = Math.max(Number(height), Comment.MIN_HEIGHT);\n    this.minimized = minimized || false;\n    this.blockId = null;\n  }\n  _createClass(Comment, [{\n    key: \"toXML\",\n    value: function toXML() {\n      return \"<comment id=\\\"\".concat(this.id, \"\\\" x=\\\"\").concat(this.x, \"\\\" y=\\\"\").concat(this.y, \"\\\" w=\\\"\").concat(this.width, \"\\\" h=\\\"\").concat(this.height, \"\\\" pinned=\\\"\").concat(this.blockId !== null, \"\\\" minimized=\\\"\").concat(this.minimized, \"\\\">\").concat(xmlEscape(this.text), \"</comment>\");\n    } // TODO choose min and defaults for width and height\n  }], [{\n    key: \"MIN_WIDTH\",\n    get: function get() {\n      return 20;\n    }\n  }, {\n    key: \"MIN_HEIGHT\",\n    get: function get() {\n      return 20;\n    }\n  }, {\n    key: \"DEFAULT_WIDTH\",\n    get: function get() {\n      return 100;\n    }\n  }, {\n    key: \"DEFAULT_HEIGHT\",\n    get: function get() {\n      return 100;\n    }\n  }]);\n  return Comment;\n}();\nmodule.exports = Comment;\n })