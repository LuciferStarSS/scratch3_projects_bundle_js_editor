/* 1221 */\n (function(module, exports) {\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n/* eslint-env browser */\n/**\n * Get and send assets with the fetch standard web api.\n */\nvar FetchTool = function () {\n  function FetchTool() {\n    _classCallCheck(this, FetchTool);\n  }\n  _createClass(FetchTool, [{\n    key: \"get\",\n    /**\n     * Request data from a server with fetch.\n     * @param {{url:string}} reqConfig - Request configuration for data to get.\n     * @param {{method:string}} options - Additional options to configure fetch.\n     * @returns {Promise.<Uint8Array>} Resolve to Buffer of data from server.\n     */\n    value: function get(_ref) {\n      var url = _ref.url,\n          options = _objectWithoutProperties(_ref, [\"url\"]);\n      return fetch(url, Object.assign({\n        method: 'GET'\n      }, options)).then(function (result) {\n        return result.arrayBuffer();\n      }).then(function (body) {\n        return new Uint8Array(body);\n      });\n    }\n    /**\n     * Is sending supported? false if the environment does not support sending\n     * with fetch.\n     * @returns {boolean} Is sending supported?\n     */\n  }, {\n    key: \"send\",\n    /**\n     * Send data to a server with fetch.\n     * @param {Request} reqConfig - Request configuration for data to send.\n     * @returns {Promise.<string>} Server returned metadata.\n     */\n    value: function send(_ref2) {\n      var url = _ref2.url,\n          _ref2$withCredentials = _ref2.withCredentials,\n          withCredentials = _ref2$withCredentials === void 0 ? false : _ref2$withCredentials,\n          options = _objectWithoutProperties(_ref2, [\"url\", \"withCredentials\"]);\n      return fetch(url, Object.assign({\n        credentials: withCredentials ? 'include' : 'omit'\n      }, options)).then(function (response) {\n        if (response.ok) return response.text();\n        return Promise.reject(response.status);\n      });\n    }\n  }, {\n    key: \"isGetSupported\",\n    /**\n     * Is get supported? false if the environment does not support fetch.\n     * @returns {boolean} Is get supported?\n     */\n    get: function get() {\n      return typeof fetch !== 'undefined';\n    }\n  }, {\n    key: \"isSendSupported\",\n    get: function get() {\n      return typeof fetch !== 'undefined';\n    }\n  }]);\n  return FetchTool;\n}();\nmodule.exports = FetchTool;\n })