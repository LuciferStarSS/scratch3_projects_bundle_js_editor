/* 15 */\n (function(module, __webpack_exports__, __webpack_require__) {\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return reducer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"y\", function() { return initialState; });\n/* unused harmony export LoadingState */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return LoadingStates; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return autoUpdateProject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return createProject; });\n/* unused harmony export defaultProjectId */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return doneCreatingProject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return doneUpdatingProject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return getIsAnyCreatingNewState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return getIsCreatingCopy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return getIsCreatingNew; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return getIsError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return getIsFetchingWithId; });\n/* unused harmony export getIsFetchingWithoutId */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return getIsLoading; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return getIsLoadingWithId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return getIsLoadingUpload; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return getIsManualUpdating; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return getIsRemixing; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return getIsShowingProject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"r\", function() { return getIsShowingWithId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"s\", function() { return getIsShowingWithoutId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"t\", function() { return getIsUpdating; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"u\", function() { return manualUpdateProject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"v\", function() { return onFetchedProjectData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"w\", function() { return onLoadedProject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"x\", function() { return projectError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"z\", function() { return remixProject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"A\", function() { return requestNewProject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"B\", function() { return requestProjectUpload; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"C\", function() { return saveProjectAsCopy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"D\", function() { return setProjectId; });\n var keymirror__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(40);\n var keymirror__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(keymirror__WEBPACK_IMPORTED_MODULE_0__);\nvar DONE_CREATING_COPY = 'scratch-gui/project-state/DONE_CREATING_COPY';\nvar DONE_CREATING_NEW = 'scratch-gui/project-state/DONE_CREATING_NEW';\nvar DONE_FETCHING_DEFAULT = 'scratch-gui/project-state/DONE_FETCHING_DEFAULT';\nvar DONE_FETCHING_WITH_ID = 'scratch-gui/project-state/DONE_FETCHING_WITH_ID';\nvar DONE_LOADING_VM_TO_SAVE = 'scratch-gui/project-state/DONE_LOADING_VM_TO_SAVE';\nvar DONE_LOADING_VM_WITH_ID = 'scratch-gui/project-state/DONE_LOADING_VM_WITH_ID';\nvar DONE_LOADING_VM_WITHOUT_ID = 'scratch-gui/project-state/DONE_LOADING_VM_WITHOUT_ID';\nvar DONE_REMIXING = 'scratch-gui/project-state/DONE_REMIXING';\nvar DONE_UPDATING = 'scratch-gui/project-state/DONE_UPDATING';\nvar DONE_UPDATING_BEFORE_COPY = 'scratch-gui/project-state/DONE_UPDATING_BEFORE_COPY';\nvar DONE_UPDATING_BEFORE_NEW = 'scratch-gui/project-state/DONE_UPDATING_BEFORE_NEW';\nvar RETURN_TO_SHOWING = 'scratch-gui/project-state/RETURN_TO_SHOWING';\nvar SET_PROJECT_ID = 'scratch-gui/project-state/SET_PROJECT_ID';\nvar START_AUTO_UPDATING = 'scratch-gui/project-state/START_AUTO_UPDATING';\nvar START_CREATING_NEW = 'scratch-gui/project-state/START_CREATING_NEW';\nvar START_ERROR = 'scratch-gui/project-state/START_ERROR';\nvar START_FETCHING_NEW = 'scratch-gui/project-state/START_FETCHING_NEW';\nvar START_LOADING_VM_FILE_UPLOAD = 'scratch-gui/project-state/START_LOADING_VM_FILE_UPLOAD';\nvar START_MANUAL_UPDATING = 'scratch-gui/project-state/START_MANUAL_UPDATING';\nvar START_REMIXING = 'scratch-gui/project-state/START_REMIXING';\nvar START_UPDATING_BEFORE_CREATING_COPY = 'scratch-gui/project-state/START_UPDATING_BEFORE_CREATING_COPY';\nvar START_UPDATING_BEFORE_CREATING_NEW = 'scratch-gui/project-state/START_UPDATING_BEFORE_CREATING_NEW';\nvar defaultProjectId = '0'; // hardcoded id of default project\nvar LoadingState = keymirror__WEBPACK_IMPORTED_MODULE_0___default()({\n  NOT_LOADED: null,\n  ERROR: null,\n  AUTO_UPDATING: null,\n  CREATING_COPY: null,\n  CREATING_NEW: null,\n  FETCHING_NEW_DEFAULT: null,\n  FETCHING_WITH_ID: null,\n  LOADING_VM_FILE_UPLOAD: null,\n  LOADING_VM_NEW_DEFAULT: null,\n  LOADING_VM_WITH_ID: null,\n  MANUAL_UPDATING: null,\n  REMIXING: null,\n  SHOWING_WITH_ID: null,\n  SHOWING_WITHOUT_ID: null,\n  UPDATING_BEFORE_COPY: null,\n  UPDATING_BEFORE_NEW: null\n});\nvar LoadingStates = Object.keys(LoadingState);\nvar getIsFetchingWithoutId = function getIsFetchingWithoutId(loadingState) {\n  return (// LOADING_VM_FILE_UPLOAD is an honorary fetch, since there is no fetching step for file uploads\n    loadingState === LoadingState.LOADING_VM_FILE_UPLOAD || loadingState === LoadingState.FETCHING_NEW_DEFAULT\n  );\n};\nvar getIsFetchingWithId = function getIsFetchingWithId(loadingState) {\n  return loadingState === LoadingState.FETCHING_WITH_ID || loadingState === LoadingState.FETCHING_NEW_DEFAULT;\n};\nvar getIsLoadingWithId = function getIsLoadingWithId(loadingState) {\n  return loadingState === LoadingState.LOADING_VM_WITH_ID || loadingState === LoadingState.LOADING_VM_NEW_DEFAULT;\n};\nvar getIsLoading = function getIsLoading(loadingState) {\n  return loadingState === LoadingState.LOADING_VM_FILE_UPLOAD || loadingState === LoadingState.LOADING_VM_WITH_ID || loadingState === LoadingState.LOADING_VM_NEW_DEFAULT;\n};\nvar getIsLoadingUpload = function getIsLoadingUpload(loadingState) {\n  return loadingState === LoadingState.LOADING_VM_FILE_UPLOAD;\n};\nvar getIsCreatingNew = function getIsCreatingNew(loadingState) {\n  return loadingState === LoadingState.CREATING_NEW;\n};\nvar getIsAnyCreatingNewState = function getIsAnyCreatingNewState(loadingState) {\n  return loadingState === LoadingState.FETCHING_NEW_DEFAULT || loadingState === LoadingState.LOADING_VM_NEW_DEFAULT || loadingState === LoadingState.CREATING_NEW;\n};\nvar getIsCreatingCopy = function getIsCreatingCopy(loadingState) {\n  return loadingState === LoadingState.CREATING_COPY;\n};\nvar getIsManualUpdating = function getIsManualUpdating(loadingState) {\n  return loadingState === LoadingState.MANUAL_UPDATING;\n};\nvar getIsRemixing = function getIsRemixing(loadingState) {\n  return loadingState === LoadingState.REMIXING;\n};\nvar getIsUpdating = function getIsUpdating(loadingState) {\n  return loadingState === LoadingState.AUTO_UPDATING || loadingState === LoadingState.MANUAL_UPDATING || loadingState === LoadingState.UPDATING_BEFORE_COPY || loadingState === LoadingState.UPDATING_BEFORE_NEW;\n};\nvar getIsShowingProject = function getIsShowingProject(loadingState) {\n  return loadingState === LoadingState.SHOWING_WITH_ID || loadingState === LoadingState.SHOWING_WITHOUT_ID;\n};\nvar getIsShowingWithId = function getIsShowingWithId(loadingState) {\n  return loadingState === LoadingState.SHOWING_WITH_ID;\n};\nvar getIsShowingWithoutId = function getIsShowingWithoutId(loadingState) {\n  return loadingState === LoadingState.SHOWING_WITHOUT_ID;\n};\nvar getIsError = function getIsError(loadingState) {\n  return loadingState === LoadingState.ERROR;\n};\nvar initialState = {\n  error: null,\n  projectData: null,\n  projectId: null,\n  loadingState: LoadingState.NOT_LOADED\n};\nvar reducer = function reducer(state, action) {\n  if (typeof state === 'undefined') state = initialState;\n  switch (action.type) {\n    case DONE_CREATING_NEW:\n      // We need to set project id since we just created new project on the server.\n      // No need to load, we should have data already in vm.\n      if (state.loadingState === LoadingState.CREATING_NEW) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.SHOWING_WITH_ID,\n          projectId: action.projectId\n        });\n      }\n      return state;\n    case DONE_FETCHING_WITH_ID:\n      if (state.loadingState === LoadingState.FETCHING_WITH_ID) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.LOADING_VM_WITH_ID,\n          projectData: action.projectData\n        });\n      }\n      return state;\n    case DONE_FETCHING_DEFAULT:\n      if (state.loadingState === LoadingState.FETCHING_NEW_DEFAULT) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.LOADING_VM_NEW_DEFAULT,\n          projectData: action.projectData\n        });\n      }\n      return state;\n    case DONE_LOADING_VM_WITHOUT_ID:\n      if (state.loadingState === LoadingState.LOADING_VM_FILE_UPLOAD || state.loadingState === LoadingState.LOADING_VM_NEW_DEFAULT) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.SHOWING_WITHOUT_ID,\n          projectId: defaultProjectId\n        });\n      }\n      return state;\n    case DONE_LOADING_VM_WITH_ID:\n      if (state.loadingState === LoadingState.LOADING_VM_WITH_ID) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.SHOWING_WITH_ID\n        });\n      }\n      return state;\n    case DONE_LOADING_VM_TO_SAVE:\n      if (state.loadingState === LoadingState.LOADING_VM_FILE_UPLOAD) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.AUTO_UPDATING\n        });\n      }\n      return state;\n    case DONE_REMIXING:\n      // We need to set project id since we just created new project on the server.\n      // No need to load, we should have data already in vm.\n      if (state.loadingState === LoadingState.REMIXING) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.SHOWING_WITH_ID,\n          projectId: action.projectId\n        });\n      }\n      return state;\n    case DONE_CREATING_COPY:\n      // We need to set project id since we just created new project on the server.\n      // No need to load, we should have data already in vm.\n      if (state.loadingState === LoadingState.CREATING_COPY) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.SHOWING_WITH_ID,\n          projectId: action.projectId\n        });\n      }\n      return state;\n    case DONE_UPDATING:\n      if (state.loadingState === LoadingState.AUTO_UPDATING || state.loadingState === LoadingState.MANUAL_UPDATING) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.SHOWING_WITH_ID\n        });\n      }\n      return state;\n    case DONE_UPDATING_BEFORE_COPY:\n      if (state.loadingState === LoadingState.UPDATING_BEFORE_COPY) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.CREATING_COPY\n        });\n      }\n      return state;\n    case DONE_UPDATING_BEFORE_NEW:\n      if (state.loadingState === LoadingState.UPDATING_BEFORE_NEW) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.FETCHING_NEW_DEFAULT,\n          projectId: defaultProjectId\n        });\n      }\n      return state;\n    case RETURN_TO_SHOWING:\n      if (state.projectId === null || state.projectId === defaultProjectId) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.SHOWING_WITHOUT_ID,\n          projectId: defaultProjectId\n        });\n      }\n      return Object.assign({}, state, {\n        loadingState: LoadingState.SHOWING_WITH_ID\n      });\n    case SET_PROJECT_ID:\n      // if the projectId hasn't actually changed do nothing\n      if (state.projectId === action.projectId) {\n        return state;\n      } // if we were already showing a project, and a different projectId is set, only fetch that project if\n      // projectId has changed. This prevents re-fetching projects unnecessarily.\n      if (state.loadingState === LoadingState.SHOWING_WITH_ID) {\n        // if setting the default project id, specifically fetch that project\n        if (action.projectId === defaultProjectId || action.projectId === null) {\n          return Object.assign({}, state, {\n            loadingState: LoadingState.FETCHING_NEW_DEFAULT,\n            projectId: defaultProjectId\n          });\n        }\n        return Object.assign({}, state, {\n          loadingState: LoadingState.FETCHING_WITH_ID,\n          projectId: action.projectId\n        });\n      } else if (state.loadingState === LoadingState.SHOWING_WITHOUT_ID) {\n        // if we were showing a project already, don't transition to default project.\n        if (action.projectId !== defaultProjectId && action.projectId !== null) {\n          return Object.assign({}, state, {\n            loadingState: LoadingState.FETCHING_WITH_ID,\n            projectId: action.projectId\n          });\n        }\n      } else {\n        // allow any other states to transition to fetching project\n        // if setting the default project id, specifically fetch that project\n        if (action.projectId === defaultProjectId || action.projectId === null) {\n          return Object.assign({}, state, {\n            loadingState: LoadingState.FETCHING_NEW_DEFAULT,\n            projectId: defaultProjectId\n          });\n        }\n        return Object.assign({}, state, {\n          loadingState: LoadingState.FETCHING_WITH_ID,\n          projectId: action.projectId\n        });\n      }\n      return state;\n    case START_AUTO_UPDATING:\n      if (state.loadingState === LoadingState.SHOWING_WITH_ID) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.AUTO_UPDATING\n        });\n      }\n      return state;\n    case START_CREATING_NEW:\n      if (state.loadingState === LoadingState.SHOWING_WITHOUT_ID) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.CREATING_NEW\n        });\n      }\n      return state;\n    case START_FETCHING_NEW:\n      if ([LoadingState.SHOWING_WITH_ID, LoadingState.SHOWING_WITHOUT_ID].includes(state.loadingState)) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.FETCHING_NEW_DEFAULT,\n          projectId: defaultProjectId\n        });\n      }\n      return state;\n    case START_LOADING_VM_FILE_UPLOAD:\n      if ([LoadingState.NOT_LOADED, LoadingState.SHOWING_WITH_ID, LoadingState.SHOWING_WITHOUT_ID].includes(state.loadingState)) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.LOADING_VM_FILE_UPLOAD\n        });\n      }\n      return state;\n    case START_MANUAL_UPDATING:\n      if (state.loadingState === LoadingState.SHOWING_WITH_ID) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.MANUAL_UPDATING\n        });\n      }\n      return state;\n    case START_REMIXING:\n      if (state.loadingState === LoadingState.SHOWING_WITH_ID) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.REMIXING\n        });\n      }\n      return state;\n    case START_UPDATING_BEFORE_CREATING_COPY:\n      if (state.loadingState === LoadingState.SHOWING_WITH_ID) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.UPDATING_BEFORE_COPY\n        });\n      }\n      return state;\n    case START_UPDATING_BEFORE_CREATING_NEW:\n      if (state.loadingState === LoadingState.SHOWING_WITH_ID) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.UPDATING_BEFORE_NEW\n        });\n      }\n      return state;\n    case START_ERROR:\n      // fatal errors: there's no correct editor state for us to show\n      if ([LoadingState.FETCHING_NEW_DEFAULT, LoadingState.FETCHING_WITH_ID, LoadingState.LOADING_VM_NEW_DEFAULT, LoadingState.LOADING_VM_WITH_ID].includes(state.loadingState)) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.ERROR,\n          error: action.error\n        });\n      } // non-fatal errors: can keep showing editor state fine\n      if ([LoadingState.AUTO_UPDATING, LoadingState.CREATING_COPY, LoadingState.MANUAL_UPDATING, LoadingState.REMIXING, LoadingState.UPDATING_BEFORE_COPY, LoadingState.UPDATING_BEFORE_NEW].includes(state.loadingState)) {\n        return Object.assign({}, state, {\n          loadingState: LoadingState.SHOWING_WITH_ID,\n          error: action.error\n        });\n      } // non-fatal error; state to show depends on whether project we're showing\n      // has an id or not\n      if (state.loadingState === LoadingState.CREATING_NEW) {\n        if (state.projectId === defaultProjectId || state.projectId === null) {\n          return Object.assign({}, state, {\n            loadingState: LoadingState.SHOWING_WITHOUT_ID,\n            error: action.error\n          });\n        }\n        return Object.assign({}, state, {\n          loadingState: LoadingState.SHOWING_WITH_ID,\n          error: action.error\n        });\n      }\n      return state;\n    default:\n      return state;\n  }\n};\nvar createProject = function createProject() {\n  return {\n    type: START_CREATING_NEW\n  };\n};\nvar doneCreatingProject = function doneCreatingProject(id, loadingState) {\n  switch (loadingState) {\n    case LoadingState.CREATING_NEW:\n      return {\n        type: DONE_CREATING_NEW,\n        projectId: id\n      };\n    case LoadingState.CREATING_COPY:\n      return {\n        type: DONE_CREATING_COPY,\n        projectId: id\n      };\n    case LoadingState.REMIXING:\n      return {\n        type: DONE_REMIXING,\n        projectId: id\n      };\n    default:\n      break;\n  }\n};\nvar onFetchedProjectData = function onFetchedProjectData(projectData, loadingState) {\n  switch (loadingState) {\n    case LoadingState.FETCHING_WITH_ID:\n      return {\n        type: DONE_FETCHING_WITH_ID,\n        projectData: projectData\n      };\n    case LoadingState.FETCHING_NEW_DEFAULT:\n      return {\n        type: DONE_FETCHING_DEFAULT,\n        projectData: projectData\n      };\n    default:\n      break;\n  }\n};\nvar onLoadedProject = function onLoadedProject(loadingState, canSave, success) {\n  switch (loadingState) {\n    case LoadingState.LOADING_VM_WITH_ID:\n      if (success) {\n        return {\n          type: DONE_LOADING_VM_WITH_ID\n        };\n      } // failed to load project; just keep showing current project\n      return {\n        type: RETURN_TO_SHOWING\n      };\n    case LoadingState.LOADING_VM_FILE_UPLOAD:\n      if (success) {\n        if (canSave) {\n          return {\n            type: DONE_LOADING_VM_TO_SAVE\n          };\n        }\n        return {\n          type: DONE_LOADING_VM_WITHOUT_ID\n        };\n      } // failed to load project; just keep showing current project\n      return {\n        type: RETURN_TO_SHOWING\n      };\n    case LoadingState.LOADING_VM_NEW_DEFAULT:\n      if (success) {\n        return {\n          type: DONE_LOADING_VM_WITHOUT_ID\n        };\n      } // failed to load default project; show error\n      return {\n        type: START_ERROR\n      };\n    default:\n      return;\n  }\n};\nvar doneUpdatingProject = function doneUpdatingProject(loadingState) {\n  switch (loadingState) {\n    case LoadingState.AUTO_UPDATING:\n    case LoadingState.MANUAL_UPDATING:\n      return {\n        type: DONE_UPDATING\n      };\n    case LoadingState.UPDATING_BEFORE_COPY:\n      return {\n        type: DONE_UPDATING_BEFORE_COPY\n      };\n    case LoadingState.UPDATING_BEFORE_NEW:\n      return {\n        type: DONE_UPDATING_BEFORE_NEW\n      };\n    default:\n      break;\n  }\n};\nvar projectError = function projectError(error) {\n  return {\n    type: START_ERROR,\n    error: error\n  };\n};\nvar setProjectId = function setProjectId(id) {\n  return {\n    type: SET_PROJECT_ID,\n    projectId: id\n  };\n};\nvar requestNewProject = function requestNewProject(needSave) {\n  if (needSave) return {\n    type: START_UPDATING_BEFORE_CREATING_NEW\n  };\n  return {\n    type: START_FETCHING_NEW\n  };\n};\nvar requestProjectUpload = function requestProjectUpload(loadingState) {\n  switch (loadingState) {\n    case LoadingState.NOT_LOADED:\n    case LoadingState.SHOWING_WITH_ID:\n    case LoadingState.SHOWING_WITHOUT_ID:\n      return {\n        type: START_LOADING_VM_FILE_UPLOAD\n      };\n    default:\n      break;\n  }\n};\nvar autoUpdateProject = function autoUpdateProject() {\n  return {\n    type: START_AUTO_UPDATING\n  };\n};\nvar manualUpdateProject = function manualUpdateProject() {\n  return {\n    type: START_MANUAL_UPDATING\n  };\n};\nvar saveProjectAsCopy = function saveProjectAsCopy() {\n  return {\n    type: START_UPDATING_BEFORE_CREATING_COPY\n  };\n};\nvar remixProject = function remixProject() {\n  return {\n    type: START_REMIXING\n  };\n};\n })