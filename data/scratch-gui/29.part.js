/* 29 */\n (function(module, __webpack_exports__, __webpack_require__) {\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return reducer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return initialState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return closeAlert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return closeAlertWithId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return filterInlineAlerts; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return filterPopupAlerts; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return showAlertWithTimeout; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return showExtensionAlert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return showStandardAlert; });\n var _lib_alerts_index_jsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(57);\n var _lib_libraries_extensions_index_jsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(121);\nvar SHOW_ALERT = 'scratch-gui/alerts/SHOW_ALERT';\nvar SHOW_EXTENSION_ALERT = 'scratch-gui/alerts/SHOW_EXTENSION_ALERT';\nvar CLOSE_ALERT = 'scratch-gui/alerts/CLOSE_ALERT';\nvar CLOSE_ALERTS_WITH_ID = 'scratch-gui/alerts/CLOSE_ALERTS_WITH_ID';\nvar CLOSE_ALERT_WITH_ID = 'scratch-gui/alerts/CLOSE_ALERT_WITH_ID';\n/**\n * Initial state of alerts reducer\n *\n * {bool} visible - whether the alerts are visible\n * {array} alertsList - list of alerts, each with properties:\n *  * alertType (required): one of AlertTypes\n *  * closeButton (optional): bool indicating that we should show close button\n *  * content (optional): react element (a <FormattedMessage />)\n *  * extentionId (optional): id string that identifies the extension\n *  * iconURL (optional): string\n *  * level (required): string, one of AlertLevels\n *  * message (optional): string\n *  * showReconnect (optional): bool\n */\nvar initialState = {\n  visible: true,\n  alertsList: []\n};\nvar filterPopupAlerts = function filterPopupAlerts(alertsList) {\n  return alertsList.filter(function (curAlert) {\n    return curAlert.alertType === _lib_alerts_index_jsx__WEBPACK_IMPORTED_MODULE_0__[/* AlertTypes */ \"b\"].STANDARD || curAlert.alertType === _lib_alerts_index_jsx__WEBPACK_IMPORTED_MODULE_0__[/* AlertTypes */ \"b\"].EXTENSION;\n  });\n};\nvar filterInlineAlerts = function filterInlineAlerts(alertsList) {\n  return alertsList.filter(function (curAlert) {\n    return curAlert.alertType === _lib_alerts_index_jsx__WEBPACK_IMPORTED_MODULE_0__[/* AlertTypes */ \"b\"].INLINE;\n  });\n};\nvar reducer = function reducer(state, action) {\n  if (typeof state === 'undefined') state = initialState;\n  switch (action.type) {\n    case SHOW_ALERT:\n      {\n        // intended to show standard and inline alerts, but not extensions\n        var alertId = action.alertId;\n        if (alertId) {\n          var newAlert = {\n            alertId: alertId,\n            level: _lib_alerts_index_jsx__WEBPACK_IMPORTED_MODULE_0__[/* AlertLevels */ \"a\"].WARN // default level\n          };\n          var alertData = _lib_alerts_index_jsx__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"c\"].find(function (thisAlertData) {\n            return thisAlertData.alertId === alertId;\n          });\n          if (alertData) {\n            var newList = state.alertsList.filter(function (curAlert) {\n              return !alertData.clearList || alertData.clearList.indexOf(curAlert.alertId) === -1;\n            });\n            if (action.data && action.data.message) {\n              newAlert.message = action.data.message;\n            }\n            newAlert.alertType = alertData.alertType || _lib_alerts_index_jsx__WEBPACK_IMPORTED_MODULE_0__[/* AlertTypes */ \"b\"].STANDARD;\n            newAlert.closeButton = alertData.closeButton;\n            newAlert.content = alertData.content;\n            newAlert.iconURL = alertData.iconURL;\n            newAlert.iconSpinner = alertData.iconSpinner;\n            newAlert.level = alertData.level;\n            newAlert.showDownload = alertData.showDownload;\n            newAlert.showSaveNow = alertData.showSaveNow;\n            newList.push(newAlert);\n            return Object.assign({}, state, {\n              alertsList: newList\n            });\n          }\n        }\n        return state; // if alert not found, show nothing\n      }\n    case SHOW_EXTENSION_ALERT:\n      {\n        var extensionId = action.data.extensionId;\n        if (extensionId) {\n          var extension = _lib_libraries_extensions_index_jsx__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].find(function (ext) {\n            return ext.extensionId === extensionId;\n          });\n          if (extension) {\n            var _newList = state.alertsList.slice();\n            var _newAlert = {\n              alertType: _lib_alerts_index_jsx__WEBPACK_IMPORTED_MODULE_0__[/* AlertTypes */ \"b\"].EXTENSION,\n              closeButton: true,\n              extensionId: extensionId,\n              extensionName: extension.name,\n              iconURL: extension.connectionSmallIconURL,\n              level: _lib_alerts_index_jsx__WEBPACK_IMPORTED_MODULE_0__[/* AlertLevels */ \"a\"].WARN,\n              showReconnect: true\n            };\n            _newList.push(_newAlert);\n            return Object.assign({}, state, {\n              alertsList: _newList\n            });\n          }\n        }\n        return state; // if alert not found, show nothing\n      }\n    case CLOSE_ALERT_WITH_ID:\n    case CLOSE_ALERT:\n      {\n        if (action.alertId) {\n          action.index = state.alertsList.findIndex(function (a) {\n            return a.alertId === action.alertId;\n          });\n          if (action.index === -1) return state;\n        }\n        var _newList2 = state.alertsList.slice();\n        _newList2.splice(action.index, 1);\n        return Object.assign({}, state, {\n          alertsList: _newList2\n        });\n      }\n    case CLOSE_ALERTS_WITH_ID:\n      {\n        return Object.assign({}, state, {\n          alertsList: state.alertsList.filter(function (curAlert) {\n            return curAlert.alertId !== action.alertId;\n          })\n        });\n      }\n    default:\n      return state;\n  }\n};\n/**\n * Action creator to close an alert with the given index.\n *\n * @param {object} index - the index of the alert to close.\n * @return {object} - an object to be passed to the reducer.\n */\nvar closeAlert = function closeAlert(index) {\n  return {\n    type: CLOSE_ALERT,\n    index: index\n  };\n};\n/**\n * Action creator to close all alerts with a given ID.\n *\n * @param {string} alertId - id string of the alert to close\n * @return {object} - an object to be passed to the reducer.\n */\nvar closeAlertsWithId = function closeAlertsWithId(alertId) {\n  return {\n    type: CLOSE_ALERTS_WITH_ID,\n    alertId: alertId\n  };\n};\n/**\n * Action creator to close a single alert with a given ID.\n *\n * @param {string} alertId - id string of the alert to close\n * @return {object} - an object to be passed to the reducer.\n */\nvar closeAlertWithId = function closeAlertWithId(alertId) {\n  return {\n    type: CLOSE_ALERT_WITH_ID,\n    alertId: alertId\n  };\n};\n/**\n * Action creator to show an alert with the given alertId.\n *\n * @param {string} alertId - id string of the alert to show\n * @return {object} - an object to be passed to the reducer.\n */\nvar showStandardAlert = function showStandardAlert(alertId) {\n  return {\n    type: SHOW_ALERT,\n    alertId: alertId\n  };\n};\n/**\n * Action creator to show an alert with the given input data.\n *\n * @param {object} data - data for the alert\n * @param {string} data.message - message for the alert\n * @param {string} data.extensionId - extension ID for the alert\n * @return {object} - an object to be passed to the reducer.\n */\nvar showExtensionAlert = function showExtensionAlert(data) {\n  return {\n    type: SHOW_EXTENSION_ALERT,\n    data: data\n  };\n};\n/**\n * Function to dispatch showing an alert, with optional\n * timeout to make it close/go away.\n *\n * @param {object} dispatch - dispatch function\n * @param {string} alertId - the ID of the alert\n */\nvar showAlertWithTimeout = function showAlertWithTimeout(dispatch, alertId) {\n  var alertData = _lib_alerts_index_jsx__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"c\"].find(function (thisAlertData) {\n    return thisAlertData.alertId === alertId;\n  });\n  if (alertData) {\n    dispatch(showStandardAlert(alertId));\n    if (alertData.maxDisplaySecs) {\n      setTimeout(function () {\n        dispatch(closeAlertsWithId(alertId));\n      }, alertData.maxDisplaySecs * 1000);\n    }\n  }\n};\n })