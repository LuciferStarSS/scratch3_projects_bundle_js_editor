/* 1217 */\n (function(module, exports, __webpack_require__) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nvar FetchWorkerTool = __webpack_require__(1218);\nvar FetchTool = __webpack_require__(1221);\nvar NetsTool = __webpack_require__(1222);\n/**\n * @typedef {object} Request\n * @property {string} url\n * @property {*} body\n * @property {string} method\n * @property {boolean} withCredentials\n */\n/**\n * Get and send assets with other tools in sequence.\n */\nvar ProxyTool = function () {\n  function ProxyTool() {\n    var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ProxyTool.TOOL_FILTER.ALL;\n    _classCallCheck(this, ProxyTool);\n    var tools;\n    if (filter === ProxyTool.TOOL_FILTER.READY) {\n      tools = [new FetchTool(), new NetsTool()];\n    } else {\n      tools = [new FetchWorkerTool(), new FetchTool(), new NetsTool()];\n    }\n    /**\n     * Sequence of tools to proxy.\n     * @type {Array.<Tool>}\n     */\n    this.tools = tools;\n  }\n  /**\n   * Is get supported? false if all proxied tool return false.\n   * @returns {boolean} Is get supported?\n   */\n  _createClass(ProxyTool, [{\n    key: \"get\",\n    /**\n     * Request data from with one of the proxied tools.\n     * @param {Request} reqConfig - Request configuration for data to get.\n     * @returns {Promise.<Buffer>} Resolve to Buffer of data from server.\n     */\n    value: function get(reqConfig) {\n      var _this = this;\n      var toolIndex = 0;\n      var nextTool = function nextTool(err) {\n        var tool = _this.tools[toolIndex++];\n        if (!tool) {\n          throw err;\n        }\n        if (!tool.isGetSupported) {\n          return nextTool(err);\n        }\n        return tool.get(reqConfig).catch(nextTool);\n      };\n      return nextTool();\n    }\n    /**\n     * Is sending supported? false if all proxied tool return false.\n     * @returns {boolean} Is sending supported?\n     */\n  }, {\n    key: \"send\",\n    /**\n     * Send data to a server with one of the proxied tools.\n     * @param {Request} reqConfig - Request configuration for data to send.\n     * @returns {Promise.<Buffer|string|object>} Server returned metadata.\n     */\n    value: function send(reqConfig) {\n      var _this2 = this;\n      var toolIndex = 0;\n      var nextTool = function nextTool(err) {\n        var tool = _this2.tools[toolIndex++];\n        if (!tool) {\n          throw err;\n        }\n        if (!tool.isSendSupported) {\n          return nextTool(err);\n        }\n        return tool.send(reqConfig).catch(nextTool);\n      };\n      return nextTool();\n    }\n  }, {\n    key: \"isGetSupported\",\n    get: function get() {\n      return this.tools.some(function (tool) {\n        return tool.isGetSupported;\n      });\n    }\n  }, {\n    key: \"isSendSupported\",\n    get: function get() {\n      return this.tools.some(function (tool) {\n        return tool.isSendSupported;\n      });\n    }\n  }]);\n  return ProxyTool;\n}();\n/**\n * Constant values that filter the set of tools in a ProxyTool instance.\n * @enum {string}\n */\nProxyTool.TOOL_FILTER = {\n  /**\n   * Use all tools.\n   */\n  ALL: 'all',\n  /**\n   * Use tools that are ready right now.\n   */\n  READY: 'ready'\n};\nmodule.exports = ProxyTool;\n })