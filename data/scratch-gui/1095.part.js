/* 1095 */\n (function(module, exports) {\n/**\n * A constant value helping to transform a value in radians to degrees.\n * @type {number}\n */\nvar TO_DEGREE = 180 / Math.PI;\n/**\n * A object reused to save on memory allocation returning u and v vector from\n * motionVector.\n * @type {UV}\n */\nvar _motionVectorOut = {\n  u: 0,\n  v: 0\n};\n/**\n * Determine a motion vector combinations of the color component difference on\n * the x axis, y axis, and temporal axis.\n * @param {number} A2 - a sum of x axis squared\n * @param {number} A1B2 - a sum of x axis times y axis\n * @param {number} B1 - a sum of y axis squared\n * @param {number} C2 - a sum of x axis times temporal axis\n * @param {number} C1 - a sum of y axis times temporal axis\n * @param {UV} out - optional object to store return UV info in\n * @returns {UV} a uv vector representing the motion for the given input\n */\nvar motionVector = function motionVector(A2, A1B2, B1, C2, C1) {\n  var out = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _motionVectorOut;\n  // Compare sums of X * Y and sums of X squared and Y squared.\n  var delta = A1B2 * A1B2 - A2 * B1;\n  if (delta) {\n    // System is not singular - solving by Kramer method.\n    var deltaX = -(C1 * A1B2 - C2 * B1);\n    var deltaY = -(A1B2 * C2 - A2 * C1);\n    var Idelta = 8 / delta;\n    out.u = deltaX * Idelta;\n    out.v = deltaY * Idelta;\n  } else {\n    // Singular system - find optical flow in gradient direction.\n    var Norm = (A1B2 + A2) * (A1B2 + A2) + (B1 + A1B2) * (B1 + A1B2);\n    if (Norm) {\n      var IGradNorm = 8 / Norm;\n      var temp = -(C1 + C2) * IGradNorm;\n      out.u = (A1B2 + A2) * temp;\n      out.v = (B1 + A1B2) * temp;\n    } else {\n      out.u = 0;\n      out.v = 0;\n    }\n  }\n  return out;\n};\n/**\n * Translate an angle in degrees with the range -180 to 180 rotated to\n * Scratch's reference angle.\n * @param {number} degrees - angle in range -180 to 180\n * @returns {number} angle from Scratch's reference angle\n */\nvar scratchDegrees = function scratchDegrees(degrees) {\n  return (degrees + 270) % 360 - 180;\n};\n/**\n * Get the angle of the y and x component of a 2d vector in degrees in\n * Scratch's coordinate plane.\n * @param {number} y - the y component of a 2d vector\n * @param {number} x - the x component of a 2d vector\n * @returns {number} angle in degrees in Scratch's coordinate plane\n */\nvar scratchAtan2 = function scratchAtan2(y, x) {\n  return scratchDegrees(Math.atan2(y, x) * TO_DEGREE);\n};\nmodule.exports = {\n  motionVector: motionVector,\n  scratchDegrees: scratchDegrees,\n  scratchAtan2: scratchAtan2\n};\n })