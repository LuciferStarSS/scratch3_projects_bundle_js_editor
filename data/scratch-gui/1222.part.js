/* 1222 */\n (function(module, exports, __webpack_require__) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n/**\n * Get and send assets with the npm nets package.\n */\nvar NetsTool = function () {\n  function NetsTool() {\n    _classCallCheck(this, NetsTool);\n  }\n  _createClass(NetsTool, [{\n    key: \"get\",\n    /**\n     * Request data from a server with nets.\n     * @param {{url:string}} reqConfig - Request configuration for data to get.\n     * @returns {Promise.<Buffer>} Resolve to Buffer of data from server.\n     */\n    value: function get(reqConfig) {\n      return new Promise(function (resolve, reject) {\n        /* eslint global-require:0 */\n        // Wait to evaluate nets and its dependencies until we know we need\n        // it as NetsTool may never be used if fetch is available.\n        var nets = __webpack_require__(223);\n        nets(Object.assign({\n          method: 'get'\n        }, reqConfig), function (err, resp, body) {\n          // body is a Buffer\n          if (err || Math.floor(resp.statusCode / 100) !== 2) {\n            reject(err || resp.statusCode);\n          } else {\n            resolve(body);\n          }\n        });\n      });\n    }\n    /**\n     * Is sending supported? false if the environment does not support sending\n     * with nets.\n     * @returns {boolean} Is sending supported?\n     */\n  }, {\n    key: \"send\",\n    /**\n     * Send data to a server with nets.\n     * @param {Request} reqConfig - Request configuration for data to send.\n     * @returns {Promise.<Buffer|string|object>} Server returned metadata.\n     */\n    value: function send(reqConfig) {\n      return new Promise(function (resolve, reject) {\n        // eslint-disable-next-lint global-require\n        // Wait to evaluate nets and its dependencies until we know we need\n        // it as NetsTool may never be used if fetch is available.\n        var nets = __webpack_require__(223);\n        nets(Object.assign({\n          encoding: undefined // eslint-disable-line no-undefined\n        }, reqConfig), function (err, resp, body) {\n          if (err || Math.floor(resp.statusCode / 100) !== 2) {\n            reject(err || resp.statusCode);\n          } else {\n            resolve(body);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"isGetSupported\",\n    /**\n     * Is get supported? false if the environment does not support nets.\n     * @returns {boolean} Is get supported?\n     */\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"isSendSupported\",\n    get: function get() {\n      return true;\n    }\n  }]);\n  return NetsTool;\n}();\nmodule.exports = NetsTool;\n })