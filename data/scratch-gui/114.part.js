/* 114 */\n (function(module, exports, __webpack_require__) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n/**\n * @fileoverview\n * Object representing a Scratch variable.\n */\nvar uid = __webpack_require__(94);\nvar xmlEscape = __webpack_require__(220);\nvar Variable = function () {\n  /**\n   * @param {string} id Id of the variable.\n   * @param {string} name Name of the variable.\n   * @param {string} type Type of the variable, one of '' or 'list'\n   * @param {boolean} isCloud Whether the variable is stored in the cloud.\n   * @constructor\n   */\n  function Variable(id, name, type, isCloud) {\n    _classCallCheck(this, Variable);\n    this.id = id || uid();\n    this.name = name;\n    this.type = type;\n    this.isCloud = isCloud;\n    switch (this.type) {\n      case Variable.SCALAR_TYPE:\n        this.value = 0;\n        break;\n      case Variable.LIST_TYPE:\n        this.value = [];\n        break;\n      case Variable.BROADCAST_MESSAGE_TYPE:\n        this.value = this.name;\n        break;\n      default:\n        throw new Error(\"Invalid variable type: \".concat(this.type));\n    }\n  }\n  _createClass(Variable, [{\n    key: \"toXML\",\n    value: function toXML(isLocal) {\n      isLocal = isLocal === true;\n      return \"<variable type=\\\"\".concat(this.type, \"\\\" id=\\\"\").concat(this.id, \"\\\" islocal=\\\"\").concat(isLocal, \"\\\" iscloud=\\\"\").concat(this.isCloud, \"\\\">\").concat(xmlEscape(this.name), \"</variable>\");\n    }\n    /**\n     * Type representation for scalar variables.\n     * This is currently represented as ''\n     * for compatibility with blockly.\n     * @const {string}\n     */\n  }], [{\n    key: \"SCALAR_TYPE\",\n    get: function get() {\n      return '';\n    }\n    /**\n     * Type representation for list variables.\n     * @const {string}\n     */\n  }, {\n    key: \"LIST_TYPE\",\n    get: function get() {\n      return 'list';\n    }\n    /**\n     * Type representation for list variables.\n     * @const {string}\n     */\n  }, {\n    key: \"BROADCAST_MESSAGE_TYPE\",\n    get: function get() {\n      return 'broadcast_msg';\n    }\n  }]);\n  return Variable;\n}();\nmodule.exports = Variable;\n })