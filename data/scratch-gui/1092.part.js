/* 1092 */\n (function(module, exports, __webpack_require__) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nvar Cast = __webpack_require__(48);\nvar Scratch3DataBlocks = function () {\n  function Scratch3DataBlocks(runtime) {\n    _classCallCheck(this, Scratch3DataBlocks);\n    /**\n     * The runtime instantiating this block package.\n     * @type {Runtime}\n     */\n    this.runtime = runtime;\n  }\n  /**\n   * Retrieve the block primitives implemented by this package.\n   * @return {object.<string, Function>} Mapping of opcode to Function.\n   */\n  _createClass(Scratch3DataBlocks, [{\n    key: \"getPrimitives\",\n    value: function getPrimitives() {\n      return {\n        data_variable: this.getVariable,\n        data_setvariableto: this.setVariableTo,\n        data_changevariableby: this.changeVariableBy,\n        data_hidevariable: this.hideVariable,\n        data_showvariable: this.showVariable,\n        data_listcontents: this.getListContents,\n        data_addtolist: this.addToList,\n        data_deleteoflist: this.deleteOfList,\n        data_deletealloflist: this.deleteAllOfList,\n        data_insertatlist: this.insertAtList,\n        data_replaceitemoflist: this.replaceItemOfList,\n        data_itemoflist: this.getItemOfList,\n        data_itemnumoflist: this.getItemNumOfList,\n        data_lengthoflist: this.lengthOfList,\n        data_listcontainsitem: this.listContainsItem,\n        data_hidelist: this.hideList,\n        data_showlist: this.showList\n      };\n    }\n  }, {\n    key: \"getVariable\",\n    value: function getVariable(args, util) {\n      var variable = util.target.lookupOrCreateVariable(args.VARIABLE.id, args.VARIABLE.name);\n      return variable.value;\n    }\n  }, {\n    key: \"setVariableTo\",\n    value: function setVariableTo(args, util) {\n      var variable = util.target.lookupOrCreateVariable(args.VARIABLE.id, args.VARIABLE.name);\n      variable.value = args.VALUE;\n      if (variable.isCloud) {\n        util.ioQuery('cloud', 'requestUpdateVariable', [variable.name, args.VALUE]);\n      }\n    }\n  }, {\n    key: \"changeVariableBy\",\n    value: function changeVariableBy(args, util) {\n      var variable = util.target.lookupOrCreateVariable(args.VARIABLE.id, args.VARIABLE.name);\n      var castedValue = Cast.toNumber(variable.value);\n      var dValue = Cast.toNumber(args.VALUE);\n      var newValue = castedValue + dValue;\n      variable.value = newValue;\n      if (variable.isCloud) {\n        util.ioQuery('cloud', 'requestUpdateVariable', [variable.name, newValue]);\n      }\n    }\n  }, {\n    key: \"changeMonitorVisibility\",\n    value: function changeMonitorVisibility(id, visible) {\n      // Send the monitor blocks an event like the flyout checkbox event.\n      // This both updates the monitor state and changes the isMonitored block flag.\n      this.runtime.monitorBlocks.changeBlock({\n        id: id,\n        // Monitor blocks for variables are the variable ID.\n        element: 'checkbox',\n        // Mimic checkbox event from flyout.\n        value: visible\n      }, this.runtime);\n    }\n  }, {\n    key: \"showVariable\",\n    value: function showVariable(args) {\n      this.changeMonitorVisibility(args.VARIABLE.id, true);\n    }\n  }, {\n    key: \"hideVariable\",\n    value: function hideVariable(args) {\n      this.changeMonitorVisibility(args.VARIABLE.id, false);\n    }\n  }, {\n    key: \"showList\",\n    value: function showList(args) {\n      this.changeMonitorVisibility(args.LIST.id, true);\n    }\n  }, {\n    key: \"hideList\",\n    value: function hideList(args) {\n      this.changeMonitorVisibility(args.LIST.id, false);\n    }\n  }, {\n    key: \"getListContents\",\n    value: function getListContents(args, util) {\n      var list = util.target.lookupOrCreateList(args.LIST.id, args.LIST.name); // If block is running for monitors, return copy of list as an array if changed.\n      if (util.thread.updateMonitor) {\n        // Return original list value if up-to-date, which doesn't trigger monitor update.\n        if (list._monitorUpToDate) return list.value; // If value changed, reset the flag and return a copy to trigger monitor update.\n        // Because monitors use Immutable data structures, only new objects trigger updates.\n        list._monitorUpToDate = true;\n        return list.value.slice();\n      } // Determine if the list is all single letters.\n      // If it is, report contents joined together with no separator.\n      // If it's not, report contents joined together with a space.\n      var allSingleLetters = true;\n      for (var i = 0; i < list.value.length; i++) {\n        var listItem = list.value[i];\n        if (!(typeof listItem === 'string' && listItem.length === 1)) {\n          allSingleLetters = false;\n          break;\n        }\n      }\n      if (allSingleLetters) {\n        return list.value.join('');\n      }\n      return list.value.join(' ');\n    }\n  }, {\n    key: \"addToList\",\n    value: function addToList(args, util) {\n      var list = util.target.lookupOrCreateList(args.LIST.id, args.LIST.name);\n      if (list.value.length < Scratch3DataBlocks.LIST_ITEM_LIMIT) {\n        list.value.push(args.ITEM);\n        list._monitorUpToDate = false;\n      }\n    }\n  }, {\n    key: \"deleteOfList\",\n    value: function deleteOfList(args, util) {\n      var list = util.target.lookupOrCreateList(args.LIST.id, args.LIST.name);\n      var index = Cast.toListIndex(args.INDEX, list.value.length, true);\n      if (index === Cast.LIST_INVALID) {\n        return;\n      } else if (index === Cast.LIST_ALL) {\n        list.value = [];\n        return;\n      }\n      list.value.splice(index - 1, 1);\n      list._monitorUpToDate = false;\n    }\n  }, {\n    key: \"deleteAllOfList\",\n    value: function deleteAllOfList(args, util) {\n      var list = util.target.lookupOrCreateList(args.LIST.id, args.LIST.name);\n      list.value = [];\n      return;\n    }\n  }, {\n    key: \"insertAtList\",\n    value: function insertAtList(args, util) {\n      var item = args.ITEM;\n      var list = util.target.lookupOrCreateList(args.LIST.id, args.LIST.name);\n      var index = Cast.toListIndex(args.INDEX, list.value.length + 1, false);\n      if (index === Cast.LIST_INVALID) {\n        return;\n      }\n      var listLimit = Scratch3DataBlocks.LIST_ITEM_LIMIT;\n      if (index > listLimit) return;\n      list.value.splice(index - 1, 0, item);\n      if (list.value.length > listLimit) {\n        // If inserting caused the list to grow larger than the limit,\n        // remove the last element in the list\n        list.value.pop();\n      }\n      list._monitorUpToDate = false;\n    }\n  }, {\n    key: \"replaceItemOfList\",\n    value: function replaceItemOfList(args, util) {\n      var item = args.ITEM;\n      var list = util.target.lookupOrCreateList(args.LIST.id, args.LIST.name);\n      var index = Cast.toListIndex(args.INDEX, list.value.length, false);\n      if (index === Cast.LIST_INVALID) {\n        return;\n      }\n      list.value[index - 1] = item;\n      list._monitorUpToDate = false;\n    }\n  }, {\n    key: \"getItemOfList\",\n    value: function getItemOfList(args, util) {\n      var list = util.target.lookupOrCreateList(args.LIST.id, args.LIST.name);\n      var index = Cast.toListIndex(args.INDEX, list.value.length, false);\n      if (index === Cast.LIST_INVALID) {\n        return '';\n      }\n      return list.value[index - 1];\n    }\n  }, {\n    key: \"getItemNumOfList\",\n    value: function getItemNumOfList(args, util) {\n      var item = args.ITEM;\n      var list = util.target.lookupOrCreateList(args.LIST.id, args.LIST.name); // Go through the list items one-by-one using Cast.compare. This is for\n      // cases like checking if 123 is contained in a list [4, 7, '123'] --\n      // Scratch considers 123 and '123' to be equal.\n      for (var i = 0; i < list.value.length; i++) {\n        if (Cast.compare(list.value[i], item) === 0) {\n          return i + 1;\n        }\n      } // We don't bother using .indexOf() at all, because it would end up with\n      // edge cases such as the index of '123' in [4, 7, 123, '123', 9].\n      // If we use indexOf(), this block would return 4 instead of 3, because\n      // indexOf() sees the first occurence of the string 123 as the fourth\n      // item in the list. With Scratch, this would be confusing -- after all,\n      // '123' and 123 look the same, so one would expect the block to say\n      // that the first occurrence of '123' (or 123) to be the third item.\n      // Default to 0 if there's no match. Since Scratch lists are 1-indexed,\n      // we don't have to worry about this conflicting with the \"this item is\n      // the first value\" number (in JS that is 0, but in Scratch it's 1).\n      return 0;\n    }\n  }, {\n    key: \"lengthOfList\",\n    value: function lengthOfList(args, util) {\n      var list = util.target.lookupOrCreateList(args.LIST.id, args.LIST.name);\n      return list.value.length;\n    }\n  }, {\n    key: \"listContainsItem\",\n    value: function listContainsItem(args, util) {\n      var item = args.ITEM;\n      var list = util.target.lookupOrCreateList(args.LIST.id, args.LIST.name);\n      if (list.value.indexOf(item) >= 0) {\n        return true;\n      } // Try using Scratch comparison operator on each item.\n      // (Scratch considers the string '123' equal to the number 123).\n      for (var i = 0; i < list.value.length; i++) {\n        if (Cast.compare(list.value[i], item) === 0) {\n          return true;\n        }\n      }\n      return false;\n    }\n    /**\n     * Type representation for list variables.\n     * @const {number}\n     */\n  }], [{\n    key: \"LIST_ITEM_LIMIT\",\n    get: function get() {\n      return 200000;\n    }\n  }]);\n  return Scratch3DataBlocks;\n}();\nmodule.exports = Scratch3DataBlocks;\n })