/* 1078 */\n (function(module, exports) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n/**\n * This class provides a ScratchLinkSocket implementation using WebSockets,\n * attempting to connect with the locally installed Scratch-Link.\n *\n * To connect with ScratchLink without WebSockets, you must implement all of the\n * public methods in this class.\n * - open()\n * - close()\n * - setOn[Open|Close|Error]\n * - setHandleMessage\n * - sendMessage(msgObj)\n * - isOpen()\n */\nvar ScratchLinkWebSocket = function () {\n  function ScratchLinkWebSocket(type) {\n    _classCallCheck(this, ScratchLinkWebSocket);\n    this._type = type;\n    this._onOpen = null;\n    this._onClose = null;\n    this._onError = null;\n    this._handleMessage = null;\n    this._ws = null;\n  }\n  _createClass(ScratchLinkWebSocket, [{\n    key: \"open\",\n    value: function open() {\n      switch (this._type) {\n        case 'BLE':\n          this._ws = new WebSocket('wss://device-manager.scratch.mit.edu:20110/scratch/ble');\n          break;\n        case 'BT':\n          this._ws = new WebSocket('wss://device-manager.scratch.mit.edu:20110/scratch/bt');\n          break;\n        default:\n          throw new Error(\"Unknown ScratchLink socket Type: \".concat(this._type));\n      }\n      if (this._onOpen && this._onClose && this._onError && this._handleMessage) {\n        this._ws.onopen = this._onOpen;\n        this._ws.onclose = this._onClose;\n        this._ws.onerror = this._onError;\n      } else {\n        throw new Error('Must set open, close, message and error handlers before calling open on the socket');\n      }\n      this._ws.onmessage = this._onMessage.bind(this);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._ws.close();\n      this._ws = null;\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(message) {\n      var messageText = JSON.stringify(message);\n      this._ws.send(messageText);\n    }\n  }, {\n    key: \"setOnOpen\",\n    value: function setOnOpen(fn) {\n      this._onOpen = fn;\n    }\n  }, {\n    key: \"setOnClose\",\n    value: function setOnClose(fn) {\n      this._onClose = fn;\n    }\n  }, {\n    key: \"setOnError\",\n    value: function setOnError(fn) {\n      this._onError = fn;\n    }\n  }, {\n    key: \"setHandleMessage\",\n    value: function setHandleMessage(fn) {\n      this._handleMessage = fn;\n    }\n  }, {\n    key: \"isOpen\",\n    value: function isOpen() {\n      return this._ws && this._ws.readyState === this._ws.OPEN;\n    }\n  }, {\n    key: \"_onMessage\",\n    value: function _onMessage(e) {\n      var json = JSON.parse(e.data);\n      this._handleMessage(json);\n    }\n  }]);\n  return ScratchLinkWebSocket;\n}();\nmodule.exports = ScratchLinkWebSocket;\n })