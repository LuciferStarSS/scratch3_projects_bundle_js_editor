/* 443 */\n (function(module, exports) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nvar JSONRPC = function () {\n  function JSONRPC() {\n    _classCallCheck(this, JSONRPC);\n    this._requestID = 0;\n    this._openRequests = {};\n  }\n  /**\n   * Make an RPC request and retrieve the result.\n   * @param {string} method - the remote method to call.\n   * @param {object} params - the parameters to pass to the remote method.\n   * @returns {Promise} - a promise for the result of the call.\n   */\n  _createClass(JSONRPC, [{\n    key: \"sendRemoteRequest\",\n    value: function sendRemoteRequest(method, params) {\n      var _this = this;\n      var requestID = this._requestID++;\n      var promise = new Promise(function (resolve, reject) {\n        _this._openRequests[requestID] = {\n          resolve: resolve,\n          reject: reject\n        };\n      });\n      this._sendRequest(method, params, requestID);\n      return promise;\n    }\n    /**\n     * Make an RPC notification with no expectation of a result or callback.\n     * @param {string} method - the remote method to call.\n     * @param {object} params - the parameters to pass to the remote method.\n     */\n  }, {\n    key: \"sendRemoteNotification\",\n    value: function sendRemoteNotification(method, params) {\n      this._sendRequest(method, params);\n    }\n    /**\n     * Handle an RPC request from remote, should return a result or Promise for result, if appropriate.\n     * @param {string} method - the method requested by the remote caller.\n     * @param {object} params - the parameters sent with the remote caller's request.\n     */\n  }, {\n    key: \"didReceiveCall\",\n    value: function didReceiveCall()\n    /* method , params */\n    {\n      throw new Error('Must override didReceiveCall');\n    }\n  }, {\n    key: \"_sendMessage\",\n    value: function _sendMessage()\n    /* jsonMessageObject */\n    {\n      throw new Error('Must override _sendMessage');\n    }\n  }, {\n    key: \"_sendRequest\",\n    value: function _sendRequest(method, params, id) {\n      var request = {\n        jsonrpc: '2.0',\n        method: method,\n        params: params\n      };\n      if (id !== null) {\n        request.id = id;\n      }\n      this._sendMessage(request);\n    }\n  }, {\n    key: \"_handleMessage\",\n    value: function _handleMessage(json) {\n      if (json.jsonrpc !== '2.0') {\n        throw new Error(\"Bad or missing JSON-RPC version in message: \".concat(json));\n      }\n      if (json.hasOwnProperty('method')) {\n        this._handleRequest(json);\n      } else {\n        this._handleResponse(json);\n      }\n    }\n  }, {\n    key: \"_sendResponse\",\n    value: function _sendResponse(id, result, error) {\n      var response = {\n        jsonrpc: '2.0',\n        id: id\n      };\n      if (error) {\n        response.error = error;\n      } else {\n        response.result = result || null;\n      }\n      this._sendMessage(response);\n    }\n  }, {\n    key: \"_handleResponse\",\n    value: function _handleResponse(json) {\n      var result = json.result,\n          error = json.error,\n          id = json.id;\n      var openRequest = this._openRequests[id];\n      delete this._openRequests[id];\n      if (openRequest) {\n        if (error) {\n          openRequest.reject(error);\n        } else {\n          openRequest.resolve(result);\n        }\n      }\n    }\n  }, {\n    key: \"_handleRequest\",\n    value: function _handleRequest(json) {\n      var _this2 = this;\n      var method = json.method,\n          params = json.params,\n          id = json.id;\n      var rawResult = this.didReceiveCall(method, params);\n      if (id) {\n        Promise.resolve(rawResult).then(function (result) {\n          _this2._sendResponse(id, result);\n        }, function (error) {\n          _this2._sendResponse(id, null, error);\n        });\n      }\n    }\n  }]);\n  return JSONRPC;\n}();\nmodule.exports = JSONRPC;\n })