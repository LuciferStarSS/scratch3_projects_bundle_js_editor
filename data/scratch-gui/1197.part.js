/* 1197 */\n (function(module, exports, __webpack_require__) {\n\"use strict\";\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* jslint esnext: true */\nvar intl_messageformat_1 = __webpack_require__(129);\nvar diff_1 = __webpack_require__(1198);\nvar es5_1 = __webpack_require__(1199);\nexports.default = RelativeFormat;\n// -----------------------------------------------------------------------------\nvar FIELDS = [\n    'second', 'second-short',\n    'minute', 'minute-short',\n    'hour', 'hour-short',\n    'day', 'day-short',\n    'month', 'month-short',\n    'year', 'year-short'\n];\nvar STYLES = ['best fit', 'numeric'];\n// -- RelativeFormat -----------------------------------------------------------\nfunction RelativeFormat(locales, options) {\n    options = options || {};\n    // Make a copy of `locales` if it's an array, so that it doesn't change\n    // since it's used lazily.\n    if (es5_1.isArray(locales)) {\n        locales = locales.concat();\n    }\n    es5_1.defineProperty(this, '_locale', { value: this._resolveLocale(locales) });\n    es5_1.defineProperty(this, '_options', { value: {\n            style: this._resolveStyle(options.style),\n            units: this._isValidUnits(options.units) && options.units\n        } });\n    es5_1.defineProperty(this, '_locales', { value: locales });\n    es5_1.defineProperty(this, '_fields', { value: this._findFields(this._locale) });\n    es5_1.defineProperty(this, '_messages', { value: es5_1.objCreate(null) });\n    // \"Bind\" `format()` method to `this` so it can be passed by reference like\n    // the other `Intl` APIs.\n    var relativeFormat = this;\n    this.format = function format(date, options) {\n        return relativeFormat._format(date, options);\n    };\n}\n// Define internal private properties for dealing with locale data.\nes5_1.defineProperty(RelativeFormat, '__localeData__', { value: es5_1.objCreate(null) });\nes5_1.defineProperty(RelativeFormat, '__addLocaleData', { value: function () {\n        for (var i = 0; i < arguments.length; i++) {\n            var datum = arguments[i];\n            if (!(datum && datum.locale)) {\n                throw new Error('Locale data provided to IntlRelativeFormat is missing a ' +\n                    '`locale` property value');\n            }\n            RelativeFormat.__localeData__[datum.locale.toLowerCase()] = datum;\n            // Add data to IntlMessageFormat.\n            intl_messageformat_1.default.__addLocaleData(datum);\n        }\n    } });\n// Define public `defaultLocale` property which can be set by the developer, or\n// it will be set when the first RelativeFormat instance is created by\n// leveraging the resolved locale from `Intl`.\nes5_1.defineProperty(RelativeFormat, 'defaultLocale', {\n    enumerable: true,\n    writable: true,\n    value: undefined\n});\n// Define public `thresholds` property which can be set by the developer, and\n// defaults to relative time thresholds from moment.js.\nes5_1.defineProperty(RelativeFormat, 'thresholds', {\n    enumerable: true,\n    value: {\n        second: 45, 'second-short': 45,\n        minute: 45, 'minute-short': 45,\n        hour: 22, 'hour-short': 22,\n        day: 26, 'day-short': 26,\n        month: 11, 'month-short': 11 // months to year\n    }\n});\nRelativeFormat.prototype.resolvedOptions = function () {\n    return {\n        locale: this._locale,\n        style: this._options.style,\n        units: this._options.units\n    };\n};\nRelativeFormat.prototype._compileMessage = function (units) {\n    // `this._locales` is the original set of locales the user specified to the\n    // constructor, while `this._locale` is the resolved root locale.\n    var locales = this._locales;\n    var resolvedLocale = this._locale;\n    var field = this._fields[units];\n    var relativeTime = field.relativeTime;\n    var future = '';\n    var past = '';\n    var i;\n    for (i in relativeTime.future) {\n        if (relativeTime.future.hasOwnProperty(i)) {\n            future += ' ' + i + ' {' +\n                relativeTime.future[i].replace('{0}', '#') + '}';\n        }\n    }\n    for (i in relativeTime.past) {\n        if (relativeTime.past.hasOwnProperty(i)) {\n            past += ' ' + i + ' {' +\n                relativeTime.past[i].replace('{0}', '#') + '}';\n        }\n    }\n    var message = '{when, select, future {{0, plural, ' + future + '}}' +\n        'past {{0, plural, ' + past + '}}}';\n    // Create the synthetic IntlMessageFormat instance using the original\n    // locales value specified by the user when constructing the the parent\n    // IntlRelativeFormat instance.\n    return new intl_messageformat_1.default(message, locales);\n};\nRelativeFormat.prototype._getMessage = function (units) {\n    var messages = this._messages;\n    // Create a new synthetic message based on the locale data from CLDR.\n    if (!messages[units]) {\n        messages[units] = this._compileMessage(units);\n    }\n    return messages[units];\n};\nRelativeFormat.prototype._getRelativeUnits = function (diff, units) {\n    var field = this._fields[units];\n    if (field.relative) {\n        return field.relative[diff];\n    }\n};\nRelativeFormat.prototype._findFields = function (locale) {\n    var localeData = RelativeFormat.__localeData__;\n    var data = localeData[locale.toLowerCase()];\n    // The locale data is de-duplicated, so we have to traverse the locale's\n    // hierarchy until we find `fields` to return.\n    while (data) {\n        if (data.fields) {\n            return data.fields;\n        }\n        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];\n    }\n    throw new Error('Locale data added to IntlRelativeFormat is missing `fields` for :' +\n        locale);\n};\nRelativeFormat.prototype._format = function (date, options) {\n    var now = options && options.now !== undefined ? options.now : es5_1.dateNow();\n    if (date === undefined) {\n        date = now;\n    }\n    // Determine if the `date` and optional `now` values are valid, and throw a\n    // similar error to what `Intl.DateTimeFormat#format()` would throw.\n    if (!isFinite(now)) {\n        throw new RangeError('The `now` option provided to IntlRelativeFormat#format() is not ' +\n            'in valid range.');\n    }\n    if (!isFinite(date)) {\n        throw new RangeError('The date value provided to IntlRelativeFormat#format() is not ' +\n            'in valid range.');\n    }\n    var diffReport = diff_1.default(now, date);\n    var units = this._options.units || this._selectUnits(diffReport);\n    var diffInUnits = diffReport[units];\n    if (this._options.style !== 'numeric') {\n        var relativeUnits = this._getRelativeUnits(diffInUnits, units);\n        if (relativeUnits) {\n            return relativeUnits;\n        }\n    }\n    return this._getMessage(units).format({\n        '0': Math.abs(diffInUnits),\n        when: diffInUnits < 0 ? 'past' : 'future'\n    });\n};\nRelativeFormat.prototype._isValidUnits = function (units) {\n    if (!units || es5_1.arrIndexOf.call(FIELDS, units) >= 0) {\n        return true;\n    }\n    if (typeof units === 'string') {\n        var suggestion = /s$/.test(units) && units.substr(0, units.length - 1);\n        if (suggestion && es5_1.arrIndexOf.call(FIELDS, suggestion) >= 0) {\n            throw new Error('\"' + units + '\" is not a valid IntlRelativeFormat `units` ' +\n                'value, did you mean: ' + suggestion);\n        }\n    }\n    throw new Error('\"' + units + '\" is not a valid IntlRelativeFormat `units` value, it ' +\n        'must be one of: \"' + FIELDS.join('\", \"') + '\"');\n};\nRelativeFormat.prototype._resolveLocale = function (locales) {\n    if (typeof locales === 'string') {\n        locales = [locales];\n    }\n    // Create a copy of the array so we can push on the default locale.\n    locales = (locales || []).concat(RelativeFormat.defaultLocale);\n    var localeData = RelativeFormat.__localeData__;\n    var i, len, localeParts, data;\n    // Using the set of locales + the default locale, we look for the first one\n    // which that has been registered. When data does not exist for a locale, we\n    // traverse its ancestors to find something that's been registered within\n    // its hierarchy of locales. Since we lack the proper `parentLocale` data\n    // here, we must take a naive approach to traversal.\n    for (i = 0, len = locales.length; i < len; i += 1) {\n        localeParts = locales[i].toLowerCase().split('-');\n        while (localeParts.length) {\n            data = localeData[localeParts.join('-')];\n            if (data) {\n                // Return the normalized locale string; e.g., we return \"en-US\",\n                // instead of \"en-us\".\n                return data.locale;\n            }\n            localeParts.pop();\n        }\n    }\n    var defaultLocale = locales.pop();\n    throw new Error('No locale data has been added to IntlRelativeFormat for: ' +\n        locales.join(', ') + ', or the default locale: ' + defaultLocale);\n};\nRelativeFormat.prototype._resolveStyle = function (style) {\n    // Default to \"best fit\" style.\n    if (!style) {\n        return STYLES[0];\n    }\n    if (es5_1.arrIndexOf.call(STYLES, style) >= 0) {\n        return style;\n    }\n    throw new Error('\"' + style + '\" is not a valid IntlRelativeFormat `style` value, it ' +\n        'must be one of: \"' + STYLES.join('\", \"') + '\"');\n};\nRelativeFormat.prototype._selectUnits = function (diffReport) {\n    var i, l, units;\n    var fields = FIELDS.filter(function (field) {\n        return field.indexOf('-short') < 1;\n    });\n    for (i = 0, l = fields.length; i < l; i += 1) {\n        units = fields[i];\n        if (Math.abs(diffReport[units]) < RelativeFormat.thresholds[units]) {\n            break;\n        }\n    }\n    return units;\n};\n/*# sourceMappingURL=core.js.map*/ })