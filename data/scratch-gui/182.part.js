/* 182 */\n (function(module, exports, __webpack_require__) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nvar atob = __webpack_require__(982);\nvar btoa = __webpack_require__(983);\nvar Base64Util = function () {\n  function Base64Util() {\n    _classCallCheck(this, Base64Util);\n  }\n  _createClass(Base64Util, null, [{\n    key: \"base64ToUint8Array\",\n    /**\n     * Convert a base64 encoded string to a Uint8Array.\n     * @param {string} base64 - a base64 encoded string.\n     * @return {Uint8Array} - a decoded Uint8Array.\n     */\n    value: function base64ToUint8Array(base64) {\n      var binaryString = atob(base64);\n      var len = binaryString.length;\n      var array = new Uint8Array(len);\n      for (var i = 0; i < len; i++) {\n        array[i] = binaryString.charCodeAt(i);\n      }\n      return array;\n    }\n    /**\n     * Convert a Uint8Array to a base64 encoded string.\n     * @param {Uint8Array} array - the array to convert.\n     * @return {string} - the base64 encoded string.\n     */\n  }, {\n    key: \"uint8ArrayToBase64\",\n    value: function uint8ArrayToBase64(array) {\n      var base64 = btoa(String.fromCharCode.apply(null, array));\n      return base64;\n    }\n    /**\n    * Convert an array buffer to a base64 encoded string.\n    * @param {array} buffer - an array buffer to convert.\n    * @return {string} - the base64 encoded string.\n    */\n  }, {\n    key: \"arrayBufferToBase64\",\n    value: function arrayBufferToBase64(buffer) {\n      var binary = '';\n      var bytes = new Uint8Array(buffer);\n      var len = bytes.byteLength;\n      for (var i = 0; i < len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return btoa(binary);\n    }\n  }]);\n  return Base64Util;\n}();\nmodule.exports = Base64Util;\n })