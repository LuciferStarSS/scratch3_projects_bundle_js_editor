/* 501 */\n (function(module, exports, __webpack_require__) {\n\"use strict\";\nvar prefixInfo  = __webpack_require__(502)\nvar cssPrefixFn = __webpack_require__(1379)\nvar HYPHENATE   = __webpack_require__(505)\nvar CAMELIZE   = __webpack_require__(504)\nvar HAS_OWN     = __webpack_require__(506)\nvar IS_OBJECT   = __webpack_require__(1384)\nvar IS_FUNCTION = __webpack_require__(1385)\nvar applyPrefix = function(target, property, value, normalizeFn){\n    cssPrefixFn(property).forEach(function(p){\n        target[normalizeFn? normalizeFn(p): p] = value\n    })\n}\nvar toObject = function(str){\n    str = (str || '').split(';')\n    var result = {}\n    str.forEach(function(item){\n        var split = item.split(':')\n        if (split.length == 2){\n            result[split[0].trim()] = split[1].trim()\n        }\n    })\n    return result\n}\nvar CONFIG = {\n    cssUnitless: __webpack_require__(500)\n}\n/**\n * @ignore\n * @method toStyleObject\n *\n * @param  {Object} styles The object to convert to a style object.\n * @param  {Object} [config]\n * @param  {Boolean} [config.addUnits=true] True if you want to add units when numerical values are encountered.\n * @param  {Object}  config.cssUnitless An object whose keys represent css numerical property names that will not be appended with units.\n * @param  {Object}  config.prefixProperties An object whose keys represent css property names that should be prefixed\n * @param  {String}  config.cssUnit='px' The css unit to append to numerical values. Defaults to 'px'\n * @param  {String}  config.normalizeName A function that normalizes a name to a valid css property name\n * @param  {String}  config.scope\n *\n * @return {Object} The object, normalized with css style names\n */\nvar TO_STYLE_OBJECT = function(styles, config, prepend, result){\n    if (typeof styles == 'string'){\n        styles = toObject(styles)\n    }\n    config = config || CONFIG\n    config.cssUnitless = config.cssUnitless || CONFIG.cssUnitless\n    result = result || {}\n    var scope    = config.scope || {},\n        //configs\n        addUnits = config.addUnits != null?\n                            config.addUnits:\n                            scope && scope.addUnits != null?\n                                scope.addUnits:\n                                true,\n        cssUnitless      = (config.cssUnitless != null?\n                                config.cssUnitless:\n                                scope?\n                                    scope.cssUnitless:\n                                    null) || {},\n        cssUnit          = (config.cssUnit || scope? scope.cssUnit: null) || 'px',\n        prefixProperties = (config.prefixProperties || (scope? scope.prefixProperties: null)) || {},\n        camelize    = config.camelize,\n        normalizeFn = camelize? CAMELIZE: HYPHENATE\n    // Object.keys(cssUnitless).forEach(function(key){\n    //     cssUnitless[normalizeFn(key)] = 1\n    // })\n    var processed,\n        styleName,\n        propName,\n        propValue,\n        propCssUnit,\n        propType,\n        propIsNumber,\n        fnPropValue,\n        prefix\n    for (propName in styles) if (HAS_OWN(styles, propName)) {\n        propValue = styles[ propName ]\n        //the hyphenated style name (css property name)\n        styleName = HYPHENATE(prepend? prepend + propName: propName)\n        processed = false\n        prefix    = false\n        if (IS_FUNCTION(propValue)) {\n            //a function can either return a css value\n            //or an object with { value, prefix, name }\n            fnPropValue = propValue.call(scope || styles, propValue, propName, styleName, styles)\n            if (IS_OBJECT(fnPropValue) && fnPropValue.value != null){\n                propValue = fnPropValue.value\n                prefix    = fnPropValue.prefix\n                styleName = fnPropValue.name?\n                                HYPHENATE(fnPropValue.name):\n                                styleName\n            } else {\n                propValue = fnPropValue\n            }\n        }\n        propType     = typeof propValue\n        propIsNumber = propType == 'number' || (propType == 'string' && propValue != '' && propValue * 1 == propValue)\n        if (propValue == null || styleName == null || styleName === ''){\n            continue\n        }\n        if (propIsNumber || propType == 'string'){\n           processed = true\n        }\n        if (!processed && propValue.value != null && propValue.prefix){\n           processed = true\n           prefix    = propValue.prefix\n           propValue = propValue.value\n        }\n        // hyphenStyleName = camelize? HYPHENATE(styleName): styleName\n        if (processed){\n            prefix = prefix || !!prefixProperties[styleName]\n            if (propIsNumber){\n                propValue = addUnits && !(styleName in cssUnitless) ?\n                                propValue + cssUnit:\n                                propValue + ''//change it to a string, so that jquery does not append px or other units\n            }\n            //special border treatment\n            if (\n                    (\n                     styleName == 'border' ||\n                    (!styleName.indexOf('border')\n                        &&\n                        !~styleName.indexOf('radius')\n                        &&\n                        !~styleName.indexOf('width'))\n                    ) &&\n                    propIsNumber\n                ){\n                styleName = styleName + '-width'\n            }\n            //special border radius treatment\n            if (!styleName.indexOf('border-radius-')){\n                styleName.replace(/border(-radius)(-(.*))/, function(str, radius, theRest){\n                    var positions = {\n                        '-top'    : ['-top-left',      '-top-right' ],\n                        '-left'   : ['-top-left',    '-bottom-left' ],\n                        '-right'  : ['-top-right',   '-bottom-right'],\n                        '-bottom' : ['-bottom-left', '-bottom-right']\n                    }\n                    if (theRest in positions){\n                        styleName = []\n                        positions[theRest].forEach(function(pos){\n                            styleName.push('border' + pos + radius)\n                        })\n                    } else {\n                        styleName = 'border'+ theRest + radius\n                    }\n                })\n                if (Array.isArray(styleName)){\n                    styleName.forEach(function(styleName){\n                        if (prefix){\n                            applyPrefix(result, styleName, propValue, normalizeFn)\n                        } else {\n                            result[normalizeFn(styleName)] = propValue\n                        }\n                    })\n                    continue\n                }\n            }\n            if (prefix){\n                applyPrefix(result, styleName, propValue, normalizeFn)\n            } else {\n                result[normalizeFn(styleName)] = propValue\n            }\n        } else {\n            //the propValue must be an object, so go down the hierarchy\n            TO_STYLE_OBJECT(propValue, config, styleName + '-', result)\n        }\n    }\n    return result\n}\nmodule.exports = TO_STYLE_OBJECT\n })