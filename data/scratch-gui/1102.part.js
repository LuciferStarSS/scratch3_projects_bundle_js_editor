/* 1102 */\n (function(module, exports, __webpack_require__) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nvar Base64Util = __webpack_require__(182);\n/**\n * Adapter class\n */\nvar ScratchLinkDeviceAdapter = function () {\n  function ScratchLinkDeviceAdapter(socket, _ref) {\n    var service = _ref.service,\n        commandChar = _ref.commandChar,\n        responseChar = _ref.responseChar;\n    _classCallCheck(this, ScratchLinkDeviceAdapter);\n    this.socket = socket;\n    this._service = service;\n    this._commandChar = commandChar;\n    this._responseChar = responseChar;\n    this._onResponse = this._onResponse.bind(this);\n    this._deviceOnResponse = null;\n  }\n  _createClass(ScratchLinkDeviceAdapter, [{\n    key: \"writeCommand\",\n    value: function writeCommand(commandBuffer) {\n      var data = Base64Util.uint8ArrayToBase64(commandBuffer);\n      return this.socket.write(this._service, this._commandChar, data, 'base64');\n    }\n  }, {\n    key: \"setup\",\n    value: function setup(_ref2) {\n      var onResponse = _ref2.onResponse;\n      this._deviceOnResponse = onResponse;\n      return this.socket.startNotifications(this._service, this._responseChar, this._onResponse); // TODO:\n      // How do we find out from scratch link if communication closes?\n    }\n  }, {\n    key: \"_onResponse\",\n    value: function _onResponse(base64) {\n      var array = Base64Util.base64ToUint8Array(base64);\n      var response = new DataView(array.buffer);\n      return this._deviceOnResponse(response);\n    }\n  }, {\n    key: \"godirectAdapter\",\n    get: function get() {\n      return true;\n    }\n  }]);\n  return ScratchLinkDeviceAdapter;\n}();\nmodule.exports = ScratchLinkDeviceAdapter;\n })