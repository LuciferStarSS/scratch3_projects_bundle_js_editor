/* 1080 */\n (function(module, exports, __webpack_require__) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nvar Variable = __webpack_require__(114);\nvar log = __webpack_require__(39);\nvar Cloud = function () {\n  /**\n   * @typedef updateVariable\n   * @param {string} name The name of the cloud variable to update on the server\n   * @param {(string | number)} value The value to update the cloud variable with.\n   */\n  /**\n   * A cloud data provider, responsible for managing the connection to the\n   * cloud data server and for posting data about cloud data activity to\n   * this IO device.\n   * @typedef {object} CloudProvider\n   * @property {updateVariable} updateVariable A function which sends a cloud variable\n   * update to the cloud data server.\n   * @property {Function} requestCloseConnection A function which closes\n   * the connection to the cloud data server.\n   */\n  /**\n   * Part of a cloud io data post indicating a cloud variable update.\n   * @typedef {object} VarUpdateData\n   * @property {string} name The name of the variable to update\n   * @property {(number | string)} value The scalar value to update the variable with\n   */\n  /**\n   * A cloud io data post message.\n   * @typedef {object} CloudIOData\n   * @property {VarUpdateData} varUpdate A {@link VarUpdateData} message indicating\n   * a cloud variable update\n   */\n  /**\n   * Cloud IO Device responsible for sending and receiving messages from\n   * cloud provider (mananging the cloud server connection) and interacting\n   * with cloud variables in the current project.\n   * @param {Runtime} runtime The runtime context for this cloud io device.\n   */\n  function Cloud(runtime) {\n    _classCallCheck(this, Cloud);\n    /**\n     * Reference to the cloud data provider, responsible for mananging\n     * the web socket connection to the cloud data server.\n     * @type {?CloudProvider}\n     */\n    this.provider = null;\n    /**\n     * Reference to the runtime that owns this cloud io device.\n     * @type {!Runtime}\n     */\n    this.runtime = runtime;\n    /**\n     * Reference to the stage target which owns the cloud variables\n     * in the project.\n     * @type {?Target}\n     */\n    this.stage = null;\n  }\n  /**\n   * Set a reference to the cloud data provider.\n   * @param {CloudProvider} provider The cloud data provider\n   */\n  _createClass(Cloud, [{\n    key: \"setProvider\",\n    value: function setProvider(provider) {\n      this.provider = provider;\n    }\n    /**\n     * Set a reference to the stage target which owns the\n     * cloud variables in the project.\n     * @param {Target} stage The stage target\n     */\n  }, {\n    key: \"setStage\",\n    value: function setStage(stage) {\n      this.stage = stage;\n    }\n    /**\n     * Handle incoming data to this io device.\n     * @param {CloudIOData} data The {@link CloudIOData} object to process\n     */\n  }, {\n    key: \"postData\",\n    value: function postData(data) {\n      if (data.varUpdate) {\n        this.updateCloudVariable(data.varUpdate);\n      }\n    }\n  }, {\n    key: \"requestCreateVariable\",\n    value: function requestCreateVariable(variable) {\n      if (this.runtime.canAddCloudVariable()) {\n        if (this.provider) {\n          this.provider.createVariable(variable.name, variable.value); // We'll set the cloud flag and update the\n          // cloud variable limit when we actually\n          // get a confirmation from the cloud data server\n        }\n      } // TODO else track creation for later\n    }\n    /**\n     * Request the cloud data provider to update the given variable with\n     * the given value. Does nothing if this io device does not have a provider set.\n     * @param {string} name The name of the variable to update\n     * @param {string | number} value The value to update the variable with\n     */\n  }, {\n    key: \"requestUpdateVariable\",\n    value: function requestUpdateVariable(name, value) {\n      if (this.provider) {\n        this.provider.updateVariable(name, value);\n      }\n    }\n    /**\n     * Request the cloud data provider to rename the variable with the given name\n     * to the given new name. Does nothing if this io device does not have a provider set.\n     * @param {string} oldName The name of the variable to rename\n     * @param {string | number} newName The new name for the variable\n     */\n  }, {\n    key: \"requestRenameVariable\",\n    value: function requestRenameVariable(oldName, newName) {\n      if (this.provider) {\n        this.provider.renameVariable(oldName, newName);\n      }\n    }\n    /**\n     * Request the cloud data provider to delete the variable with the given name\n     * Does nothing if this io device does not have a provider set.\n     * @param {string} name The name of the variable to delete\n     */\n  }, {\n    key: \"requestDeleteVariable\",\n    value: function requestDeleteVariable(name) {\n      if (this.provider) {\n        this.provider.deleteVariable(name);\n      }\n    }\n    /**\n     * Update a cloud variable in the runtime based on the message received\n     * from the cloud provider.\n     * @param {VarData} varUpdate A {@link VarData} object describing\n     * a cloud variable update received from the cloud data provider.\n     */\n  }, {\n    key: \"updateCloudVariable\",\n    value: function updateCloudVariable(varUpdate) {\n      var varName = varUpdate.name;\n      var variable = this.stage.lookupVariableByNameAndType(varName, Variable.SCALAR_TYPE);\n      if (!variable || !variable.isCloud) {\n        log.warn(\"Received an update for a cloud variable that does not exist: \".concat(varName));\n        return;\n      }\n      variable.value = varUpdate.value;\n    }\n    /**\n     * Request the cloud data provider to close the web socket connection and\n     * clear this io device of references to the cloud data provider and the\n     * stage.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      if (!this.provider) return;\n      this.provider.requestCloseConnection();\n      this.provider = null;\n      this.stage = null;\n    }\n  }]);\n  return Cloud;\n}();\nmodule.exports = Cloud;\n })