/* 226 */\n (function(module, exports, __webpack_require__) {\nvar StringUtil = __webpack_require__(102);\nvar log = __webpack_require__(39);\n/**\n * Initialize a sound from an asset asynchronously.\n * @param {!object} sound - the Scratch sound object.\n * @property {string} md5 - the MD5 and extension of the sound to be loaded.\n * @property {Buffer} data - sound data will be written here once loaded.\n * @param {!Asset} soundAsset - the asset loaded from storage.\n * @param {!Runtime} runtime - Scratch runtime, used to access the storage module.\n * @param {SoundBank} soundBank - Scratch Audio SoundBank to add sounds to.\n * @returns {!Promise} - a promise which will resolve to the sound when ready.\n */\nvar loadSoundFromAsset = function loadSoundFromAsset(sound, soundAsset, runtime, soundBank) {\n  sound.assetId = soundAsset.assetId;\n  if (!runtime.audioEngine) {\n    log.error('No audio engine present; cannot load sound asset: ', sound.md5);\n    return Promise.resolve(sound);\n  }\n  return runtime.audioEngine.decodeSoundPlayer(Object.assign({}, sound, {\n    data: soundAsset.data\n  })).then(function (soundPlayer) {\n    sound.soundId = soundPlayer.id; // Set the sound sample rate and sample count based on the\n    // the audio buffer from the audio engine since the sound\n    // gets resampled by the audio engine\n    var soundBuffer = soundPlayer.buffer;\n    sound.rate = soundBuffer.sampleRate;\n    sound.sampleCount = soundBuffer.length;\n    if (soundBank !== null) {\n      soundBank.addSoundPlayer(soundPlayer);\n    }\n    return sound;\n  });\n};\n/**\n * Load a sound's asset into memory asynchronously.\n * @param {!object} sound - the Scratch sound object.\n * @property {string} md5 - the MD5 and extension of the sound to be loaded.\n * @property {Buffer} data - sound data will be written here once loaded.\n * @param {!Runtime} runtime - Scratch runtime, used to access the storage module.\n * @param {SoundBank} soundBank - Scratch Audio SoundBank to add sounds to.\n * @returns {!Promise} - a promise which will resolve to the sound when ready.\n */\nvar loadSound = function loadSound(sound, runtime, soundBank) {\n  if (!runtime.storage) {\n    log.error('No storage module present; cannot load sound asset: ', sound.md5);\n    return Promise.resolve(sound);\n  }\n  var idParts = StringUtil.splitFirst(sound.md5, '.');\n  var md5 = idParts[0];\n  var ext = idParts[1].toLowerCase();\n  sound.dataFormat = ext;\n  return (sound.asset && Promise.resolve(sound.asset) || runtime.storage.load(runtime.storage.AssetType.Sound, md5, ext)).then(function (soundAsset) {\n    sound.asset = soundAsset;\n    return loadSoundFromAsset(sound, soundAsset, runtime, soundBank);\n  });\n};\nmodule.exports = {\n  loadSound: loadSound,\n  loadSoundFromAsset: loadSoundFromAsset\n};\n })