/* 260 */\n (function(module, exports, __webpack_require__) {\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// loosely based on example code at https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n(function (root) {\n  'use strict';\n  /**\n   * Error thrown when any required feature is missing (Promises, navigator, getUserMedia)\n   * @constructor\n   */\n  function NotSupportedError() {\n    this.name = 'NotSupportedError';\n    this.message = 'getUserMedia is not implemented in this browser';\n  }\n  NotSupportedError.prototype = Error.prototype;\n  /**\n   * Fake Promise instance that behaves like a Promise except that it always rejects with a NotSupportedError.\n   * Used for situations where there is no global Promise constructor.\n   *\n   * The message will report that the getUserMedia API is not available.\n   * This is technically true because every browser that supports getUserMedia also supports promises.\n   **\n   * @see http://caniuse.com/#feat=stream\n   * @see http://caniuse.com/#feat=promises\n   * @constructor\n   */\n  function FakePromise() {\n    // make it chainable like a real promise\n    this.then = function() {\n      return this;\n    };\n    // but always reject with an error\n    var err = new NotSupportedError();\n    this.catch = function(cb) {\n      setTimeout(function () {\n        cb(err);\n      });\n    }\n  }\n  var isPromiseSupported = typeof Promise !== 'undefined';\n  // checks for root.navigator to enable server-side rendering of things that depend on this\n  // (will need to be updated on client, but at least doesn't throw this way)\n  var navigatorExists = typeof navigator !== \"undefined\";\n  // gump = mondern promise-based interface\n  // gum = old callback-based interface\n  var gump = navigatorExists && navigator.mediaDevices && navigator.mediaDevices.getUserMedia;\n  var gum = navigatorExists && (navigator.getUserMedia || navigator.webkitGetUserMedia ||  navigator.mozGetUserMedia || navigator.msGetUserMedia);\n  /**\n   * Wrapper for navigator.mediaDevices.getUserMedia.\n   * Always returns a Promise or Promise-like object, even in environments without a global Promise constructor\n   *\n   * @stream https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n   *\n   * @param {Object} constraints - must include one or both of audio/video along with optional details for video\n   * @param {Boolean} [constraints.audio] - include audio data in the stream\n   * @param {Boolean|Object} [constraints.video] - include video data in the stream. May be a boolean or an object with additional constraints, see\n   * @returns {Promise<MediaStream>} a promise that resolves to a MediaStream object\n     */\n  function getUserMedia(constraints) {\n    // ensure that Promises are supported and we have a navigator object\n    if (!isPromiseSupported) {\n      return new FakePromise();\n    }\n    // Try the more modern, promise-based MediaDevices API first\n    //https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    if(gump) {\n      return navigator.mediaDevices.getUserMedia(constraints);\n    }\n    // fall back to the older method second, wrap it in a promise.\n    return new Promise(function(resolve, reject) {\n      // if navigator doesn't exist, then we can't use the getUserMedia API. (And probably aren't even in a browser.)\n      // assuming it does, try getUserMedia and then all of the prefixed versions\n      if (!gum) {\n        return reject(new NotSupportedError());\n      }\n      gum.call(navigator, constraints, resolve, reject);\n    });\n  }\n  getUserMedia.NotSupportedError = NotSupportedError;\n  // eslint-disable-next-line no-implicit-coercion\n  getUserMedia.isSupported = !!(isPromiseSupported && (gump || gum));\n  // UMD, loosely based on https://github.com/umdjs/umd/blob/master/templates/returnExportsGlobal.js\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return getUserMedia;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(this));\n })