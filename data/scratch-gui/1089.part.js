/* 1089 */\n (function(module, exports, __webpack_require__) {\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nvar Cast = __webpack_require__(48);\nvar MathUtil = __webpack_require__(62);\nvar Scratch3OperatorsBlocks = function () {\n  function Scratch3OperatorsBlocks(runtime) {\n    _classCallCheck(this, Scratch3OperatorsBlocks);\n    /**\n     * The runtime instantiating this block package.\n     * @type {Runtime}\n     */\n    this.runtime = runtime;\n  }\n  /**\n   * Retrieve the block primitives implemented by this package.\n   * @return {object.<string, Function>} Mapping of opcode to Function.\n   */\n  _createClass(Scratch3OperatorsBlocks, [{\n    key: \"getPrimitives\",\n    value: function getPrimitives() {\n      return {\n        operator_add: this.add,\n        operator_subtract: this.subtract,\n        operator_multiply: this.multiply,\n        operator_divide: this.divide,\n        operator_lt: this.lt,\n        operator_equals: this.equals,\n        operator_gt: this.gt,\n        operator_and: this.and,\n        operator_or: this.or,\n        operator_not: this.not,\n        operator_random: this.random,\n        operator_join: this.join,\n        operator_letter_of: this.letterOf,\n        operator_length: this.length,\n        operator_contains: this.contains,\n        operator_mod: this.mod,\n        operator_round: this.round,\n        operator_mathop: this.mathop\n      };\n    }\n  }, {\n    key: \"add\",\n    value: function add(args) {\n      return Cast.toNumber(args.NUM1) + Cast.toNumber(args.NUM2);\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(args) {\n      return Cast.toNumber(args.NUM1) - Cast.toNumber(args.NUM2);\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(args) {\n      return Cast.toNumber(args.NUM1) * Cast.toNumber(args.NUM2);\n    }\n  }, {\n    key: \"divide\",\n    value: function divide(args) {\n      return Cast.toNumber(args.NUM1) / Cast.toNumber(args.NUM2);\n    }\n  }, {\n    key: \"lt\",\n    value: function lt(args) {\n      return Cast.compare(args.OPERAND1, args.OPERAND2) < 0;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(args) {\n      return Cast.compare(args.OPERAND1, args.OPERAND2) === 0;\n    }\n  }, {\n    key: \"gt\",\n    value: function gt(args) {\n      return Cast.compare(args.OPERAND1, args.OPERAND2) > 0;\n    }\n  }, {\n    key: \"and\",\n    value: function and(args) {\n      return Cast.toBoolean(args.OPERAND1) && Cast.toBoolean(args.OPERAND2);\n    }\n  }, {\n    key: \"or\",\n    value: function or(args) {\n      return Cast.toBoolean(args.OPERAND1) || Cast.toBoolean(args.OPERAND2);\n    }\n  }, {\n    key: \"not\",\n    value: function not(args) {\n      return !Cast.toBoolean(args.OPERAND);\n    }\n  }, {\n    key: \"random\",\n    value: function random(args) {\n      var nFrom = Cast.toNumber(args.FROM);\n      var nTo = Cast.toNumber(args.TO);\n      var low = nFrom <= nTo ? nFrom : nTo;\n      var high = nFrom <= nTo ? nTo : nFrom;\n      if (low === high) return low; // If both arguments are ints, truncate the result to an int.\n      if (Cast.isInt(args.FROM) && Cast.isInt(args.TO)) {\n        return low + Math.floor(Math.random() * (high + 1 - low));\n      }\n      return Math.random() * (high - low) + low;\n    }\n  }, {\n    key: \"join\",\n    value: function join(args) {\n      return Cast.toString(args.STRING1) + Cast.toString(args.STRING2);\n    }\n  }, {\n    key: \"letterOf\",\n    value: function letterOf(args) {\n      var index = Cast.toNumber(args.LETTER) - 1;\n      var str = Cast.toString(args.STRING); // Out of bounds?\n      if (index < 0 || index >= str.length) {\n        return '';\n      }\n      return str.charAt(index);\n    }\n  }, {\n    key: \"length\",\n    value: function length(args) {\n      return Cast.toString(args.STRING).length;\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(args) {\n      var format = function format(string) {\n        return Cast.toString(string).toLowerCase();\n      };\n      return format(args.STRING1).includes(format(args.STRING2));\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(args) {\n      var n = Cast.toNumber(args.NUM1);\n      var modulus = Cast.toNumber(args.NUM2);\n      var result = n % modulus; // Scratch mod uses floored division instead of truncated division.\n      if (result / modulus < 0) result += modulus;\n      return result;\n    }\n  }, {\n    key: \"round\",\n    value: function round(args) {\n      return Math.round(Cast.toNumber(args.NUM));\n    }\n  }, {\n    key: \"mathop\",\n    value: function mathop(args) {\n      var operator = Cast.toString(args.OPERATOR).toLowerCase();\n      var n = Cast.toNumber(args.NUM);\n      switch (operator) {\n        case 'abs':\n          return Math.abs(n);\n        case 'floor':\n          return Math.floor(n);\n        case 'ceiling':\n          return Math.ceil(n);\n        case 'sqrt':\n          return Math.sqrt(n);\n        case 'sin':\n          return parseFloat(Math.sin(Math.PI * n / 180).toFixed(10));\n        case 'cos':\n          return parseFloat(Math.cos(Math.PI * n / 180).toFixed(10));\n        case 'tan':\n          return MathUtil.tan(n);\n        case 'asin':\n          return Math.asin(n) * 180 / Math.PI;\n        case 'acos':\n          return Math.acos(n) * 180 / Math.PI;\n        case 'atan':\n          return Math.atan(n) * 180 / Math.PI;\n        case 'ln':\n          return Math.log(n);\n        case 'log':\n          return Math.log(n) / Math.LN10;\n        case 'e ^':\n          return Math.exp(n);\n        case '10 ^':\n          return Math.pow(10, n);\n      }\n      return 0;\n    }\n  }]);\n  return Scratch3OperatorsBlocks;\n}();\nmodule.exports = Scratch3OperatorsBlocks;\n })