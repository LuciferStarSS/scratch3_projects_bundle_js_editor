/* 490 */\n (function(module, exports, __webpack_require__) {\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n/**\n * @fileOverview Import bitmap data into Scratch 3.0, resizing image as necessary.\n */\nvar _require = __webpack_require__(491),\n    FONTS = _require.FONTS;\n/**\n * Given SVG data, inline the fonts. This allows them to be rendered correctly when set\n * as the source of an HTMLImageElement. Here is a note from tmickel:\n *   // Inject fonts that are needed.\n *   // It would be nice if there were another way to get the SVG-in-canvas\n *   // to render the correct font family, but I couldn't find any other way.\n *   // Other things I tried:\n *   // Just injecting the font-family into the document: no effect.\n *   // External stylesheet linked to by SVG: no effect.\n *   // Using a <link> or <style>@import</style> to link to font-family\n *   // injected into the document: no effect.\n * @param {string} svgString The string representation of the svg to modify\n * @return {string} The svg with any needed fonts inlined\n */\nvar inlineSvgFonts = function inlineSvgFonts(svgString) {\n  // Make it clear that this function only operates on strings.\n  // If we don't explicitly throw this here, the function silently fails.\n  if (typeof svgString !== 'string') {\n    throw new Error('SVG to be inlined is not a string');\n  } // Collect fonts that need injection.\n  var fontsNeeded = new Set();\n  var fontRegex = /font-family=\"([^\"]*)\"/g;\n  var matches = fontRegex.exec(svgString);\n  while (matches) {\n    fontsNeeded.add(matches[1]);\n    matches = fontRegex.exec(svgString);\n  }\n  if (fontsNeeded.size > 0) {\n    var str = '<defs><style>';\n    var _iterator = _createForOfIteratorHelper(fontsNeeded),\n        _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var font = _step.value;\n        if (FONTS.hasOwnProperty(font)) {\n          str += \"\".concat(FONTS[font]);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    str += '</style></defs>';\n    svgString = svgString.replace(/<svg[^>]*>/, \"$&\".concat(str));\n    return svgString;\n  }\n  return svgString;\n};\nmodule.exports = inlineSvgFonts;\n })