/* 426 */\n (function(module, exports, __webpack_require__) {\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nvar SharedDispatch = __webpack_require__(944);\nvar log = __webpack_require__(39);\n/**\n * This class serves as the central broker for message dispatch. It expects to operate on the main thread / Window and\n * it must be informed of any Worker threads which will participate in the messaging system. From any context in the\n * messaging system, the dispatcher's \"call\" method can call any method on any \"service\" provided in any participating\n * context. The dispatch system will forward function arguments and return values across worker boundaries as needed.\n * @see {WorkerDispatch}\n */\nvar CentralDispatch = function (_SharedDispatch) {\n  _inherits(CentralDispatch, _SharedDispatch);\n  var _super = _createSuper(CentralDispatch);\n  function CentralDispatch() {\n    var _this;\n    _classCallCheck(this, CentralDispatch);\n    _this = _super.call(this);\n    /**\n     * Map of channel name to worker or local service provider.\n     * If the entry is a Worker, the service is provided by an object on that worker.\n     * Otherwise, the service is provided locally and methods on the service will be called directly.\n     * @see {setService}\n     * @type {object.<Worker|object>}\n     */\n    _this.services = {};\n    /**\n     * The constructor we will use to recognize workers.\n     * @type {Function}\n     */\n    _this.workerClass = typeof Worker === 'undefined' ? null : Worker;\n    /**\n     * List of workers attached to this dispatcher.\n     * @type {Array}\n     */\n    _this.workers = [];\n    return _this;\n  }\n  /**\n   * Synchronously call a particular method on a particular service provided locally.\n   * Calling this function on a remote service will fail.\n   * @param {string} service - the name of the service.\n   * @param {string} method - the name of the method.\n   * @param {*} [args] - the arguments to be copied to the method, if any.\n   * @returns {*} - the return value of the service method.\n   */\n  _createClass(CentralDispatch, [{\n    key: \"callSync\",\n    value: function callSync(service, method) {\n      var _this$_getServiceProv = this._getServiceProvider(service),\n          provider = _this$_getServiceProv.provider,\n          isRemote = _this$_getServiceProv.isRemote;\n      if (provider) {\n        if (isRemote) {\n          throw new Error(\"Cannot use 'callSync' on remote provider for service \".concat(service, \".\"));\n        }\n        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n          args[_key - 2] = arguments[_key];\n        }\n        return provider[method].apply(provider, args);\n      }\n      throw new Error(\"Provider not found for service: \".concat(service));\n    }\n    /**\n     * Synchronously set a local object as the global provider of the specified service.\n     * WARNING: Any method on the provider can be called from any worker within the dispatch system.\n     * @param {string} service - a globally unique string identifying this service. Examples: 'vm', 'gui', 'extension9'.\n     * @param {object} provider - a local object which provides this service.\n     */\n  }, {\n    key: \"setServiceSync\",\n    value: function setServiceSync(service, provider) {\n      if (this.services.hasOwnProperty(service)) {\n        log.warn(\"Central dispatch replacing existing service provider for \".concat(service));\n      }\n      this.services[service] = provider;\n    }\n    /**\n     * Set a local object as the global provider of the specified service.\n     * WARNING: Any method on the provider can be called from any worker within the dispatch system.\n     * @param {string} service - a globally unique string identifying this service. Examples: 'vm', 'gui', 'extension9'.\n     * @param {object} provider - a local object which provides this service.\n     * @returns {Promise} - a promise which will resolve once the service is registered.\n     */\n  }, {\n    key: \"setService\",\n    value: function setService(service, provider) {\n      /** Return a promise for consistency with {@link WorkerDispatch#setService} */\n      try {\n        this.setServiceSync(service, provider);\n        return Promise.resolve();\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    }\n    /**\n     * Add a worker to the message dispatch system. The worker must implement a compatible message dispatch framework.\n     * The dispatcher will immediately attempt to \"handshake\" with the worker.\n     * @param {Worker} worker - the worker to add into the dispatch system.\n     */\n  }, {\n    key: \"addWorker\",\n    value: function addWorker(worker) {\n      if (this.workers.indexOf(worker) === -1) {\n        this.workers.push(worker);\n        worker.onmessage = this._onMessage.bind(this, worker);\n        this._remoteCall(worker, 'dispatch', 'handshake').catch(function (e) {\n          log.error(\"Could not handshake with worker: \".concat(JSON.stringify(e)));\n        });\n      } else {\n        log.warn('Central dispatch ignoring attempt to add duplicate worker');\n      }\n    }\n    /**\n     * Fetch the service provider object for a particular service name.\n     * @override\n     * @param {string} service - the name of the service to look up\n     * @returns {{provider:(object|Worker), isRemote:boolean}} - the means to contact the service, if found\n     * @protected\n     */\n  }, {\n    key: \"_getServiceProvider\",\n    value: function _getServiceProvider(service) {\n      var provider = this.services[service];\n      return provider && {\n        provider: provider,\n        isRemote: Boolean(this.workerClass && provider instanceof this.workerClass)\n      };\n    }\n    /**\n     * Handle a call message sent to the dispatch service itself\n     * @override\n     * @param {Worker} worker - the worker which sent the message.\n     * @param {DispatchCallMessage} message - the message to be handled.\n     * @returns {Promise|undefined} - a promise for the results of this operation, if appropriate\n     * @protected\n     */\n  }, {\n    key: \"_onDispatchMessage\",\n    value: function _onDispatchMessage(worker, message) {\n      var promise;\n      switch (message.method) {\n        case 'setService':\n          promise = this.setService(message.args[0], worker);\n          break;\n        default:\n          log.error(\"Central dispatch received message for unknown method: \".concat(message.method));\n      }\n      return promise;\n    }\n  }]);\n  return CentralDispatch;\n}(SharedDispatch);\nmodule.exports = new CentralDispatch();\n })