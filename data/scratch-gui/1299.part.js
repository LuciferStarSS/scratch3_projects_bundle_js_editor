/* 1299 */\n (function(module, exports) {\n/**\n * Fixup svg string prior to parsing.\n * @param {!string} svgString String of the svg to fix.\n * @returns {!string} fixed svg that should be parseable.\n */\nmodule.exports = function (svgString) {\n  // Add root svg namespace if it does not exist.\n  var svgAttrs = svgString.match(/<svg [^>]*>/);\n  if (svgAttrs && svgAttrs[0].indexOf('xmlns=') === -1) {\n    svgString = svgString.replace('<svg ', '<svg xmlns=\"http://www.w3.org/2000/svg\" ');\n  } // There are some SVGs from Illustrator that use undeclared entities.\n  // Just replace those entities with fake namespace references to prevent\n  // DOMParser from crashing\n  if (svgAttrs && svgAttrs[0].indexOf('&ns_') !== -1 && svgString.indexOf('<!DOCTYPE') === -1) {\n    svgString = svgString.replace(svgAttrs[0], svgAttrs[0].replace(/&ns_[^;]+;/g, 'http://ns.adobe.com/Extensibility/1.0/'));\n  } // Some SVGs exported from Photoshop have been found to have an invalid mime type\n  // Chrome and Safari won't render these SVGs, so we correct it here\n  if (svgString.includes('data:img/png')) {\n    svgString = svgString.replace( // capture entire image tag with xlink:href=and the quote - dont capture data: bit\n    /(<image[^>]+?xlink:href=[\"'])data:img\\/png/g, // use the captured <image ..... xlink:href=\" then append the right data uri mime type\n    function ($0, $1) {\n      return \"\".concat($1, \"data:image/png\");\n    });\n  } // Some SVGs from Inkscape attempt to bind a prefix to a reserved namespace name.\n  // This will cause SVG parsing to fail, so replace these with a dummy namespace name.\n  // This namespace name is only valid for \"xml\", and if we bind \"xmlns:xml\" to the dummy namespace,\n  // parsing will fail yet again, so exclude \"xmlns:xml\" declarations.\n  var xmlnsRegex = /(<[^>]+?xmlns:(?!xml=)[^ ]+=)\"http:\\/\\/www.w3.org\\/XML\\/1998\\/namespace\"/g;\n  if (svgString.match(xmlnsRegex) !== null) {\n    svgString = svgString.replace( // capture the entire attribute\n    xmlnsRegex, // use the captured attribute name; replace only the URL\n    function ($0, $1) {\n      return \"\".concat($1, \"\\\"http://dummy.namespace\\\"\");\n    });\n  } // Strip `svg:` prefix (sometimes added by Inkscape) from all tags. They interfere with DOMPurify (prefixed tag\n  // names are not recognized) and the paint editor.\n  // This matches opening and closing tags--the capture group captures the slash if it exists, and it is reinserted\n  // in the replacement text.\n  svgString = svgString.replace(/<(\\/?)\\s*svg:/g, '<$1'); // The <metadata> element is not needed for rendering and sometimes contains\n  // unparseable garbage from Illustrator :( Empty out the contents.\n  // Note: [\\s\\S] matches everything including newlines, which .* does not\n  svgString = svgString.replace(/<metadata>[\\s\\S]*<\\/metadata>/, '<metadata></metadata>'); // Empty script tags and javascript executing\n  svgString = svgString.replace(/<script[\\s\\S]*>[\\s\\S]*<\\/script>/, '<script></script>');\n  return svgString;\n};\n })