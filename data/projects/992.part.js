/* 992 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nvar injectIntl = __webpack_require__(4).injectIntl;\nvar PropTypes = __webpack_require__(1);\nvar intlShape = __webpack_require__(4).intlShape;\nvar FormattedMessage = __webpack_require__(4).FormattedMessage;\nvar MediaQuery = __webpack_require__(60).default;\nvar React = __webpack_require__(0);\nvar Formsy = __webpack_require__(270).default;\nvar classNames = __webpack_require__(5);\nvar GUI = __webpack_require__(557).default;\nvar IntlGUI = injectIntl(GUI);\nvar AdminPanel = __webpack_require__(578);\nvar decorateText = __webpack_require__(754);\nvar FlexRow = __webpack_require__(12);\nvar Button = __webpack_require__(15);\nvar Avatar = __webpack_require__(40);\nvar Banner = __webpack_require__(984);\nvar CensoredMessage = __webpack_require__(985);\nvar ModInfo = __webpack_require__(991);\nvar RemixCredit = __webpack_require__(994);\nvar RemixList = __webpack_require__(995);\nvar Stats = __webpack_require__(996);\nvar StudioList = __webpack_require__(997);\nvar Subactions = __webpack_require__(998);\nvar InplaceInput = __webpack_require__(752);\nvar ToggleSlider = __webpack_require__(912);\nvar TopLevelComment = __webpack_require__(987);\nvar ComposeComment = __webpack_require__(755);\nvar ExtensionChip = __webpack_require__(989);\nvar thumbnailUrl = __webpack_require__(248);\nvar FormsyProjectUpdater = __webpack_require__(990);\nvar projectShape = __webpack_require__(255).projectShape;\n__webpack_require__(1433);\nvar frameless = __webpack_require__(54);\n// disable enter key submission on formsy input fields; otherwise formsy thinks\n// we meant to trigger the \"See inside\" button. Instead, treat these keypresses\n// as a blur, which will trigger a save.\nvar onKeyPress = function onKeyPress(e) {\n    if (e.target.type === 'text' && e.which === 13 /* Enter */) {\n            e.preventDefault();\n            e.target.blur();\n        }\n};\nvar PreviewPresentation = function PreviewPresentation(_ref) {\n    var addToStudioOpen = _ref.addToStudioOpen,\n        adminModalOpen = _ref.adminModalOpen,\n        adminPanelOpen = _ref.adminPanelOpen,\n        assetHost = _ref.assetHost,\n        authorUsername = _ref.authorUsername,\n        backpackHost = _ref.backpackHost,\n        canAddToStudio = _ref.canAddToStudio,\n        canDeleteComments = _ref.canDeleteComments,\n        canRemix = _ref.canRemix,\n        canReport = _ref.canReport,\n        canRestoreComments = _ref.canRestoreComments,\n        canSave = _ref.canSave,\n        canShare = _ref.canShare,\n        canToggleComments = _ref.canToggleComments,\n        canUseBackpack = _ref.canUseBackpack,\n        cloudHost = _ref.cloudHost,\n        comments = _ref.comments,\n        editable = _ref.editable,\n        extensions = _ref.extensions,\n        faved = _ref.faved,\n        favoriteCount = _ref.favoriteCount,\n        intl = _ref.intl,\n        isAdmin = _ref.isAdmin,\n        isFullScreen = _ref.isFullScreen,\n        isLoggedIn = _ref.isLoggedIn,\n        isNewScratcher = _ref.isNewScratcher,\n        isProjectLoaded = _ref.isProjectLoaded,\n        isRemixing = _ref.isRemixing,\n        isScratcher = _ref.isScratcher,\n        isShared = _ref.isShared,\n        justRemixed = _ref.justRemixed,\n        justShared = _ref.justShared,\n        loveCount = _ref.loveCount,\n        loved = _ref.loved,\n        modInfo = _ref.modInfo,\n        moreCommentsToLoad = _ref.moreCommentsToLoad,\n        onAddComment = _ref.onAddComment,\n        onAddToStudioClicked = _ref.onAddToStudioClicked,\n        onAddToStudioClosed = _ref.onAddToStudioClosed,\n        onCloseAdminPanel = _ref.onCloseAdminPanel,\n        onDeleteComment = _ref.onDeleteComment,\n        onFavoriteClicked = _ref.onFavoriteClicked,\n        onGreenFlag = _ref.onGreenFlag,\n        onLoadMore = _ref.onLoadMore,\n        onLoadMoreReplies = _ref.onLoadMoreReplies,\n        onLoveClicked = _ref.onLoveClicked,\n        onOpenAdminPanel = _ref.onOpenAdminPanel,\n        onProjectLoaded = _ref.onProjectLoaded,\n        onRemix = _ref.onRemix,\n        onRemixing = _ref.onRemixing,\n        onReportClicked = _ref.onReportClicked,\n        onReportClose = _ref.onReportClose,\n        onReportComment = _ref.onReportComment,\n        onReportSubmit = _ref.onReportSubmit,\n        onRestoreComment = _ref.onRestoreComment,\n        onSeeAllComments = _ref.onSeeAllComments,\n        onSeeInside = _ref.onSeeInside,\n        onSetProjectThumbnailer = _ref.onSetProjectThumbnailer,\n        onShare = _ref.onShare,\n        onSocialClicked = _ref.onSocialClicked,\n        onSocialClosed = _ref.onSocialClosed,\n        onToggleComments = _ref.onToggleComments,\n        onToggleStudio = _ref.onToggleStudio,\n        onUpdateProjectData = _ref.onUpdateProjectData,\n        onUpdateProjectId = _ref.onUpdateProjectId,\n        onUpdateProjectThumbnail = _ref.onUpdateProjectThumbnail,\n        originalInfo = _ref.originalInfo,\n        parentInfo = _ref.parentInfo,\n        showCloudDataAlert = _ref.showCloudDataAlert,\n        showUsernameBlockAlert = _ref.showUsernameBlockAlert,\n        projectHost = _ref.projectHost,\n        projectId = _ref.projectId,\n        projectInfo = _ref.projectInfo,\n        projectStudios = _ref.projectStudios,\n        remixes = _ref.remixes,\n        replies = _ref.replies,\n        reportOpen = _ref.reportOpen,\n        showAdminPanel = _ref.showAdminPanel,\n        showModInfo = _ref.showModInfo,\n        singleCommentId = _ref.singleCommentId,\n        socialOpen = _ref.socialOpen,\n        userOwnsProject = _ref.userOwnsProject,\n        visibilityInfo = _ref.visibilityInfo;\n    var shareDate = projectInfo.history && projectInfo.history.shared ? projectInfo.history.shared : '';\n    var revisedDate = projectInfo.history && projectInfo.history.modified ? projectInfo.history.modified : '';\n    var showInstructions = editable || projectInfo.instructions || !projectInfo.instructions && !projectInfo.description; // show if both are empty\n    var showNotesAndCredits = editable || projectInfo.description || !projectInfo.instructions && !projectInfo.description; // show if both are empty\n    var banner = void 0;\n    if (visibilityInfo.deleted) {\n        // If both censored and deleted, prioritize deleted banner\n        banner = React.createElement(Banner, {\n            className: 'banner-danger',\n            message: React.createElement(FormattedMessage, { id: 'project.deletedBanner' })\n        });\n    } else if (visibilityInfo.censored) {\n        var censoredMessage = React.createElement(CensoredMessage, {\n            censoredByCommunity: visibilityInfo.censoredByCommunity,\n            messageHTML: visibilityInfo.message,\n            reshareable: visibilityInfo.reshareable\n        });\n        banner = React.createElement(Banner, {\n            className: 'banner-danger',\n            message: censoredMessage\n        });\n    } else if (justRemixed) {\n        banner = React.createElement(Banner, {\n            className: 'banner-success',\n            message: React.createElement(FormattedMessage, {\n                id: 'project.remix.justRemixed',\n                values: { title: projectInfo.title }\n            })\n        });\n    } else if (canShare) {\n        if (isShared && justShared) {\n            // if was shared a while ago, don't show any share banner\n            if (isNewScratcher) {\n                banner = React.createElement(Banner, {\n                    className: 'banner-success',\n                    message: React.createElement(FormattedMessage, { id: 'project.share.sharedLong' })\n                });\n            } else {\n                banner = React.createElement(Banner, {\n                    className: 'banner-success',\n                    message: React.createElement(FormattedMessage, { id: 'project.share.sharedShort' })\n                });\n            }\n        } else if (!isShared) {\n            banner = React.createElement(Banner, {\n                actionMessage: React.createElement(FormattedMessage, { id: 'project.share.shareButton' }),\n                message: React.createElement(FormattedMessage, { id: 'project.share.notShared' }),\n                onAction: onShare\n            });\n        }\n    }\n    var extensionChips = React.createElement(\n        FlexRow,\n        { className: 'extension-list' },\n        extensions && extensions.map(function (extension) {\n            return React.createElement(ExtensionChip, {\n                action: extension.action,\n                extensionL10n: extension.l10nId,\n                extensionName: extension.name,\n                hasStatus: extension.hasStatus,\n                iconURI: extension.icon && '/svgs/project/' + extension.icon,\n                key: extension.name || extension.l10nId\n            });\n        })\n    );\n    return React.createElement(\n        'div',\n        { className: 'preview' },\n        showAdminPanel && React.createElement(\n            AdminPanel,\n            {\n                className: classNames('project-admin-panel', {\n                    'admin-panel-open': adminPanelOpen,\n                    'modal-open': adminModalOpen\n                }),\n                isOpen: adminPanelOpen,\n                onClose: onCloseAdminPanel,\n                onOpen: onOpenAdminPanel\n            },\n            React.createElement('iframe', {\n                className: classNames('admin-iframe', {\n                    'modal-open': adminModalOpen\n                }),\n                src: '/scratch2/' + projectId + '/adminpanel/'\n            })\n        ),\n        projectInfo && projectInfo.author && projectInfo.author.id && React.createElement(\n            React.Fragment,\n            null,\n            banner,\n            React.createElement(\n                'div',\n                { className: 'inner' },\n                React.createElement(\n                    FlexRow,\n                    { className: 'preview-row force-row' },\n                    React.createElement(\n                        FlexRow,\n                        { className: 'project-header' },\n                        React.createElement(\n                            'a',\n                            { href: '/users/' + projectInfo.author.username },\n                            React.createElement(Avatar, {\n                                alt: projectInfo.author.username,\n                                src: thumbnailUrl(projectInfo.author.id, 48)\n                            })\n                        ),\n                        React.createElement(\n                            'div',\n                            { className: 'title' },\n                            editable ? React.createElement(\n                                FormsyProjectUpdater,\n                                {\n                                    field: 'title',\n                                    initialValue: projectInfo.title\n                                },\n                                function (value, ref, handleUpdate) {\n                                    return React.createElement(\n                                        Formsy,\n                                        {\n                                            ref: ref,\n                                            onKeyPress: onKeyPress\n                                        },\n                                        React.createElement(InplaceInput, {\n                                            className: 'project-title',\n                                            handleUpdate: handleUpdate,\n                                            name: 'title',\n                                            validationErrors: {\n                                                maxLength: intl.formatMessage({\n                                                    id: 'project.titleMaxLength'\n                                                })\n                                            },\n                                            validations: {\n                                                maxLength: 100\n                                            },\n                                            value: value\n                                        })\n                                    );\n                                }\n                            ) : React.createElement(\n                                React.Fragment,\n                                null,\n                                React.createElement(\n                                    'div',\n                                    {\n                                        className: 'project-title no-edit',\n                                        title: projectInfo.title\n                                    },\n                                    projectInfo.title\n                                ),\n                                'by ',\n                                React.createElement(\n                                    'a',\n                                    { href: '/users/' + projectInfo.author.username },\n                                    projectInfo.author.username\n                                )\n                            )\n                        )\n                    ),\n                    React.createElement(\n                        MediaQuery,\n                        { minWidth: frameless.mobile },\n                        React.createElement(\n                            'div',\n                            { className: 'project-buttons' },\n                            canRemix && React.createElement(\n                                Button,\n                                {\n                                    alt: intl.formatMessage({ id: 'project.remixButton.altText' }),\n                                    className: classNames(['remix-button', {\n                                        disabled: isRemixing || !isProjectLoaded,\n                                        remixing: isRemixing\n                                    }]),\n                                    disabled: isRemixing || !isProjectLoaded,\n                                    title: intl.formatMessage({ id: 'project.remixButton.altText' }),\n                                    onClick: onRemix\n                                },\n                                isRemixing ? React.createElement(FormattedMessage, { id: 'project.remixButton.remixing' }) : React.createElement(FormattedMessage, { id: 'project.remixButton' })\n                            ),\n                            React.createElement(\n                                Button,\n                                {\n                                    className: 'button see-inside-button',\n                                    onClick: onSeeInside\n                                },\n                                React.createElement(FormattedMessage, { id: 'project.seeInsideButton' })\n                            )\n                        )\n                    )\n                ),\n                React.createElement(\n                    FlexRow,\n                    { className: 'preview-row' },\n                    React.createElement(\n                        'div',\n                        {\n                            className: classNames('guiPlayer', { fullscreen: isFullScreen })\n                        },\n                        showCloudDataAlert && React.createElement(\n                            FlexRow,\n                            { className: 'project-info-alert' },\n                            React.createElement(FormattedMessage, { id: 'project.cloudDataAlert' })\n                        ),\n                        showUsernameBlockAlert && React.createElement(\n                            FlexRow,\n                            { className: 'project-info-alert' },\n                            React.createElement(FormattedMessage, { id: 'project.usernameBlockAlert' })\n                        ),\n                        React.createElement(IntlGUI, {\n                            isPlayerOnly: true,\n                            assetHost: assetHost,\n                            backpackHost: backpackHost,\n                            backpackVisible: canUseBackpack,\n                            basePath: '/',\n                            canRemix: canRemix,\n                            canSave: canSave,\n                            className: 'guiPlayer',\n                            cloudHost: cloudHost,\n                            hasCloudPermission: isScratcher,\n                            isFullScreen: isFullScreen,\n                            previewInfoVisible: 'false',\n                            projectHost: projectHost,\n                            projectId: projectId,\n                            onGreenFlag: onGreenFlag,\n                            onProjectLoaded: onProjectLoaded,\n                            onRemixing: onRemixing,\n                            onSetProjectThumbnailer: onSetProjectThumbnailer,\n                            onUpdateProjectData: onUpdateProjectData,\n                            onUpdateProjectId: onUpdateProjectId,\n                            onUpdateProjectThumbnail: onUpdateProjectThumbnail\n                        })\n                    ),\n                    React.createElement(\n                        MediaQuery,\n                        { maxWidth: frameless.tabletPortrait - 1 },\n                        React.createElement(\n                            FlexRow,\n                            { className: 'preview-row force-center' },\n                            React.createElement(\n                                'div',\n                                { className: 'wrappable-item' },\n                                React.createElement(Stats, {\n                                    faved: faved,\n                                    favoriteCount: favoriteCount,\n                                    loveCount: loveCount,\n                                    loved: loved,\n                                    projectInfo: projectInfo,\n                                    onFavoriteClicked: onFavoriteClicked,\n                                    onLoveClicked: onLoveClicked\n                                })\n                            ),\n                            React.createElement(\n                                'div',\n                                { className: 'wrappable-item' },\n                                React.createElement(Subactions, {\n                                    addToStudioOpen: addToStudioOpen,\n                                    canReport: canReport,\n                                    isAdmin: isAdmin,\n                                    isShared: isShared,\n                                    projectInfo: projectInfo,\n                                    reportOpen: reportOpen,\n                                    shareDate: shareDate,\n                                    socialOpen: socialOpen,\n                                    userOwnsProject: userOwnsProject,\n                                    onAddToStudioClicked: onAddToStudioClicked,\n                                    onAddToStudioClosed: onAddToStudioClosed,\n                                    onReportClicked: onReportClicked,\n                                    onReportClose: onReportClose,\n                                    onReportSubmit: onReportSubmit,\n                                    onSocialClicked: onSocialClicked,\n                                    onSocialClosed: onSocialClosed,\n                                    onToggleStudio: onToggleStudio\n                                })\n                            )\n                        )\n                    ),\n                    React.createElement(\n                        FlexRow,\n                        { className: 'project-notes' },\n                        React.createElement(RemixCredit, { projectInfo: parentInfo }),\n                        React.createElement(RemixCredit, { projectInfo: originalInfo }),\n                        React.createElement(\n                            MediaQuery,\n                            { maxWidth: frameless.tabletPortrait - 1 },\n                            extensions && extensions.length ? React.createElement(\n                                FlexRow,\n                                { className: 'preview-row' },\n                                extensionChips\n                            ) : null\n                        ),\n                        showInstructions && React.createElement(\n                            'div',\n                            { className: 'description-block' },\n                            React.createElement(\n                                'div',\n                                { className: 'project-textlabel' },\n                                React.createElement(FormattedMessage, { id: 'project.instructionsLabel' })\n                            ),\n                            editable ? React.createElement(\n                                FormsyProjectUpdater,\n                                {\n                                    field: 'instructions',\n                                    initialValue: projectInfo.instructions\n                                },\n                                function (value, ref, handleUpdate) {\n                                    return React.createElement(\n                                        Formsy,\n                                        {\n                                            className: 'project-description-form',\n                                            ref: ref,\n                                            onKeyPress: onKeyPress\n                                        },\n                                        React.createElement(InplaceInput, {\n                                            className: classNames('project-description-edit', { remixes: parentInfo && parentInfo.author }),\n                                            handleUpdate: handleUpdate,\n                                            name: 'instructions',\n                                            placeholder: intl.formatMessage({\n                                                id: 'project.descriptionPlaceholder'\n                                            }),\n                                            type: 'textarea',\n                                            validationErrors: {\n                                                maxLength: intl.formatMessage({\n                                                    id: 'project.descriptionMaxLength'\n                                                })\n                                            },\n                                            validations: {\n                                                maxLength: 5000\n                                            },\n                                            value: value\n                                        })\n                                    );\n                                }\n                            ) : React.createElement(\n                                'div',\n                                { className: 'project-description' },\n                                decorateText(projectInfo.instructions, {\n                                    usernames: true,\n                                    hashtags: true,\n                                    scratchLinks: true\n                                })\n                            )\n                        ),\n                        showNotesAndCredits && React.createElement(\n                            'div',\n                            { className: 'description-block' },\n                            React.createElement(\n                                'div',\n                                { className: 'project-textlabel' },\n                                React.createElement(FormattedMessage, { id: 'project.notesAndCreditsLabel' })\n                            ),\n                            editable ? React.createElement(\n                                FormsyProjectUpdater,\n                                {\n                                    field: 'description',\n                                    initialValue: projectInfo.description\n                                },\n                                function (value, ref, handleUpdate) {\n                                    return React.createElement(\n                                        Formsy,\n                                        {\n                                            className: 'project-description-form',\n                                            ref: ref,\n                                            onKeyPress: onKeyPress\n                                        },\n                                        React.createElement(InplaceInput, {\n                                            className: classNames('project-description-edit', 'last', { remixes: parentInfo && parentInfo.author }),\n                                            handleUpdate: handleUpdate,\n                                            name: 'description',\n                                            placeholder: intl.formatMessage({\n                                                id: 'project.notesPlaceholder'\n                                            }),\n                                            type: 'textarea',\n                                            validationErrors: {\n                                                maxLength: intl.formatMessage({\n                                                    id: 'project.descriptionMaxLength'\n                                                })\n                                            },\n                                            validations: {\n                                                maxLength: 5000\n                                            },\n                                            value: value\n                                        })\n                                    );\n                                }\n                            ) : React.createElement(\n                                'div',\n                                { className: 'project-description' },\n                                decorateText(projectInfo.description, {\n                                    usernames: true,\n                                    hashtags: true,\n                                    scratchLinks: true\n                                })\n                            )\n                        )\n                    )\n                ),\n                React.createElement(\n                    MediaQuery,\n                    { minWidth: frameless.tabletPortrait },\n                    React.createElement(\n                        FlexRow,\n                        { className: 'preview-row' },\n                        React.createElement(Stats, {\n                            faved: faved,\n                            favoriteCount: favoriteCount,\n                            loveCount: loveCount,\n                            loved: loved,\n                            projectInfo: projectInfo,\n                            onFavoriteClicked: onFavoriteClicked,\n                            onLoveClicked: onLoveClicked\n                        }),\n                        React.createElement(Subactions, {\n                            addToStudioOpen: addToStudioOpen,\n                            canAddToStudio: canAddToStudio,\n                            canReport: canReport,\n                            isAdmin: isAdmin,\n                            isShared: isShared,\n                            projectInfo: projectInfo,\n                            reportOpen: reportOpen,\n                            shareDate: shareDate,\n                            socialOpen: socialOpen,\n                            userOwnsProject: userOwnsProject,\n                            onAddToStudioClicked: onAddToStudioClicked,\n                            onAddToStudioClosed: onAddToStudioClosed,\n                            onReportClicked: onReportClicked,\n                            onReportClose: onReportClose,\n                            onReportSubmit: onReportSubmit,\n                            onSocialClicked: onSocialClicked,\n                            onSocialClosed: onSocialClosed,\n                            onToggleStudio: onToggleStudio\n                        })\n                    )\n                ),\n                React.createElement(\n                    MediaQuery,\n                    { minWidth: frameless.tabletPortrait },\n                    extensions && extensions.length ? React.createElement(\n                        FlexRow,\n                        { className: 'preview-row' },\n                        extensionChips\n                    ) : null\n                ),\n                showModInfo && React.createElement(\n                    FlexRow,\n                    { className: 'preview-row' },\n                    React.createElement(ModInfo, {\n                        authorUsername: authorUsername,\n                        revisedDate: revisedDate,\n                        scripts: modInfo.scriptCount,\n                        sprites: modInfo.spriteCount\n                    })\n                )\n            ),\n            React.createElement(\n                'div',\n                { className: 'project-lower-container' },\n                React.createElement(\n                    'div',\n                    { className: 'inner' },\n                    React.createElement(\n                        FlexRow,\n                        { className: 'preview-row' },\n                        React.createElement(\n                            'div',\n                            { className: 'comments-container' },\n                            React.createElement(\n                                FlexRow,\n                                { className: 'comments-header' },\n                                React.createElement(\n                                    'h4',\n                                    null,\n                                    React.createElement(FormattedMessage, { id: 'project.comments.header' })\n                                ),\n                                canToggleComments ? React.createElement(\n                                    'div',\n                                    null,\n                                    projectInfo.comments_allowed ? React.createElement(FormattedMessage, { id: 'project.comments.toggleOn' }) : React.createElement(FormattedMessage, { id: 'project.comments.toggleOff' }),\n                                    React.createElement(ToggleSlider, {\n                                        checked: projectInfo.comments_allowed,\n                                        className: 'comments-allowed-input',\n                                        onChange: onToggleComments\n                                    })\n                                ) : null\n                            ),\n                            !singleCommentId && React.createElement(\n                                FlexRow,\n                                { className: 'comments-root-reply' },\n                                projectInfo.comments_allowed ? isLoggedIn ? isShared && React.createElement(ComposeComment, {\n                                    projectId: projectId,\n                                    onAddComment: onAddComment\n                                }) :\n                                /* TODO add box for signing in to leave a comment */\n                                null : React.createElement(\n                                    'div',\n                                    { className: 'comments-turned-off' },\n                                    React.createElement(FormattedMessage, { id: 'project.comments.turnedOff' })\n                                )\n                            ),\n                            React.createElement(\n                                FlexRow,\n                                { className: 'comments-list' },\n                                comments.map(function (comment) {\n                                    return React.createElement(TopLevelComment, {\n                                        author: comment.author,\n                                        canDelete: canDeleteComments,\n                                        canDeleteWithoutConfirm: isAdmin,\n                                        canReply: isLoggedIn && projectInfo.comments_allowed && isShared,\n                                        canReport: isLoggedIn,\n                                        canRestore: canRestoreComments,\n                                        content: comment.content,\n                                        datetimeCreated: comment.datetime_created,\n                                        defaultExpanded: !!singleCommentId,\n                                        highlightedCommentId: singleCommentId,\n                                        id: comment.id,\n                                        key: comment.id,\n                                        moreRepliesToLoad: comment.moreRepliesToLoad,\n                                        parentId: comment.parent_id,\n                                        projectId: projectId,\n                                        replies: replies && replies[comment.id] ? replies[comment.id] : [],\n                                        visibility: comment.visibility,\n                                        onAddComment: onAddComment,\n                                        onDelete: onDeleteComment,\n                                        onLoadMoreReplies: onLoadMoreReplies,\n                                        onReport: onReportComment,\n                                        onRestore: onRestoreComment\n                                    });\n                                }),\n                                moreCommentsToLoad && React.createElement(\n                                    Button,\n                                    {\n                                        className: 'button load-more-button',\n                                        onClick: onLoadMore\n                                    },\n                                    React.createElement(FormattedMessage, { id: 'general.loadMore' })\n                                ),\n                                !!singleCommentId && React.createElement(\n                                    Button,\n                                    {\n                                        className: 'button load-more-button',\n                                        onClick: onSeeAllComments\n                                    },\n                                    React.createElement(FormattedMessage, { id: 'general.seeAllComments' })\n                                )\n                            )\n                        ),\n                        React.createElement(\n                            FlexRow,\n                            { className: 'column' },\n                            React.createElement(RemixList, {\n                                projectId: projectId,\n                                remixes: remixes\n                            }),\n                            React.createElement(StudioList, {\n                                projectId: projectId,\n                                studios: projectStudios\n                            })\n                        )\n                    )\n                )\n            )\n        )\n    );\n};\nPreviewPresentation.propTypes = {\n    addToStudioOpen: PropTypes.bool,\n    adminModalOpen: PropTypes.bool,\n    adminPanelOpen: PropTypes.bool,\n    assetHost: PropTypes.string,\n    authorUsername: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    backpackHost: PropTypes.string,\n    canAddToStudio: PropTypes.bool,\n    canDeleteComments: PropTypes.bool,\n    canRemix: PropTypes.bool,\n    canReport: PropTypes.bool,\n    canRestoreComments: PropTypes.bool,\n    canSave: PropTypes.bool,\n    canShare: PropTypes.bool,\n    canToggleComments: PropTypes.bool,\n    canUseBackpack: PropTypes.bool,\n    cloudHost: PropTypes.string,\n    comments: PropTypes.arrayOf(PropTypes.object),\n    editable: PropTypes.bool,\n    extensions: PropTypes.arrayOf(PropTypes.object),\n    faved: PropTypes.bool,\n    favoriteCount: PropTypes.number,\n    intl: intlShape,\n    isAdmin: PropTypes.bool,\n    isFullScreen: PropTypes.bool,\n    isLoggedIn: PropTypes.bool,\n    isNewScratcher: PropTypes.bool,\n    isProjectLoaded: PropTypes.bool,\n    isRemixing: PropTypes.bool,\n    isScratcher: PropTypes.bool,\n    isShared: PropTypes.bool,\n    justRemixed: PropTypes.bool,\n    justShared: PropTypes.bool,\n    loveCount: PropTypes.number,\n    loved: PropTypes.bool,\n    modInfo: PropTypes.shape({\n        scriptCount: PropTypes.number,\n        spriteCount: PropTypes.number\n    }),\n    moreCommentsToLoad: PropTypes.bool,\n    onAddComment: PropTypes.func,\n    onAddToStudioClicked: PropTypes.func,\n    onAddToStudioClosed: PropTypes.func,\n    onCloseAdminPanel: PropTypes.func,\n    onDeleteComment: PropTypes.func,\n    onFavoriteClicked: PropTypes.func,\n    onGreenFlag: PropTypes.func,\n    onLoadMore: PropTypes.func,\n    onLoadMoreReplies: PropTypes.func,\n    onLoveClicked: PropTypes.func,\n    onOpenAdminPanel: PropTypes.func,\n    onProjectLoaded: PropTypes.func,\n    onRemix: PropTypes.func,\n    onRemixing: PropTypes.func,\n    onReportClicked: PropTypes.func.isRequired,\n    onReportClose: PropTypes.func.isRequired,\n    onReportComment: PropTypes.func.isRequired,\n    onReportSubmit: PropTypes.func.isRequired,\n    onRestoreComment: PropTypes.func,\n    onSeeAllComments: PropTypes.func,\n    onSeeInside: PropTypes.func,\n    onSetProjectThumbnailer: PropTypes.func,\n    onShare: PropTypes.func,\n    onSocialClicked: PropTypes.func,\n    onSocialClosed: PropTypes.func,\n    onToggleComments: PropTypes.func,\n    onToggleStudio: PropTypes.func,\n    onUpdateProjectData: PropTypes.func,\n    onUpdateProjectId: PropTypes.func,\n    onUpdateProjectThumbnail: PropTypes.func,\n    originalInfo: projectShape,\n    parentInfo: projectShape,\n    projectHost: PropTypes.string,\n    projectId: PropTypes.string,\n    projectInfo: projectShape,\n    projectStudios: PropTypes.arrayOf(PropTypes.object),\n    remixes: PropTypes.arrayOf(PropTypes.object),\n    replies: PropTypes.objectOf(PropTypes.array),\n    reportOpen: PropTypes.bool,\n    showAdminPanel: PropTypes.bool,\n    showCloudDataAlert: PropTypes.bool,\n    showModInfo: PropTypes.bool,\n    showUsernameBlockAlert: PropTypes.bool,\n    singleCommentId: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),\n    socialOpen: PropTypes.bool,\n    userOwnsProject: PropTypes.bool,\n    visibilityInfo: PropTypes.shape({\n        censored: PropTypes.bool,\n        censoredByAdmin: PropTypes.bool,\n        censoredByCommunity: PropTypes.bool,\n        message: PropTypes.string,\n        deleted: PropTypes.bool,\n        reshareable: PropTypes.bool\n    })\n};\nmodule.exports = injectIntl(PreviewPresentation);\n// ./src/views/preview/presentation.jsx\n// module id = 992\n// module chunks = 0\n//# sourceURL=scratch:///./src/views/preview/presentation.jsx?");
 })