/* 903 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nvar BuiltinHelper = __webpack_require__(901);\nvar LocalHelper = __webpack_require__(902);\nvar WebHelper = __webpack_require__(904);\nvar _Asset = __webpack_require__(550);\nvar _AssetType = __webpack_require__(751);\nvar _DataFormat = __webpack_require__(576);\nvar ScratchStorage = function () {\n    function ScratchStorage() {\n        _classCallCheck(this, ScratchStorage);\n        this.defaultAssetId = {};\n        this.builtinHelper = new BuiltinHelper(this);\n        this.webHelper = new WebHelper(this);\n        this.localHelper = new LocalHelper(this);\n        this.builtinHelper.registerDefaultAssets(this);\n    }\n    /**\n     * @return {Asset} - the `Asset` class constructor.\n     * @constructor\n     */\n    _createClass(ScratchStorage, [{\n        key: 'get',\n        /**\n         * Synchronously fetch a cached asset from built-in storage. Assets are cached when they are loaded.\n         * @param {string} assetId - The id of the asset to fetch.\n         * @returns {?Asset} The asset, if it exists.\n         */\n        value: function get(assetId) {\n            return this.builtinHelper.get(assetId);\n        }\n        /**\n         * Cache an asset for future lookups by ID.\n         * @param {AssetType} assetType - The type of the asset to cache.\n         * @param {DataFormat} dataFormat - The dataFormat of the data for the cached asset.\n         * @param {Buffer} data - The data for the cached asset.\n         * @param {string} id - The id for the cached asset.\n         * @returns {string} The calculated id of the cached asset, or the supplied id if the asset is mutable.\n         */\n    }, {\n        key: 'cache',\n        value: function cache(assetType, dataFormat, data, id) {\n            return this.builtinHelper.cache(assetType, dataFormat, data, id);\n        }\n        /**\n         * Register a web-based source for assets. Sources will be checked in order of registration.\n         * @param {Array.<AssetType>} types - The types of asset provided by this source.\n         * @param {UrlFunction} urlFunction - A function which computes a URL from an Asset.\n         */\n    }, {\n        key: 'addWebSource',\n        value: function addWebSource(types, urlFunction) {\n            this.webHelper.addSource(types, urlFunction);\n        }\n        /**\n         * TODO: Should this be removed in favor of requesting an asset with `null` as the ID?\n         * @param {AssetType} type - Get the default ID for assets of this type.\n         * @return {?string} The ID of the default asset of the given type, if any.\n         */\n    }, {\n        key: 'getDefaultAssetId',\n        value: function getDefaultAssetId(type) {\n            if (this.defaultAssetId.hasOwnProperty(type.name)) {\n                return this.defaultAssetId[type.name];\n            }\n        }\n        /**\n         * Set the default ID for a particular type of asset. This default asset will be used if a requested asset cannot\n         * be found and automatic fallback is enabled. Ideally this should be an asset that is available locally or even\n         * one built into this module.\n         * TODO: Should this be removed in favor of requesting an asset with `null` as the ID?\n         * @param {AssetType} type - The type of asset for which the default will be set.\n         * @param {string} id - The default ID to use for this type of asset.\n         */\n    }, {\n        key: 'setDefaultAssetId',\n        value: function setDefaultAssetId(type, id) {\n            this.defaultAssetId[type.name] = id;\n        }\n        /**\n         * Fetch an asset by type & ID.\n         * @param {AssetType} assetType - The type of asset to fetch. This also determines which asset store to use.\n         * @param {string} assetId - The ID of the asset to fetch: a project ID, MD5, etc.\n         * @param {DataFormat} [dataFormat] - Optional: load this format instead of the AssetType's default.\n         * @return {Promise.<Asset>} A promise for the requested Asset.\n         *   If the promise is fulfilled with non-null, the value is the requested asset or a fallback.\n         *   If the promise is fulfilled with null, the desired asset could not be found with the current asset sources.\n         *   If the promise is rejected, there was an error on at least one asset source. HTTP 404 does not count as an\n         *   error here, but (for example) HTTP 403 does.\n         */\n    }, {\n        key: 'load',\n        value: function load(assetType, assetId, dataFormat) {\n            var _this = this;\n            /** @type {Helper[]} */\n            var helpers = [this.builtinHelper, this.localHelper, this.webHelper];\n            var errors = [];\n            var helperIndex = 0;\n            dataFormat = dataFormat || assetType.runtimeFormat;\n            return new Promise(function (fulfill, reject) {\n                var tryNextHelper = function tryNextHelper() {\n                    if (helperIndex < helpers.length) {\n                        var helper = helpers[helperIndex++];\n                        helper.load(assetType, assetId, dataFormat).then(function (asset) {\n                            if (asset === null) {\n                                tryNextHelper();\n                            } else {\n                                // TODO? this.localHelper.cache(assetType, assetId, asset);\n                                if (helper !== _this.builtinHelper && assetType.immutable) {\n                                    asset.assetId = _this.builtinHelper.cache(assetType, asset.dataFormat, asset.data, assetId);\n                                }\n                                // Note that other attempts may have caused errors, effectively suppressed here.\n                                fulfill(asset);\n                            }\n                        }, function (error) {\n                            errors.push(error);\n                            // TODO: maybe some types of error should prevent trying the next helper?\n                            tryNextHelper();\n                        });\n                    } else if (errors.length === 0) {\n                        // Nothing went wrong but we couldn't find the asset.\n                        fulfill(null);\n                    } else {\n                        // At least one thing went wrong and also we couldn't find the asset.\n                        reject(errors);\n                    }\n                };\n                tryNextHelper();\n            });\n        }\n    }, {\n        key: 'Asset',\n        get: function get() {\n            return _Asset;\n        }\n        /**\n         * @return {AssetType} - the list of supported asset types.\n         * @constructor\n         */\n    }, {\n        key: 'AssetType',\n        get: function get() {\n            return _AssetType;\n        }\n        /**\n         * @return {DataFormat} - the list of supported data formats.\n         * @constructor\n         */\n    }, {\n        key: 'DataFormat',\n        get: function get() {\n            return _DataFormat;\n        }\n        /**\n         * @deprecated Please use the `Asset` member of a storage instance instead.\n         * @return {Asset} - the `Asset` class constructor.\n         * @constructor\n         */\n    }], [{\n        key: 'Asset',\n        get: function get() {\n            return _Asset;\n        }\n        /**\n         * @deprecated Please use the `AssetType` member of a storage instance instead.\n         * @return {AssetType} - the list of supported asset types.\n         * @constructor\n         */\n    }, {\n        key: 'AssetType',\n        get: function get() {\n            return _AssetType;\n        }\n    }]);\n    return ScratchStorage;\n}();\nmodule.exports = ScratchStorage;\n// ./~/scratch-storage/src/ScratchStorage.js\n// module id = 903\n// module chunks = 0\n//# sourceURL=scratch:///./~/scratch-storage/src/ScratchStorage.js?");
 })