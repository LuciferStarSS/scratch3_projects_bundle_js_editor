/* 586 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\nvar bindAll = __webpack_require__(9);\nvar React = __webpack_require__(0);\nvar PropTypes = __webpack_require__(1);\nvar FormattedMessage = __webpack_require__(4).FormattedMessage;\nvar _require = __webpack_require__(4),\n    injectIntl = _require.injectIntl,\n    intlShape = _require.intlShape;\nvar JoinFlowStep = __webpack_require__(190);\n__webpack_require__(197);\nvar RegistrationErrorStep = function (_React$Component) {\n    _inherits(RegistrationErrorStep, _React$Component);\n    function RegistrationErrorStep(props) {\n        _classCallCheck(this, RegistrationErrorStep);\n        var _this = _possibleConstructorReturn(this, (RegistrationErrorStep.__proto__ || Object.getPrototypeOf(RegistrationErrorStep)).call(this, props));\n        bindAll(_this, ['handleSubmit']);\n        return _this;\n    }\n    _createClass(RegistrationErrorStep, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            if (this.props.sendAnalytics) {\n                this.props.sendAnalytics('join-error');\n            }\n        }\n    }, {\n        key: 'handleSubmit',\n        value: function handleSubmit(e) {\n            // JoinFlowStep includes a <form> that handles a submit action.\n            // But here, we're not really submitting, so we need to prevent\n            // the form from navigating away from the current page.\n            e.preventDefault();\n            this.props.onSubmit();\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            return React.createElement(\n                JoinFlowStep,\n                {\n                    innerClassName: 'join-flow-inner-error-step',\n                    nextButton: this.props.canTryAgain ? this.props.intl.formatMessage({ id: 'general.tryAgain' }) : this.props.intl.formatMessage({ id: 'general.startOver' }),\n                    title: this.props.intl.formatMessage({ id: 'general.error' }),\n                    titleClassName: 'join-flow-error-title',\n                    onSubmit: this.handleSubmit\n                },\n                React.createElement(\n                    'div',\n                    { className: 'join-flow-instructions' },\n                    React.createElement(FormattedMessage, { id: 'registration.cantCreateAccount' })\n                ),\n                this.props.errorMsg && React.createElement(\n                    'div',\n                    { className: 'join-flow-instructions registration-error-msg' },\n                    this.props.errorMsg\n                ),\n                this.props.canTryAgain ? React.createElement(\n                    'div',\n                    { className: 'join-flow-instructions' },\n                    React.createElement(FormattedMessage, { id: 'registration.tryAgainInstruction' })\n                ) : React.createElement(\n                    'div',\n                    { className: 'join-flow-instructions' },\n                    React.createElement(FormattedMessage, { id: 'registration.startOverInstruction' })\n                )\n            );\n        }\n    }]);\n    return RegistrationErrorStep;\n}(React.Component);\nRegistrationErrorStep.propTypes = {\n    canTryAgain: PropTypes.bool.isRequired,\n    errorMsg: PropTypes.string,\n    intl: intlShape,\n    onSubmit: PropTypes.func.isRequired,\n    sendAnalytics: PropTypes.func.isRequired\n};\nRegistrationErrorStep.defaultProps = {\n    canTryAgain: false\n};\nvar IntlRegistrationErrorStep = injectIntl(RegistrationErrorStep);\nmodule.exports = IntlRegistrationErrorStep;\n// ./src/components/join-flow/registration-error-step.jsx\n// module id = 586\n// module chunks = 0 1\n//# sourceURL=scratch:///./src/components/join-flow/registration-error-step.jsx?");
 })