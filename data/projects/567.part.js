/* 567 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar _once = __webpack_require__(572);\nvar _once2 = _interopRequireDefault(_once);\nvar _iterator = __webpack_require__(571);\nvar _iterator2 = _interopRequireDefault(_iterator);\nvar _onlyOnce = __webpack_require__(573);\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\nvar _wrapAsync = __webpack_require__(449);\nvar _asyncEachOfLimit = __webpack_require__(565);\nvar _asyncEachOfLimit2 = _interopRequireDefault(_asyncEachOfLimit);\nvar _breakLoop = __webpack_require__(483);\nvar _breakLoop2 = _interopRequireDefault(_breakLoop);\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\nexports.default = function (limit) {\n    return function (obj, iteratee, callback) {\n        callback = (0, _once2.default)(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1');\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if ((0, _wrapAsync.isAsyncGenerator)(obj)) {\n            return (0, _asyncEachOfLimit2.default)(obj, limit, iteratee, callback);\n        }\n        if ((0, _wrapAsync.isAsyncIterable)(obj)) {\n            return (0, _asyncEachOfLimit2.default)(obj[Symbol.asyncIterator](), limit, iteratee, callback);\n        }\n        var nextElem = (0, _iterator2.default)(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n        function iterateeCallback(err, value) {\n            if (canceled) return;\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            } else if (err === false) {\n                done = true;\n                canceled = true;\n            } else if (value === _breakLoop2.default || done && running <= 0) {\n                done = true;\n                return callback(null);\n            } else if (!looping) {\n                replenish();\n            }\n        }\n        function replenish() {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));\n            }\n            looping = false;\n        }\n        replenish();\n    };\n};\nmodule.exports = exports['default'];\n// ./~/async/internal/eachOfLimit.js\n// module id = 567\n// module chunks = 0 8\n//# sourceURL=scratch:///./~/async/internal/eachOfLimit.js?");
 })