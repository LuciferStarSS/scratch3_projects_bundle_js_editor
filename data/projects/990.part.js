/* 990 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\nvar PropTypes = __webpack_require__(1);\nvar React = __webpack_require__(0);\nvar bindAll = __webpack_require__(9);\nvar connect = __webpack_require__(13).connect;\nvar injectIntl = __webpack_require__(4).injectIntl;\nvar intlShape = __webpack_require__(4).intlShape;\nvar api = __webpack_require__(143);\nvar previewActions = __webpack_require__(271);\nvar FormsyProjectUpdater = function (_React$Component) {\n    _inherits(FormsyProjectUpdater, _React$Component);\n    function FormsyProjectUpdater(props) {\n        _classCallCheck(this, FormsyProjectUpdater);\n        var _this = _possibleConstructorReturn(this, (FormsyProjectUpdater.__proto__ || Object.getPrototypeOf(FormsyProjectUpdater)).call(this, props));\n        bindAll(_this, ['setRef', 'handleUpdate']);\n        _this.state = {\n            value: props.initialValue,\n            error: false\n        };\n        return _this;\n    }\n    _createClass(FormsyProjectUpdater, [{\n        key: 'componentDidUpdate',\n        value: function componentDidUpdate() {\n            if (this.state.error !== false) {\n                var errorMessageId = this.state.error === 400 ? 'project.inappropriateUpdate' : 'general.notAvailableHeadline';\n                this.ref.updateInputsWithError(_defineProperty({}, this.props.field, this.props.intl.formatMessage({\n                    id: errorMessageId\n                })));\n            }\n        }\n    }, {\n        key: 'handleUpdate',\n        value: function handleUpdate(jsonData) {\n            var _this2 = this;\n            // Ignore updates that would not change the value\n            if (jsonData[this.props.field] === this.state.value) return;\n            api({\n                uri: '/projects/' + this.props.projectInfo.id,\n                authentication: this.props.user.token,\n                method: 'PUT',\n                json: jsonData\n            }, function (err, body, res) {\n                if (res.statusCode === 200) {\n                    _this2.setState({ value: body[_this2.props.field], error: false });\n                    _this2.props.onUpdate(jsonData);\n                } else {\n                    _this2.setState({ error: res.statusCode });\n                }\n            });\n        }\n    }, {\n        key: 'setRef',\n        value: function setRef(ref) {\n            this.ref = ref;\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            return this.props.children(this.state.value, this.setRef, this.handleUpdate);\n        }\n    }]);\n    return FormsyProjectUpdater;\n}(React.Component);\nFormsyProjectUpdater.propTypes = {\n    children: PropTypes.func.isRequired,\n    field: PropTypes.string,\n    initialValue: PropTypes.string,\n    intl: intlShape,\n    onUpdate: PropTypes.func,\n    projectInfo: PropTypes.shape({\n        id: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    }),\n    user: PropTypes.shape({\n        token: PropTypes.string\n    })\n};\nvar mapStateToProps = function mapStateToProps(state) {\n    return {\n        projectInfo: state.preview.projectInfo,\n        user: state.session.session.user\n    };\n};\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n    return {\n        onUpdate: function onUpdate(info) {\n            dispatch(previewActions.updateProjectInfo(info));\n        }\n    };\n};\nmodule.exports = connect(mapStateToProps, mapDispatchToProps)(injectIntl(FormsyProjectUpdater));\n// ./src/views/preview/formsy-project-updater.jsx\n// module id = 990\n// module chunks = 0\n//# sourceURL=scratch:///./src/views/preview/formsy-project-updater.jsx?");
 })