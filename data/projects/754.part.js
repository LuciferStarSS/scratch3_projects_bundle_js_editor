/* 754 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nvar React = __webpack_require__(0); // eslint-disable-line\nvar reactStringReplace = __webpack_require__(1346);\n/**\n * Helper method that replaces @mentions and #hashtags in plain text\n *\n * @param  {string} text string to convert\n * @param  {?object} opts options object of boolean flags, defaults to all true\n * @property {boolean} opts.hashtag If #hashtags should be converted to search links\n * @property {boolean} opts.usernames If @usernames should be converted to /users/username links\n * @property {boolean} opts.scratchLinks If scratch-domain links should be converted to <a> links\n * @return {Array} Array with strings and react components for links\n */\nmodule.exports = function (text, opts) {\n    opts = opts || {\n        usernames: true,\n        hashtags: true,\n        scratchLinks: true\n    };\n    var replacedText = [text];\n    // Match @-mentions (username is alphanumeric, underscore and dash)\n    if (opts.usernames) {\n        replacedText = reactStringReplace(replacedText, /@([\\w-]+)/g, function (match, i) {\n            return React.createElement(\n                'a',\n                {\n                    href: match.toLowerCase() === 'welcomingcommittee' ? '/studios/146521/' : '/users/' + match,\n                    key: match + i\n                },\n                '@',\n                match\n            );\n        });\n    }\n    // Match scratch links\n    /*\n        Ported from the python...\n        \"Oh boy a giant regex!\" Said nobody ever.\n        (^|\\s)(https?://(?:[\\w-]+\\.)*scratch\\.mit\\.edu(?:/(?:\\S*[\\w:/#[\\]@\\$&\\'()*+=])?)?(?![^?!,:;\\w\\s]\\S))\n        (^|\\s)\n            Only begin capturing after a space, or at the beginning of a word\n        https?\n            URLs beginning with http or https\n        ://(?:[\\w-]+\\.)*scratch\\.mit\\.edu\n            allow *.scratch.mit.edu urls\n        (?:/...)?\n            optionally followed by a slash\n        (?:\\S*[\\w:/#[\\]@\\$&\\'()*+=])?\n            optionally that slash is followed by anything that's not a space, until\n            that string is followed by URL-valid characters that aren't punctuation\n        (?![^?!,:;\\w\\s]\\S))\n            Don't capture if this string is embedded in another string (e.g., the\n            beginning of a non-scratch URL), but allow punctuation\n    */\n    if (opts.scratchLinks) {\n        // eslint-disable-next-line max-len\n        var linkRegexp = /((?:^|\\s)https?:\\/\\/(?:[\\w-]+\\.)*(?:scratch\\.mit\\.edu|scratch-wiki\\.info)(?:\\/(?:\\S*[\\w:/#[\\]@$&'()*+=])?)?(?![^?!,:;\\w\\s]\\S))/g;\n        replacedText = reactStringReplace(replacedText, linkRegexp, function (match, i) {\n            return React.createElement(\n                'a',\n                {\n                    href: match,\n                    key: match + i\n                },\n                match\n            );\n        });\n    }\n    // Match hashtags\n    if (opts.hashtags) {\n        replacedText = reactStringReplace(replacedText, /#([\\w-]+)/g, function (match, i) {\n            return React.createElement(\n                'a',\n                {\n                    href: '/search/projects?q=' + match,\n                    key: match + i\n                },\n                '#',\n                match\n            );\n        });\n    }\n    return replacedText;\n};\n// ./src/lib/decorate-text.jsx\n// module id = 754\n// module chunks = 0\n//# sourceURL=scratch:///./src/lib/decorate-text.jsx?");
 })