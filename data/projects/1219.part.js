/* 1219 */
 (function(module, exports, __webpack_require__) {
eval("var Symbol = __webpack_require__(555),\n    arrayMap = __webpack_require__(1214),\n    isArray = __webpack_require__(712),\n    isSymbol = __webpack_require__(1233);\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\nmodule.exports = baseToString;\n// ./~/lodash/_baseToString.js\n// module id = 1219\n// module chunks = 0\n//# sourceURL=scratch:///./~/lodash/_baseToString.js?");
 })