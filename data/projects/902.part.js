/* 902 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\nvar localforage = __webpack_require__(1196);\nvar Asset = __webpack_require__(550);\nvar Helper = __webpack_require__(577);\n/**\n * Implements storage on the local device, available even when the device has no network connection.\n */\nvar LocalHelper = function (_Helper) {\n    _inherits(LocalHelper, _Helper);\n    function LocalHelper(parent) {\n        _classCallCheck(this, LocalHelper);\n        var _this = _possibleConstructorReturn(this, (LocalHelper.__proto__ || Object.getPrototypeOf(LocalHelper)).call(this, parent));\n        localforage.config({\n            name: 'Scratch 3.0',\n            size: 100 * 1024 * 1024\n        });\n        return _this;\n    }\n    /**\n     * Fetch an asset but don't process dependencies.\n     * @param {AssetType} assetType - The type of asset to fetch.\n     * @param {string} assetId - The ID of the asset to fetch: a project ID, MD5, etc.\n     * @param {DataFormat} dataFormat - The file format / file extension of the asset to fetch: PNG, JPG, etc.\n     * @return {Promise.<Asset>} A promise for the contents of the asset.\n     */\n    _createClass(LocalHelper, [{\n        key: 'load',\n        value: function load(assetType, assetId, dataFormat) {\n            return new Promise(function (fulfill, reject) {\n                var fileName = [assetId, dataFormat].join('.');\n                localforage.getItem(fileName).then(function (data) {\n                    if (data === null) {\n                        fulfill(null);\n                    } else {\n                        fulfill(new Asset(assetType, assetId, dataFormat, data));\n                    }\n                }, function (error) {\n                    reject(error);\n                });\n            });\n        }\n    }]);\n    return LocalHelper;\n}(Helper);\nmodule.exports = LocalHelper;\n// ./~/scratch-storage/src/LocalHelper.js\n// module id = 902\n// module chunks = 0\n//# sourceURL=scratch:///./~/scratch-storage/src/LocalHelper.js?");
 })