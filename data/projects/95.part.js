/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar bindAll = __webpack_require__(9);\nvar classNames = __webpack_require__(5);\nvar connect = __webpack_require__(13).connect;\nvar FormattedMessage = __webpack_require__(4).FormattedMessage;\nvar injectIntl = __webpack_require__(4).injectIntl;\nvar intlShape = __webpack_require__(4).intlShape;\nvar PropTypes = __webpack_require__(1);\nvar React = __webpack_require__(0);\n\nvar messageCountActions = __webpack_require__(142);\nvar navigationActions = __webpack_require__(16);\nvar sessionActions = __webpack_require__(136);\n\nvar Button = __webpack_require__(15);\nvar Form = __webpack_require__(22);\nvar Input = __webpack_require__(24);\nvar LoginDropdown = __webpack_require__(92);\nvar CanceledDeletionModal = __webpack_require__(66);\nvar NavigationBox = __webpack_require__(43);\nvar Registration = __webpack_require__(69);\nvar AccountNav = __webpack_require__(94);\n\n__webpack_require__(127);\n\nvar Navigation = function (_React$Component) {\n    _inherits(Navigation, _React$Component);\n\n    function Navigation(props) {\n        _classCallCheck(this, Navigation);\n\n        var _this = _possibleConstructorReturn(this, (Navigation.__proto__ || Object.getPrototypeOf(Navigation)).call(this, props));\n\n        bindAll(_this, ['getProfileUrl', 'handleSearchSubmit', 'pollForMessages']);\n        // Keep the timeout id so we can cancel it (e.g. when we unmount)\n        _this.messageCountTimeoutId = -1;\n        return _this;\n    }\n\n    _createClass(Navigation, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            if (this.props.user) {\n                // Setup polling for messages to start in 2 minutes.\n                var twoMinInMs = 2 * 60 * 1000;\n                this.messageCountTimeoutId = setTimeout(this.pollForMessages.bind(this, twoMinInMs), twoMinInMs);\n            }\n        }\n    }, {\n        key: 'componentDidUpdate',\n        value: function componentDidUpdate(prevProps) {\n            if (prevProps.user !== this.props.user) {\n                this.props.handleCloseAccountNav();\n                if (this.props.user) {\n                    var twoMinInMs = 2 * 60 * 1000;\n                    this.messageCountTimeoutId = setTimeout(this.pollForMessages.bind(this, twoMinInMs), twoMinInMs);\n                } else {\n                    // Clear message count check, and set to default id.\n                    if (this.messageCountTimeoutId !== -1) {\n                        clearTimeout(this.messageCountTimeoutId);\n                    }\n                    this.props.setMessageCount(0);\n                    this.messageCountTimeoutId = -1;\n                }\n            }\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            // clear message interval if it exists\n            if (this.messageCountTimeoutId !== -1) {\n                clearTimeout(this.messageCountTimeoutId);\n                this.props.setMessageCount(0);\n                this.messageCountTimeoutId = -1;\n            }\n        }\n    }, {\n        key: 'getProfileUrl',\n        value: function getProfileUrl() {\n            if (!this.props.user) return;\n            return '/users/' + this.props.user.username + '/';\n        }\n    }, {\n        key: 'pollForMessages',\n        value: function pollForMessages(ms) {\n            var _this2 = this;\n\n            this.props.getMessageCount(this.props.user.username);\n            // We only poll if it has been less than 32 minutes.\n            // Chances of someone actively using the page for that long without\n            // a navigation is low.\n            if (ms < 32 * 60 * 1000) {\n                // 32 minutes\n                var nextFetch = ms * 2; // exponentially back off next fetch time.\n                var timeoutId = setTimeout(function () {\n                    _this2.pollForMessages(nextFetch);\n                }, nextFetch);\n                this.messageCountTimeoutId = timeoutId;\n            }\n        }\n    }, {\n        key: 'handleSearchSubmit',\n        value: function handleSearchSubmit(formData) {\n            var targetUrl = '/search/projects';\n            if (formData.q) {\n                targetUrl += '?q=' + encodeURIComponent(formData.q);\n            }\n            window.location.href = targetUrl;\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var createLink = this.props.user ? '/projects/editor/' : '/projects/editor/?tutorial=getStarted';\n            return React.createElement(\n                NavigationBox,\n                {\n                    className: classNames({\n                        'logged-in': this.props.user\n                    })\n                },\n                React.createElement(\n                    'ul',\n                    null,\n                    React.createElement(\n                        'li',\n                        { className: 'logo' },\n                        React.createElement('a', {\n                            'aria-label': 'Scratch',\n                            href: '/'\n                        })\n                    ),\n                    React.createElement(\n                        'li',\n                        { className: 'link create' },\n                        React.createElement(\n                            'a',\n                            { href: createLink },\n                            React.createElement(FormattedMessage, { id: 'general.create' })\n                        )\n                    ),\n                    React.createElement(\n                        'li',\n                        { className: 'link explore' },\n                        React.createElement(\n                            'a',\n                            { href: '/explore/projects/all' },\n                            React.createElement(FormattedMessage, { id: 'general.explore' })\n                        )\n                    ),\n                    React.createElement(\n                        'li',\n                        { className: 'link ideas' },\n                        React.createElement(\n                            'a',\n                            { href: '/ideas' },\n                            React.createElement(FormattedMessage, { id: 'general.ideas' })\n                        )\n                    ),\n                    React.createElement(\n                        'li',\n                        { className: 'link about' },\n                        React.createElement(\n                            'a',\n                            { href: '/about' },\n                            React.createElement(FormattedMessage, { id: 'general.about' })\n                        )\n                    ),\n                    React.createElement(\n                        'li',\n                        { className: 'search' },\n                        React.createElement(\n                            Form,\n                            { onSubmit: this.handleSearchSubmit },\n                            React.createElement(Button, {\n                                className: 'btn-search',\n                                type: 'submit'\n                            }),\n                            React.createElement(Input, {\n                                'aria-label': this.props.intl.formatMessage({ id: 'general.search' }),\n                                name: 'q',\n                                placeholder: this.props.intl.formatMessage({ id: 'general.search' }),\n                                type: 'text',\n                                value: this.props.searchTerm\n                            })\n                        )\n                    ),\n                    this.props.session.status === sessionActions.Status.FETCHED ? this.props.user ? [React.createElement(\n                        'li',\n                        {\n                            className: 'link right messages',\n                            key: 'messages'\n                        },\n                        React.createElement(\n                            'a',\n                            {\n                                href: '/messages/',\n                                title: this.props.intl.formatMessage({ id: 'general.messages' })\n                            },\n                            React.createElement(\n                                'span',\n                                {\n                                    className: classNames({\n                                        'message-count': true,\n                                        'show': this.props.unreadMessageCount > 0\n                                    })\n                                },\n                                this.props.unreadMessageCount,\n                                ' '\n                            ),\n                            React.createElement(FormattedMessage, { id: 'general.messages' })\n                        )\n                    ), React.createElement(\n                        'li',\n                        {\n                            className: 'link right mystuff',\n                            key: 'mystuff'\n                        },\n                        React.createElement(\n                            'a',\n                            {\n                                href: '/mystuff/',\n                                title: this.props.intl.formatMessage({ id: 'general.myStuff' })\n                            },\n                            React.createElement(FormattedMessage, { id: 'general.myStuff' })\n                        )\n                    ), React.createElement(\n                        'li',\n                        {\n                            className: 'link right account-nav',\n                            key: 'account-nav'\n                        },\n                        React.createElement(AccountNav, {\n                            classroomId: this.props.user.classroomId,\n                            isEducator: this.props.permissions.educator,\n                            isOpen: this.props.accountNavOpen,\n                            isStudent: this.props.permissions.student,\n                            profileUrl: this.getProfileUrl(),\n                            thumbnailUrl: this.props.user.thumbnailUrl,\n                            username: this.props.user.username,\n                            onClick: this.props.handleToggleAccountNav,\n                            onClickLogout: this.props.handleLogOut,\n                            onClose: this.props.handleCloseAccountNav\n                        })\n                    )] : [React.createElement(\n                        'li',\n                        {\n                            className: 'link right join',\n                            key: 'join'\n                        },\n                        React.createElement(\n                            'a',\n                            {\n                                className: 'registrationLink',\n                                href: '#',\n                                onClick: this.props.handleClickRegistration\n                            },\n                            React.createElement(FormattedMessage, { id: 'general.joinScratch' })\n                        )\n                    ), React.createElement(\n                        'li',\n                        {\n                            className: 'link right login-item',\n                            key: 'login'\n                        },\n                        React.createElement(\n                            'a',\n                            {\n                                className: 'ignore-react-onclickoutside',\n                                href: '#',\n                                key: 'login-link',\n                                onClick: this.props.handleToggleLoginOpen\n                            },\n                            React.createElement(FormattedMessage, { id: 'general.signIn' })\n                        ),\n                        React.createElement(LoginDropdown, {\n                            key: 'login-dropdown'\n                        })\n                    )] : [],\n                    this.props.registrationOpen && !this.props.useScratch3Registration && React.createElement(Registration, {\n                        key: 'registration'\n                    })\n                ),\n                React.createElement(CanceledDeletionModal, null)\n            );\n        }\n    }]);\n\n    return Navigation;\n}(React.Component);\n\nNavigation.propTypes = {\n    accountNavOpen: PropTypes.bool,\n    getMessageCount: PropTypes.func,\n    handleClickRegistration: PropTypes.func,\n    handleCloseAccountNav: PropTypes.func,\n    handleLogOut: PropTypes.func,\n    handleToggleAccountNav: PropTypes.func,\n    handleToggleLoginOpen: PropTypes.func,\n    intl: intlShape,\n    permissions: PropTypes.shape({\n        admin: PropTypes.bool,\n        social: PropTypes.bool,\n        educator: PropTypes.bool,\n        educator_invitee: PropTypes.bool,\n        student: PropTypes.bool\n    }),\n    registrationOpen: PropTypes.bool,\n    searchTerm: PropTypes.string,\n    session: PropTypes.shape({\n        status: PropTypes.string\n    }),\n    setMessageCount: PropTypes.func,\n    unreadMessageCount: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    useScratch3Registration: PropTypes.bool,\n    user: PropTypes.shape({\n        classroomId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n        thumbnailUrl: PropTypes.string,\n        username: PropTypes.string\n    })\n};\n\nNavigation.defaultProps = {\n    session: {},\n    unreadMessageCount: 0, // bubble number to display how many notifications someone has.\n    searchTerm: ''\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n    return {\n        accountNavOpen: state.navigation && state.navigation.accountNavOpen,\n        session: state.session,\n        permissions: state.permissions,\n        registrationOpen: state.navigation.registrationOpen,\n        searchTerm: state.navigation.searchTerm,\n        unreadMessageCount: state.messageCount.messageCount,\n        user: state.session && state.session.session && state.session.session.user,\n        useScratch3Registration: state.navigation.useScratch3Registration\n    };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n    return {\n        getMessageCount: function getMessageCount(username) {\n            dispatch(messageCountActions.getCount(username));\n        },\n        handleToggleAccountNav: function handleToggleAccountNav(event) {\n            event.preventDefault();\n            dispatch(navigationActions.handleToggleAccountNav());\n        },\n        handleCloseAccountNav: function handleCloseAccountNav() {\n            dispatch(navigationActions.setAccountNavOpen(false));\n        },\n        handleClickRegistration: function handleClickRegistration(event) {\n            event.preventDefault();\n            dispatch(navigationActions.handleRegistrationRequested());\n        },\n        handleLogOut: function handleLogOut(event) {\n            event.preventDefault();\n            dispatch(navigationActions.handleLogOut());\n        },\n        handleToggleLoginOpen: function handleToggleLoginOpen(event) {\n            event.preventDefault();\n            dispatch(navigationActions.toggleLoginOpen());\n        },\n        setMessageCount: function setMessageCount(newCount) {\n            dispatch(messageCountActions.setCount(newCount));\n        }\n    };\n};\n\n// Allow incoming props to override redux-provided props. Used to mock in tests.\nvar mergeProps = function mergeProps(stateProps, dispatchProps, ownProps) {\n    return Object.assign({}, stateProps, dispatchProps, ownProps);\n};\n\nvar ConnectedNavigation = connect(mapStateToProps, mapDispatchToProps, mergeProps)(Navigation);\n\nmodule.exports = injectIntl(ConnectedNavigation);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/navigation/www/navigation.jsx\n// module id = 95\n// module chunks = 0 1 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\n\n//# sourceURL=scratch:///./src/components/navigation/www/navigation.jsx?");

/***/ })