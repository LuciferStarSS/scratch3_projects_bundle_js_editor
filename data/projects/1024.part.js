/* 1024 */
 (function(module, exports) {
eval("module.exports = clipboardCopy\nfunction clipboardCopy (text) {\n  // Use the Async Clipboard API when available\n  if (navigator.clipboard) {\n    return navigator.clipboard.writeText(text)\n  }\n  // ...Otherwise, use document.execCommand() fallback\n  // Put the text to copy into a <span>\n  var span = document.createElement('span')\n  span.textContent = text\n  // Preserve consecutive spaces and newlines\n  span.style.whiteSpace = 'pre'\n  // An <iframe> isolates the <span> from the page's styles\n  var iframe = document.createElement('iframe')\n  iframe.sandbox = 'allow-same-origin'\n  // Add the <iframe> to the page\n  document.body.appendChild(iframe)\n  var win = iframe.contentWindow\n  // Add the <span> to the <iframe>\n  win.document.body.appendChild(span)\n  // Get a Selection object representing the range of text selected by the user\n  var selection = win.getSelection()\n  // Fallback for Firefox which fails to get a selection from an <iframe>\n  if (!selection) {\n    win = window\n    selection = win.getSelection()\n    document.body.appendChild(span)\n  }\n  var range = win.document.createRange()\n  selection.removeAllRanges()\n  range.selectNode(span)\n  selection.addRange(range)\n  var success = false\n  try {\n    success = win.document.execCommand('copy')\n  } catch (err) {}\n  selection.removeAllRanges()\n  win.document.body.removeChild(span)\n  document.body.removeChild(iframe)\n  // The Async Clipboard API returns a promise that may reject with `undefined` so we\n  // match that here for consistency.\n  return success\n    ? Promise.resolve()\n    : Promise.reject() // eslint-disable-line prefer-promise-reject-errors\n}\n// ./~/clipboard-copy/index.js\n// module id = 1024\n// module chunks = 0\n//# sourceURL=scratch:///./~/clipboard-copy/index.js?");
 })