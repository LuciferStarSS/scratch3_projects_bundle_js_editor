/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar bindAll = __webpack_require__(9);\nvar classNames = __webpack_require__(5);\nvar PropTypes = __webpack_require__(1);\nvar React = __webpack_require__(0);\nvar connect = __webpack_require__(13).connect;\n\nvar IframeModal = __webpack_require__(68);\nvar navigationActions = __webpack_require__(16);\n\n__webpack_require__(65);\n\nvar Registration = function (_React$Component) {\n    _inherits(Registration, _React$Component);\n\n    function Registration(props) {\n        _classCallCheck(this, Registration);\n\n        var _this = _possibleConstructorReturn(this, (Registration.__proto__ || Object.getPrototypeOf(Registration)).call(this, props));\n\n        bindAll(_this, ['handleMessage', 'toggleMessageListener']);\n        _this.state = { recaptchaOpen: false };\n        return _this;\n    }\n\n    _createClass(Registration, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            if (this.props.isOpen) this.toggleMessageListener(true);\n        }\n    }, {\n        key: 'componentDidUpdate',\n        value: function componentDidUpdate(prevProps) {\n            if (this.props.isOpen && !prevProps.isOpen) this.toggleMessageListener(true);\n            if (!this.props.isOpen && prevProps.isOpen) this.toggleMessageListener(false);\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            this.toggleMessageListener(false);\n        }\n    }, {\n        key: 'handleMessage',\n        value: function handleMessage(e) {\n            if (e.origin !== window.location.origin) return;\n            if (e.source !== this.registrationIframe.contentWindow) return;\n            if (e.data === 'registration-done') this.props.handleCompleteRegistration();\n            if (e.data === 'registration-relaunch') {\n                this.registrationIframe.contentWindow.location.reload();\n            }\n            if (e.data === 'recaptcha-opened') this.setState({ recaptchaOpen: true });\n            if (e.data === 'recaptcha-closed') this.setState({ recaptchaOpen: false });\n        }\n    }, {\n        key: 'toggleMessageListener',\n        value: function toggleMessageListener(present) {\n            if (present) {\n                window.addEventListener('message', this.handleMessage);\n            } else {\n                window.removeEventListener('message', this.handleMessage);\n            }\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this2 = this;\n\n            return React.createElement(IframeModal, {\n                className: classNames('mod-registration', { 'recaptcha-open': this.state.recaptchaOpen }),\n                componentRef: function componentRef(iframe) {\n                    // eslint-disable-line react/jsx-no-bind\n                    _this2.registrationIframe = iframe;\n                },\n                isOpen: this.props.isOpen,\n                src: '/accounts/standalone-registration/',\n                onRequestClose: this.props.handleCloseRegistration\n            });\n        }\n    }]);\n\n    return Registration;\n}(React.Component);\n\nRegistration.propTypes = {\n    handleCloseRegistration: PropTypes.func,\n    handleCompleteRegistration: PropTypes.func,\n    isOpen: PropTypes.bool\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n    return {\n        isOpen: state.navigation.registrationOpen\n    };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n    return {\n        handleCloseRegistration: function handleCloseRegistration() {\n            dispatch(navigationActions.setRegistrationOpen(false));\n        },\n        handleCompleteRegistration: function handleCompleteRegistration() {\n            dispatch(navigationActions.handleCompleteRegistration());\n        }\n    };\n};\n\nmodule.exports = connect(mapStateToProps, mapDispatchToProps)(Registration);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/registration/registration.jsx\n// module id = 69\n// module chunks = 0 1 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\n\n//# sourceURL=scratch:///./src/components/registration/registration.jsx?");

/***/ })