/* 923 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\nvar bindAll = __webpack_require__(9);\nvar PropTypes = __webpack_require__(1);\nvar React = __webpack_require__(0);\nvar connect = __webpack_require__(13).connect;\nvar FormattedMessage = __webpack_require__(4).FormattedMessage;\nvar injectIntl = __webpack_require__(4).injectIntl;\nvar intlShape = __webpack_require__(4).intlShape;\nvar Modal = __webpack_require__(25);\nvar ModalTitle = __webpack_require__(437);\nvar ModalInnerContent = __webpack_require__(452);\nvar Select = __webpack_require__(135);\nvar TextArea = __webpack_require__(254);\nvar previewActions = __webpack_require__(271);\nvar Progression = __webpack_require__(186);\nvar FormStep = __webpack_require__(922);\nvar _require = __webpack_require__(924),\n    reportOptionsShape = _require.reportOptionsShape,\n    REPORT_OPTIONS = _require.REPORT_OPTIONS;\n__webpack_require__(35);\n__webpack_require__(1416);\n// The Progression component uses numbers to track which step it's on, but that's\n// hard to read. Make the code easier to read by giving each step number a label.\nvar STEPS = {\n    category: 0,\n    subcategory: 1,\n    textInput: 2,\n    confirmation: 3,\n    deadend: 4\n};\nvar ReportModal = function (_React$Component) {\n    _inherits(ReportModal, _React$Component);\n    function ReportModal(props) {\n        _classCallCheck(this, ReportModal);\n        var _this = _possibleConstructorReturn(this, (ReportModal.__proto__ || Object.getPrototypeOf(ReportModal)).call(this, props));\n        bindAll(_this, ['handleSetCategory', 'handleSubmit', 'handleSetSubcategory']);\n        _this.state = {\n            step: STEPS.category,\n            categoryValue: '',\n            subcategoryValue: null\n        };\n        return _this;\n    }\n    _createClass(ReportModal, [{\n        key: 'handleSetCategory',\n        value: function handleSetCategory(formData) {\n            var category = this.props.reportOptions.find(function (o) {\n                return o.value === formData.category;\n            }) || this.props.reportOptions[0];\n            return this.setState({\n                categoryValue: formData.category,\n                step: category.subcategories ? STEPS.subcategory : STEPS.textInput\n            });\n        }\n    }, {\n        key: 'handleSetSubcategory',\n        value: function handleSetSubcategory(formData) {\n            var _this2 = this;\n            var category = this.props.reportOptions.find(function (o) {\n                return o.value === _this2.state.categoryValue;\n            }) || this.props.reportOptions[0];\n            var subcategory = category.subcategories.find(function (o) {\n                return o.value === formData.subcategory;\n            }) || category.subcategories[0];\n            return this.setState({\n                subcategoryValue: subcategory.value,\n                step: subcategory.preventSubmission ? STEPS.deadend : STEPS.textInput\n            });\n        }\n    }, {\n        key: 'handleSubmit',\n        value: function handleSubmit(formData) {\n            this.props.onReport({\n                report_category: this.state.subcategoryValue ? this.state.subcategoryValue : this.state.categoryValue,\n                notes: formData.notes\n            });\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this3 = this;\n            var _props = this.props,\n                intl = _props.intl,\n                isConfirmed = _props.isConfirmed,\n                isError = _props.isError,\n                isOpen = _props.isOpen,\n                isWaiting = _props.isWaiting,\n                onRequestClose = _props.onRequestClose,\n                type = _props.type,\n                reportOptions = _props.reportOptions,\n                modalProps = _objectWithoutProperties(_props, ['intl', 'isConfirmed', 'isError', 'isOpen', 'isWaiting', 'onRequestClose', 'type', 'reportOptions']);\n            var contentLabel = intl.formatMessage({ id: 'report.' + type });\n            var categoryRequiredMessage = intl.formatMessage({ id: 'report.reasonMissing' });\n            var category = reportOptions.find(function (o) {\n                return o.value === _this3.state.categoryValue;\n            }) || reportOptions[0];\n            var finalCategory = category;\n            if (category.subcategories) {\n                finalCategory = category.subcategories.find(function (o) {\n                    return o.value === _this3.state.subcategoryValue;\n                }) || category.subcategories[0];\n            }\n            // Confirmation step is shown if a report has been submitted, even if state is reset by closing the modal.\n            // This prevents multiple report submission within the same session because submission is stored in redux.\n            var step = isConfirmed ? STEPS.confirmation : this.state.step;\n            return React.createElement(\n                Modal,\n                _extends({\n                    useStandardSizes: true,\n                    className: 'mod-report',\n                    contentLabel: contentLabel,\n                    isOpen: isOpen,\n                    onRequestClose: onRequestClose\n                }, modalProps),\n                React.createElement(\n                    'div',\n                    null,\n                    React.createElement(\n                        'div',\n                        { className: 'report-modal-header modal-header' },\n                        React.createElement(ModalTitle, { title: contentLabel })\n                    ),\n                    React.createElement(\n                        ModalInnerContent,\n                        { className: 'report-modal-content' },\n                        isError && React.createElement(\n                            'div',\n                            { className: 'error-text' },\n                            React.createElement(FormattedMessage, { id: 'report.error' })\n                        ),\n                        React.createElement(\n                            Progression,\n                            { step: step },\n                            React.createElement(\n                                FormStep,\n                                {\n                                    nextLabel: { id: 'general.next' },\n                                    onNext: this.handleSetCategory\n                                },\n                                React.createElement(\n                                    'div',\n                                    { className: 'instructions' },\n                                    React.createElement(FormattedMessage, {\n                                        id: 'report.' + type + 'Instructions',\n                                        key: 'report.' + type + 'Instructions',\n                                        values: {\n                                            CommunityGuidelinesLink: React.createElement(\n                                                'a',\n                                                {\n                                                    href: '/community_guidelines',\n                                                    target: '_blank'\n                                                },\n                                                React.createElement(FormattedMessage, { id: 'general.guidelines' })\n                                            )\n                                        }\n                                    })\n                                ),\n                                React.createElement(Select, {\n                                    required: true,\n                                    elementWrapperClassName: 'report-modal-field',\n                                    label: null,\n                                    name: 'category',\n                                    options: reportOptions.map(function (option) {\n                                        return {\n                                            value: option.value,\n                                            label: intl.formatMessage(option.label),\n                                            key: option.value\n                                        };\n                                    }),\n                                    validationErrors: {\n                                        isDefaultRequiredValue: categoryRequiredMessage\n                                    }\n                                })\n                            ),\n                            React.createElement(\n                                FormStep,\n                                {\n                                    nextLabel: { id: 'general.next' },\n                                    onNext: this.handleSetSubcategory\n                                },\n                                React.createElement(\n                                    'div',\n                                    { className: 'instructions' },\n                                    React.createElement(\n                                        'div',\n                                        { className: 'instructions-header' },\n                                        React.createElement(FormattedMessage, category.label)\n                                    ),\n                                    category.prompt\n                                ),\n                                React.createElement(Select, {\n                                    required: true,\n                                    elementWrapperClassName: 'report-modal-field',\n                                    label: null,\n                                    name: 'subcategory',\n                                    options: category.subcategories ? category.subcategories.map(function (option) {\n                                        return {\n                                            value: option.value,\n                                            label: intl.formatMessage(option.label),\n                                            key: option.value\n                                        };\n                                    }) : [],\n                                    validationErrors: {\n                                        isDefaultRequiredValue: categoryRequiredMessage\n                                    }\n                                })\n                            ),\n                            React.createElement(\n                                FormStep,\n                                {\n                                    isWaiting: isWaiting,\n                                    nextLabel: { id: 'report.send' },\n                                    onNext: this.handleSubmit\n                                },\n                                React.createElement(\n                                    'div',\n                                    { className: 'instructions' },\n                                    React.createElement(\n                                        'div',\n                                        { className: 'instructions-header' },\n                                        React.createElement(FormattedMessage, finalCategory.label)\n                                    ),\n                                    finalCategory.prompt\n                                ),\n                                React.createElement(TextArea, {\n                                    autoFocus: true,\n                                    required: true,\n                                    className: 'report-text',\n                                    elementWrapperClassName: 'report-modal-field',\n                                    label: null,\n                                    name: 'notes',\n                                    validationErrors: {\n                                        isDefaultRequiredValue: intl.formatMessage({ id: 'report.textMissing' }),\n                                        maxLength: intl.formatMessage({ id: 'report.tooLongError' }),\n                                        minLength: intl.formatMessage({ id: 'report.tooShortError' })\n                                    },\n                                    validations: {\n                                        maxLength: 500,\n                                        minLength: 20\n                                    }\n                                })\n                            ),\n                            React.createElement(\n                                FormStep,\n                                {\n                                    submitEnabled: true,\n                                    nextLabel: { id: 'general.close' },\n                                    onNext: onRequestClose\n                                },\n                                React.createElement(\n                                    'div',\n                                    { className: 'instructions' },\n                                    React.createElement(\n                                        'div',\n                                        { className: 'instructions-header' },\n                                        React.createElement(FormattedMessage, { id: 'report.receivedHeader' })\n                                    ),\n                                    React.createElement(FormattedMessage, { id: 'report.receivedBody' })\n                                )\n                            ),\n                            React.createElement(\n                                FormStep,\n                                {\n                                    submitEnabled: true,\n                                    nextLabel: { id: 'general.close' },\n                                    onNext: onRequestClose\n                                },\n                                React.createElement(\n                                    'div',\n                                    { className: 'instructions' },\n                                    React.createElement(\n                                        'div',\n                                        { className: 'instructions-header' },\n                                        React.createElement(FormattedMessage, finalCategory.label)\n                                    ),\n                                    finalCategory.prompt\n                                )\n                            )\n                        )\n                    )\n                )\n            );\n        }\n    }]);\n    return ReportModal;\n}(React.Component);\nReportModal.propTypes = {\n    intl: intlShape,\n    isConfirmed: PropTypes.bool,\n    isError: PropTypes.bool,\n    isOpen: PropTypes.bool,\n    isWaiting: PropTypes.bool,\n    onReport: PropTypes.func,\n    onRequestClose: PropTypes.func,\n    reportOptions: reportOptionsShape,\n    type: PropTypes.string\n};\nReportModal.defaultProps = {\n    reportOptions: REPORT_OPTIONS\n};\nvar mapStateToProps = function mapStateToProps(state) {\n    return {\n        isConfirmed: state.preview.status.report === previewActions.Status.FETCHED,\n        isError: state.preview.status.report === previewActions.Status.ERROR,\n        isWaiting: state.preview.status.report === previewActions.Status.FETCHING\n    };\n};\nvar mapDispatchToProps = function mapDispatchToProps() {\n    return {};\n};\nvar ConnectedReportModal = connect(mapStateToProps, mapDispatchToProps)(ReportModal);\nmodule.exports = injectIntl(ConnectedReportModal);\n// ./src/components/modal/report/modal.jsx\n// module id = 923\n// module chunks = 0\n//# sourceURL=scratch:///./src/components/modal/report/modal.jsx?");
 })