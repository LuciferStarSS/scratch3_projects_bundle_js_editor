/* 25 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\nvar bindAll = __webpack_require__(9);\nvar classNames = __webpack_require__(5);\nvar omit = __webpack_require__(14);\nvar PropTypes = __webpack_require__(1);\nvar React = __webpack_require__(0);\nvar ReactModal = __webpack_require__(119);\n__webpack_require__(124);\nReactModal.setAppElement(document.getElementById('app'));\n/**\n * Container for pop up windows (See: registration window)\n */\nvar Modal = function (_React$Component) {\n    _inherits(Modal, _React$Component);\n    function Modal(props) {\n        _classCallCheck(this, Modal);\n        var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n        bindAll(_this, ['handleRequestClose']);\n        return _this;\n    }\n    _createClass(Modal, [{\n        key: 'handleRequestClose',\n        value: function handleRequestClose() {\n            return this.modal.portal.requestClose();\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this2 = this;\n            // bodyOpenClassName prop cannot be blank string or null here; both cause\n            // an error, because ReactModal does not correctly handle them.\n            // If we're not setting it to a class name, we must omit the prop entirely.\n            var bodyOpenClassNameProp = this.props.useStandardSizes ? { bodyOpenClassName: classNames('overflow-hidden') } : {};\n            return React.createElement(\n                ReactModal,\n                _extends({\n                    appElement: document.getElementById('app')\n                }, bodyOpenClassNameProp, {\n                    className: {\n                        base: classNames('modal-content', this.props.className, {\n                            'modal-sizes': this.props.useStandardSizes\n                        }),\n                        afterOpen: classNames('modal-content', this.props.className),\n                        beforeClose: classNames('modal-content', this.props.className)\n                    },\n                    overlayClassName: {\n                        base: classNames('modal-overlay', this.props.overlayClassName),\n                        afterOpen: classNames('modal-overlay', this.props.overlayClassName),\n                        beforeClose: classNames('modal-overlay', this.props.overlayClassName)\n                    },\n                    ref: function ref(component) {\n                        _this2.modal = component;\n                    }\n                }, omit(this.props, ['className', 'overlayClassName'])),\n                this.props.showCloseButton && React.createElement(\n                    'div',\n                    {\n                        className: 'modal-content-close',\n                        onClick: this.handleRequestClose\n                    },\n                    React.createElement('img', {\n                        alt: 'close-icon',\n                        className: 'modal-content-close-img',\n                        draggable: 'false',\n                        src: '/svgs/modal/close-x.svg'\n                    })\n                ),\n                this.props.children\n            );\n        }\n    }]);\n    return Modal;\n}(React.Component);\nModal.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    overlayClassName: PropTypes.string,\n    showCloseButton: PropTypes.bool,\n    useStandardSizes: PropTypes.bool\n};\nModal.defaultProps = {\n    showCloseButton: true\n};\nmodule.exports = Modal;\n// ./src/components/modal/base/modal.jsx\n// module id = 25\n// module chunks = 0 1 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\n//# sourceURL=scratch:///./src/components/modal/base/modal.jsx?");
 })