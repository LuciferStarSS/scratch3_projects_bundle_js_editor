/* 271 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nvar defaults = __webpack_require__(244);\nvar keyMirror = __webpack_require__(261);\nvar eachLimit = __webpack_require__(564);\nvar mergeWith = __webpack_require__(710);\nvar uniqBy = __webpack_require__(711);\nvar api = __webpack_require__(143);\nvar log = __webpack_require__(139);\nvar COMMENT_LIMIT = 20;\nmodule.exports.Status = keyMirror({\n    FETCHED: null,\n    NOT_FETCHED: null,\n    FETCHING: null,\n    ERROR: null\n});\nmodule.exports.getInitialState = function () {\n    return {\n        status: {\n            project: module.exports.Status.NOT_FETCHED,\n            comments: module.exports.Status.NOT_FETCHED,\n            faved: module.exports.Status.NOT_FETCHED,\n            loved: module.exports.Status.NOT_FETCHED,\n            original: module.exports.Status.NOT_FETCHED,\n            parent: module.exports.Status.NOT_FETCHED,\n            remixes: module.exports.Status.NOT_FETCHED,\n            report: module.exports.Status.NOT_FETCHED,\n            projectStudios: module.exports.Status.NOT_FETCHED,\n            curatedStudios: module.exports.Status.NOT_FETCHED,\n            visibility: module.exports.Status.NOT_FETCHED,\n            studioRequests: {}\n        },\n        projectInfo: {},\n        remixes: [],\n        comments: [],\n        replies: {},\n        faved: false,\n        loved: false,\n        original: {},\n        parent: {},\n        projectStudios: [],\n        curatedStudios: [],\n        currentStudioIds: [],\n        moreCommentsToLoad: false,\n        projectNotAvailable: false,\n        visibilityInfo: {}\n    };\n};\nmodule.exports.previewReducer = function (state, action) {\n    if (typeof state === 'undefined') {\n        state = module.exports.getInitialState();\n    }\n    switch (action.type) {\n        case 'RESET_TO_INTIAL_STATE':\n            return module.exports.getInitialState();\n        case 'SET_PROJECT_INFO':\n            return Object.assign({}, state, {\n                projectInfo: action.info ? action.info : {},\n                projectNotAvailable: !action.info\n            });\n        case 'UPDATE_PROJECT_INFO':\n            return Object.assign({}, state, {\n                projectInfo: Object.assign({}, state.projectInfo, action.info)\n            });\n        case 'SET_REMIXES':\n            return Object.assign({}, state, {\n                remixes: action.items\n            });\n        case 'SET_ORIGINAL':\n            return Object.assign({}, state, {\n                original: action.info\n            });\n        case 'SET_PARENT':\n            return Object.assign({}, state, {\n                parent: action.info\n            });\n        case 'SET_PROJECT_STUDIOS':\n            // also initialize currentStudioIds, to keep track of which studios\n            // the project is currently in.\n            return Object.assign({}, state, {\n                projectStudios: action.items,\n                currentStudioIds: action.items.map(function (item) {\n                    return item.id;\n                })\n            });\n        case 'SET_CURATED_STUDIOS':\n            return Object.assign({}, state, { curatedStudios: action.items });\n        case 'ADD_PROJECT_TO_STUDIO':\n            // add studio id to our studios-that-this-project-belongs-to set.\n            return Object.assign({}, state, {\n                currentStudioIds: state.currentStudioIds.concat(action.studioId)\n            });\n        case 'REMOVE_PROJECT_FROM_STUDIO':\n            return Object.assign({}, state, {\n                currentStudioIds: state.currentStudioIds.filter(function (item) {\n                    return item !== action.studioId;\n                })\n            });\n        case 'RESET_COMMENTS':\n            return Object.assign({}, state, {\n                comments: [],\n                replies: {}\n            });\n        case 'SET_COMMENTS':\n            return Object.assign({}, state, {\n                comments: uniqBy(state.comments.concat(action.items), 'id')\n            });\n        case 'UPDATE_COMMENT':\n            if (action.topLevelCommentId) {\n                return Object.assign({}, state, {\n                    replies: Object.assign({}, state.replies, _defineProperty({}, action.topLevelCommentId, state.replies[action.topLevelCommentId].map(function (comment) {\n                        if (comment.id === action.commentId) {\n                            return Object.assign({}, comment, action.comment);\n                        }\n                        return comment;\n                    })))\n                });\n            }\n            return Object.assign({}, state, {\n                comments: state.comments.map(function (comment) {\n                    if (comment.id === action.commentId) {\n                        return Object.assign({}, comment, action.comment);\n                    }\n                    return comment;\n                })\n            });\n        case 'ADD_NEW_COMMENT':\n            if (action.topLevelCommentId) {\n                return Object.assign({}, state, {\n                    replies: Object.assign({}, state.replies, _defineProperty({}, action.topLevelCommentId, state.replies[action.topLevelCommentId].concat(action.comment)))\n                });\n            }\n            // Reply to the top level project, put the reply at the beginning\n            return Object.assign({}, state, {\n                comments: [action.comment].concat(_toConsumableArray(state.comments)),\n                replies: Object.assign({}, state.replies, _defineProperty({}, action.comment.id, []))\n            });\n        case 'UPDATE_ALL_REPLIES':\n            return Object.assign({}, state, {\n                replies: Object.assign({}, state.replies, _defineProperty({}, action.commentId, state.replies[action.commentId].map(function (reply) {\n                    return Object.assign({}, reply, action.comment);\n                })))\n            });\n        case 'SET_REPLIES':\n            return Object.assign({}, state, {\n                // Append new replies to the state.replies structure\n                replies: mergeWith({}, state.replies, action.replies, function (replies, newReplies) {\n                    return uniqBy((replies || []).concat(newReplies || []), 'id');\n                }),\n                // Also set the `moreRepliesToLoad` property on the top-level comments\n                comments: state.comments.map(function (comment) {\n                    if (action.replies[comment.id]) {\n                        return Object.assign({}, comment, {\n                            moreRepliesToLoad: action.replies[comment.id].length === COMMENT_LIMIT\n                        });\n                    }\n                    return comment;\n                })\n            });\n        case 'SET_LOVED':\n            return Object.assign({}, state, {\n                loved: action.info\n            });\n        case 'SET_FAVED':\n            return Object.assign({}, state, {\n                faved: action.info\n            });\n        case 'SET_FETCH_STATUS':\n            state = JSON.parse(JSON.stringify(state));\n            state.status[action.infoType] = action.status;\n            return state;\n        case 'SET_STUDIO_FETCH_STATUS':\n            state = JSON.parse(JSON.stringify(state));\n            state.status.studioRequests[action.studioId] = action.status;\n            return state;\n        case 'SET_MORE_COMMENTS_TO_LOAD':\n            return Object.assign({}, state, {\n                moreCommentsToLoad: action.moreCommentsToLoad\n            });\n        case 'SET_VISIBILITY_INFO':\n            return Object.assign({}, state, {\n                visibilityInfo: action.visibilityInfo\n            });\n        case 'ERROR':\n            log.error(action.error);\n            return state;\n        default:\n            return state;\n    }\n};\nmodule.exports.setError = function (error) {\n    return {\n        type: 'ERROR',\n        error: error\n    };\n};\nmodule.exports.resetProject = function () {\n    return {\n        type: 'RESET_TO_INTIAL_STATE'\n    };\n};\nmodule.exports.setProjectInfo = function (info) {\n    return {\n        type: 'SET_PROJECT_INFO',\n        info: info\n    };\n};\nmodule.exports.updateProjectInfo = function (info) {\nreturn;\n   return {\n        type: 'UPDATE_PROJECT_INFO',\n        info: info\n    };\n};\nmodule.exports.setOriginalInfo = function (info) {\n    return {\n        type: 'SET_ORIGINAL',\n        info: info\n    };\n};\nmodule.exports.setParentInfo = function (info) {\n    return {\n        type: 'SET_PARENT',\n        info: info\n    };\n};\nmodule.exports.setFaved = function (info) {\n    return {\n        type: 'SET_FAVED',\n        info: info\n    };\n};\nmodule.exports.setLoved = function (info) {\n    return {\n        type: 'SET_LOVED',\n        info: info\n    };\n};\nmodule.exports.setRemixes = function (items) {\n    return {\n        type: 'SET_REMIXES',\n        items: items\n    };\n};\nmodule.exports.setProjectStudios = function (items) {\n    return {\n        type: 'SET_PROJECT_STUDIOS',\n        items: items\n    };\n};\nmodule.exports.setComments = function (items) {\n    return {\n        type: 'SET_COMMENTS',\n        items: items\n    };\n};\nmodule.exports.setReplies = function (replies) {\n    return {\n        type: 'SET_REPLIES',\n        replies: replies\n    };\n};\nmodule.exports.setCuratedStudios = function (items) {\n    return {\n        type: 'SET_CURATED_STUDIOS',\n        items: items\n    };\n};\nmodule.exports.addProjectToStudio = function (studioId) {\n    return {\n        type: 'ADD_PROJECT_TO_STUDIO',\n        studioId: studioId\n    };\n};\nmodule.exports.removeProjectFromStudio = function (studioId) {\n    return {\n        type: 'REMOVE_PROJECT_FROM_STUDIO',\n        studioId: studioId\n    };\n};\nmodule.exports.setFetchStatus = function (type, status) {\n    return {\n        type: 'SET_FETCH_STATUS',\n        infoType: type,\n        status: status\n    };\n};\nmodule.exports.setStudioFetchStatus = function (studioId, status) {\n    return {\n        type: 'SET_STUDIO_FETCH_STATUS',\n        studioId: studioId,\n        status: status\n    };\n};\nmodule.exports.setCommentDeleted = function (commentId, topLevelCommentId) {\n    return {\n        type: 'UPDATE_COMMENT',\n        commentId: commentId,\n        topLevelCommentId: topLevelCommentId,\n        comment: {\n            visibility: 'deleted'\n        }\n    };\n};\nmodule.exports.setRepliesDeleted = function (commentId) {\n    return {\n        type: 'UPDATE_ALL_REPLIES',\n        commentId: commentId,\n        comment: {\n            visibility: 'deleted'\n        }\n    };\n};\nmodule.exports.setCommentReported = function (commentId, topLevelCommentId) {\n    return {\n        type: 'UPDATE_COMMENT',\n        commentId: commentId,\n        topLevelCommentId: topLevelCommentId,\n        comment: {\n            visibility: 'reported'\n        }\n    };\n};\nmodule.exports.setCommentRestored = function (commentId, topLevelCommentId) {\n    return {\n        type: 'UPDATE_COMMENT',\n        commentId: commentId,\n        topLevelCommentId: topLevelCommentId,\n        comment: {\n            visibility: 'visible'\n        }\n    };\n};\nmodule.exports.setRepliesRestored = function (commentId) {\n    return {\n        type: 'UPDATE_ALL_REPLIES',\n        commentId: commentId,\n        comment: {\n            visibility: 'visible'\n        }\n    };\n};\nmodule.exports.addNewComment = function (comment, topLevelCommentId) {\n    return {\n        type: 'ADD_NEW_COMMENT',\n        comment: comment,\n        topLevelCommentId: topLevelCommentId\n    };\n};\nmodule.exports.setMoreCommentsToLoad = function (moreCommentsToLoad) {\n    return {\n        type: 'SET_MORE_COMMENTS_TO_LOAD',\n        moreCommentsToLoad: moreCommentsToLoad\n    };\n};\nmodule.exports.resetComments = function () {\n    return {\n        type: 'RESET_COMMENTS'\n    };\n};\nmodule.exports.setVisibilityInfo = function (visibilityInfo) {\n    return {\n        type: 'SET_VISIBILITY_INFO',\n        visibilityInfo: visibilityInfo\n    };\n};\nmodule.exports.getProjectInfo = function (id, token) {\n    return function (dispatch) {\n        var opts = {\n            uri: '/projects/' + id\n        };\n        if (token) {\n            Object.assign(opts, { authentication: token });\n        }\n        dispatch(module.exports.setFetchStatus('project', module.exports.Status.FETCHING));\n        api(opts, function (err, body, response) {\n            if (err) {\n                dispatch(module.exports.setFetchStatus('project', module.exports.Status.ERROR));\n                dispatch(module.exports.setError(err));\n                return;\n            }\n            if (typeof body === 'undefined' || response.statusCode === 404) {\n                dispatch(module.exports.setFetchStatus('project', module.exports.Status.ERROR));\n                dispatch(module.exports.setError('No project info'));\n                dispatch(module.exports.setProjectInfo(null));\n                return;\n            }\n            dispatch(module.exports.setFetchStatus('project', module.exports.Status.FETCHED));\n            dispatch(module.exports.setProjectInfo(body));\n            // If the project is not public, make a follow-up request for why\n            if (!body.public) {\n                dispatch(module.exports.getVisibilityInfo(id, body.author.username, token));\n            }\n        });\n    };\n};\nmodule.exports.getVisibilityInfo = function (id, ownerUsername, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('visibility', module.exports.Status.FETCHING));\n        api({\n            uri: '/users/' + ownerUsername + '/projects/' + id + '/visibility',\n            authentication: token\n        }, function (err, body, response) {\n            if (err || !body || response.statusCode !== 200) {\n                dispatch(module.exports.setFetchStatus('visibility', module.exports.Status.ERROR));\n                dispatch(module.exports.setError('No visibility info available'));\n                return;\n            }\n            dispatch(module.exports.setFetchStatus('visibility', module.exports.Status.FETCHED));\n            dispatch(module.exports.setVisibilityInfo(body));\n        });\n    };\n};\nmodule.exports.getOriginalInfo = function (id) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('original', module.exports.Status.FETCHING));\n        api({\n            uri: '/projects/' + id\n        }, function (err, body) {\n            if (err) {\n                dispatch(module.exports.setFetchStatus('original', module.exports.Status.ERROR));\n                dispatch(module.exports.setError(err));\n                return;\n            }\n            if (typeof body === 'undefined') {\n                dispatch(module.exports.setFetchStatus('original', module.exports.Status.ERROR));\n                dispatch(module.exports.setError('No original info'));\n                return;\n            }\n            dispatch(module.exports.setFetchStatus('original', module.exports.Status.FETCHED));\n            if (body && body.code === 'NotFound') {\n                dispatch(module.exports.setOriginalInfo({}));\n                return;\n            }\n            dispatch(module.exports.setOriginalInfo(body));\n        });\n    };\n};\nmodule.exports.getParentInfo = function (id) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('parent', module.exports.Status.FETCHING));\n        api({\n            uri: '/projects/' + id\n        }, function (err, body) {\n            if (err) {\n                dispatch(module.exports.setFetchStatus('parent', module.exports.Status.ERROR));\n                dispatch(module.exports.setError(err));\n                return;\n            }\n            if (typeof body === 'undefined') {\n                dispatch(module.exports.setFetchStatus('parent', module.exports.Status.ERROR));\n                dispatch(module.exports.setError('No parent info'));\n                return;\n            }\n            dispatch(module.exports.setFetchStatus('parent', module.exports.Status.FETCHED));\n            if (body && body.code === 'NotFound') {\n                dispatch(module.exports.setParentInfo({}));\n                return;\n            }\n            dispatch(module.exports.setParentInfo(body));\n        });\n    };\n};\nmodule.exports.getFavedStatus = function (id, username, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('faved', module.exports.Status.FETCHING));\n        api({\n            uri: '/projects/' + id + '/favorites/user/' + username,\n            authentication: token\n        }, function (err, body) {\n            if (err) {\n                dispatch(module.exports.setFetchStatus('faved', module.exports.Status.ERROR));\n                dispatch(module.exports.setError(err));\n                return;\n            }\n            if (typeof body === 'undefined') {\n                dispatch(module.exports.setFetchStatus('faved', module.exports.Status.ERROR));\n                dispatch(module.exports.setError('No faved info'));\n                return;\n            }\n            dispatch(module.exports.setFetchStatus('faved', module.exports.Status.FETCHED));\n            dispatch(module.exports.setFaved(body.userFavorite));\n        });\n    };\n};\nmodule.exports.getTopLevelComments = function (id, offset, ownerUsername, isAdmin, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('comments', module.exports.Status.FETCHING));\n        api({\n            uri: (isAdmin ? '/admin' : '/users/' + ownerUsername) + '/projects/' + id + '/comments',\n            authentication: token ? token : null,\n            params: { offset: offset || 0, limit: COMMENT_LIMIT }\n        }, function (err, body, res) {\n            if (err) {\n                dispatch(module.exports.setFetchStatus('comments', module.exports.Status.ERROR));\n                dispatch(module.exports.setError(err));\n                return;\n            }\n            if (typeof body === 'undefined' || res.statusCode >= 400) {\n                // NotFound\n                dispatch(module.exports.setFetchStatus('comments', module.exports.Status.ERROR));\n                dispatch(module.exports.setError('No comment info'));\n                return;\n            }\n            dispatch(module.exports.setFetchStatus('comments', module.exports.Status.FETCHED));\n            dispatch(module.exports.setComments(body));\n            dispatch(module.exports.getReplies(id, body.map(function (comment) {\n                return comment.id;\n            }), 0, ownerUsername, isAdmin, token));\n            // If we loaded a full page of comments, assume there are more to load.\n            // This will be wrong (1 / COMMENT_LIMIT) of the time, but does not require\n            // any more server query complexity, so seems worth it. In the case of a project with\n            // number of comments divisible by the COMMENT_LIMIT, the load more button will be\n            // clickable, but upon clicking it will go away.\n            dispatch(module.exports.setMoreCommentsToLoad(body.length === COMMENT_LIMIT));\n        });\n    };\n};\nmodule.exports.getCommentById = function (projectId, commentId, ownerUsername, isAdmin, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('comments', module.exports.Status.FETCHING));\n        api({\n            uri: (isAdmin ? '/admin' : '/users/' + ownerUsername) + '/projects/' + projectId + '/comments/' + commentId,\n            authentication: token ? token : null\n        }, function (err, body, res) {\n            if (err) {\n                dispatch(module.exports.setFetchStatus('comments', module.exports.Status.ERROR));\n                dispatch(module.exports.setError(err));\n                return;\n            }\n            if (!body || res.statusCode >= 400) {\n                // NotFound\n                dispatch(module.exports.setFetchStatus('comments', module.exports.Status.ERROR));\n                dispatch(module.exports.setError('No comment info'));\n                return;\n            }\n            if (body.parent_id) {\n                // If the comment is a reply, load the parent\n                return dispatch(module.exports.getCommentById(projectId, body.parent_id, ownerUsername, isAdmin, token));\n            }\n            // If the comment is not a reply, show it as top level and load replies\n            dispatch(module.exports.setFetchStatus('comments', module.exports.Status.FETCHED));\n            dispatch(module.exports.setComments([body]));\n            dispatch(module.exports.getReplies(projectId, [body.id], 0, ownerUsername, isAdmin, token));\n        });\n    };\n};\nmodule.exports.getReplies = function (projectId, commentIds, offset, ownerUsername, isAdmin, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('replies', module.exports.Status.FETCHING));\n        var fetchedReplies = {};\n        eachLimit(commentIds, 10, function (parentId, callback) {\n            api({\n                uri: (isAdmin ? '/admin' : '/users/' + ownerUsername) + '/projects/' + projectId + '/comments/' + parentId + '/replies',\n                authentication: token ? token : null,\n                params: { offset: offset || 0, limit: COMMENT_LIMIT }\n            }, function (err, body, res) {\n                if (err) {\n                    return callback('Error fetching comment replies: ' + err);\n                }\n                if (typeof body === 'undefined' || res.statusCode >= 400) {\n                    // NotFound\n                    return callback('No comment reply information');\n                }\n                fetchedReplies[parentId] = body;\n                callback(null, body);\n            });\n        }, function (err) {\n            if (err) {\n                dispatch(module.exports.setFetchStatus('replies', module.exports.Status.ERROR));\n                dispatch(module.exports.setError(err));\n                return;\n            }\n            dispatch(module.exports.setFetchStatus('replies', module.exports.Status.FETCHED));\n            dispatch(module.exports.setReplies(fetchedReplies));\n        });\n    };\n};\nmodule.exports.setFavedStatus = function (faved, id, username, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('faved', module.exports.Status.FETCHING));\n        if (faved) {\n            api({\n                uri: '/projects/' + id + '/favorites/user/' + username,\n                authentication: token,\n                method: 'POST'\n            }, function (err, body) {\n                if (err) {\n                    dispatch(module.exports.setError(err));\n                    return;\n                }\n                if (typeof body === 'undefined') {\n                    dispatch(module.exports.setError('Set favorites returned no data'));\n                    return;\n                }\n                dispatch(module.exports.setFetchStatus('faved', module.exports.Status.FETCHED));\n                dispatch(module.exports.setFaved(body.userFavorite));\n            });\n        } else {\n            api({\n                uri: '/projects/' + id + '/favorites/user/' + username,\n                authentication: token,\n                method: 'DELETE'\n            }, function (err, body) {\n                if (err) {\n                    dispatch(module.exports.setError(err));\n                    return;\n                }\n                if (typeof body === 'undefined') {\n                    dispatch(module.exports.setError('Set favorites returned no data'));\n                    return;\n                }\n                dispatch(module.exports.setFetchStatus('faved', module.exports.Status.FETCHED));\n                dispatch(module.exports.setFaved(false));\n            });\n        }\n    };\n};\nmodule.exports.setFavedStatusViaProxy = function (faved, id, username, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('faved', module.exports.Status.FETCHING));\n        if (faved) {\n            api({\n                uri: '/proxy/projects/' + id + '/favorites/user/' + username,\n                authentication: token,\n                withCredentials: true,\n                method: 'POST',\n                useCsrf: true,\n                headers: { 'X-Requested-With': 'XMLHttpRequest' }\n            }, function (err, body, res) {\n                if (err || res.statusCode !== 200) {\n                    dispatch(module.exports.setError(err));\n                    return;\n                }\n                if (typeof body === 'undefined') {\n                    dispatch(module.exports.setError('Set favorites returned no data'));\n                    return;\n                }\n                dispatch(module.exports.setFetchStatus('faved', module.exports.Status.FETCHED));\n                dispatch(module.exports.setFaved(body.userFavorite));\n            });\n        } else {\n            api({\n                uri: '/proxy/projects/' + id + '/favorites/user/' + username,\n                authentication: token,\n                withCredentials: true,\n                method: 'DELETE',\n                useCsrf: true,\n                headers: { 'X-Requested-With': 'XMLHttpRequest' }\n            }, function (err, body, res) {\n                if (err || res.statusCode !== 200) {\n                    dispatch(module.exports.setError(err));\n                    return;\n                }\n                if (typeof body === 'undefined') {\n                    dispatch(module.exports.setError('Set favorites returned no data'));\n                    return;\n                }\n                dispatch(module.exports.setFetchStatus('faved', module.exports.Status.FETCHED));\n                dispatch(module.exports.setFaved(false));\n            });\n        }\n    };\n};\nmodule.exports.getLovedStatus = function (id, username, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('loved', module.exports.Status.FETCHING));\n        api({\n            uri: '/projects/' + id + '/loves/user/' + username,\n            authentication: token\n        }, function (err, body) {\n            if (err) {\n                dispatch(module.exports.setFetchStatus('loved', module.exports.Status.ERROR));\n                dispatch(module.exports.setError(err));\n                return;\n            }\n            if (typeof body === 'undefined') {\n                dispatch(module.exports.setFetchStatus('loved', module.exports.Status.ERROR));\n                dispatch(module.exports.setError('No loved info'));\n                return;\n            }\n            dispatch(module.exports.setFetchStatus('loved', module.exports.Status.FETCHED));\n            dispatch(module.exports.setLoved(body.userLove));\n        });\n    };\n};\nmodule.exports.setLovedStatus = function (loved, id, username, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('loved', module.exports.Status.FETCHING));\n        if (loved) {\n            api({\n                uri: '/projects/' + id + '/loves/user/' + username,\n                authentication: token,\n                method: 'POST'\n            }, function (err, body) {\n                if (err) {\n                    dispatch(module.exports.setError(err));\n                    return;\n                }\n                if (typeof body === 'undefined') {\n                    dispatch(module.exports.setError('Set loved returned no data'));\n                    return;\n                }\n                dispatch(module.exports.setFetchStatus('loved', module.exports.Status.FETCHED));\n                dispatch(module.exports.setLoved(body.userLove));\n            });\n        } else {\n            api({\n                uri: '/projects/' + id + '/loves/user/' + username,\n                authentication: token,\n                method: 'DELETE'\n            }, function (err, body) {\n                if (err) {\n                    dispatch(module.exports.setError(err));\n                    return;\n                }\n                if (typeof body === 'undefined') {\n                    dispatch(module.exports.setError('Set loved returned no data'));\n                    return;\n                }\n                dispatch(module.exports.setFetchStatus('loved', module.exports.Status.FETCHED));\n                dispatch(module.exports.setLoved(body.userLove));\n            });\n        }\n    };\n};\nmodule.exports.setLovedStatusViaProxy = function (loved, id, username, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('loved', module.exports.Status.FETCHING));\n        if (loved) {\n            api({\n                uri: '/proxy/projects/' + id + '/loves/user/' + username,\n                authentication: token,\n                withCredentials: true,\n                method: 'POST',\n                useCsrf: true,\n                headers: { 'X-Requested-With': 'XMLHttpRequest' }\n            }, function (err, body, res) {\n                if (err || res.statusCode !== 200) {\n                    dispatch(module.exports.setError(err));\n                    return;\n                }\n                if (typeof body === 'undefined') {\n                    dispatch(module.exports.setError('Set loved returned no data'));\n                    return;\n                }\n                dispatch(module.exports.setFetchStatus('loved', module.exports.Status.FETCHED));\n                dispatch(module.exports.setLoved(body.userLove));\n            });\n        } else {\n            api({\n                uri: '/proxy/projects/' + id + '/loves/user/' + username,\n                authentication: token,\n                withCredentials: true,\n                method: 'DELETE',\n                useCsrf: true,\n                headers: { 'X-Requested-With': 'XMLHttpRequest' }\n            }, function (err, body, res) {\n                if (err || res.statusCode !== 200) {\n                    dispatch(module.exports.setError(err));\n                    return;\n                }\n                if (typeof body === 'undefined') {\n                    dispatch(module.exports.setError('Set loved returned no data'));\n                    return;\n                }\n                dispatch(module.exports.setFetchStatus('loved', module.exports.Status.FETCHED));\n                dispatch(module.exports.setLoved(body.userLove));\n            });\n        }\n    };\n};\nmodule.exports.getRemixes = function (id) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('remixes', module.exports.Status.FETCHING));\n        api({\n            uri: '/projects/' + id + '/remixes?limit=5'\n        }, function (err, body) {\n            if (err) {\n                dispatch(module.exports.setFetchStatus('remixes', module.exports.Status.ERROR));\n                dispatch(module.exports.setError(err));\n                return;\n            }\n            if (typeof body === 'undefined') {\n                dispatch(module.exports.setFetchStatus('remixes', module.exports.Status.ERROR));\n                dispatch(module.exports.setError('No remixes info'));\n                return;\n            }\n            if (body.code === 'NotFound') {\n                // no remixes found, set body to empty array\n                body = [];\n            }\n            dispatch(module.exports.setFetchStatus('remixes', module.exports.Status.FETCHED));\n            dispatch(module.exports.setRemixes(body));\n        });\n    };\n};\nmodule.exports.getProjectStudios = function (id, ownerUsername, isAdmin, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('projectStudios', module.exports.Status.FETCHING));\n        var opts = {\n            uri: (isAdmin ? '/admin' : '/users/' + ownerUsername) + '/projects/' + id + '/studios'\n        };\n        if (token) {\n            Object.assign(opts, { authentication: token });\n        }\n        api(opts, function (err, body, res) {\n            if (err) {\n                dispatch(module.exports.setFetchStatus('projectStudios', module.exports.Status.ERROR));\n                dispatch(module.exports.setError(err));\n                return;\n            }\n            if (typeof body === 'undefined') {\n                dispatch(module.exports.setFetchStatus('projectStudios', module.exports.Status.ERROR));\n                dispatch(module.exports.setError('No projectStudios info'));\n                return;\n            }\n            if (res.statusCode === 404) {\n                // NotFound\n                body = [];\n            }\n            dispatch(module.exports.setFetchStatus('projectStudios', module.exports.Status.FETCHED));\n            dispatch(module.exports.setProjectStudios(body));\n        });\n    };\n};\nmodule.exports.getCuratedStudios = function (username) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('curatedStudios', module.exports.Status.FETCHING));\n        api({\n            uri: '/users/' + username + '/studios/curate'\n        }, function (err, body, res) {\n            if (err) {\n                dispatch(module.exports.setFetchStatus('curatedStudios', module.exports.Status.ERROR));\n                dispatch(module.exports.setError(err));\n                return;\n            }\n            if (typeof body === 'undefined') {\n                dispatch(module.exports.setFetchStatus('curatedStudios', module.exports.Status.ERROR));\n                dispatch(module.exports.setError('No curated studios info'));\n                return;\n            }\n            if (res.statusCode === 404) {\n                // NotFound\n                body = [];\n            }\n            dispatch(module.exports.setFetchStatus('curatedStudios', module.exports.Status.FETCHED));\n            dispatch(module.exports.setCuratedStudios(body));\n        });\n    };\n};\nmodule.exports.addToStudio = function (studioId, projectId, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setStudioFetchStatus(studioId, module.exports.Status.FETCHING));\n        api({\n            uri: '/studios/' + studioId + '/project/' + projectId,\n            authentication: token,\n            method: 'POST'\n        }, function (err, body) {\n            if (err) {\n                dispatch(module.exports.setError(err));\n                return;\n            }\n            if (typeof body === 'undefined') {\n                dispatch(module.exports.setError('Add to studio returned no data'));\n                return;\n            }\n            dispatch(module.exports.setStudioFetchStatus(studioId, module.exports.Status.FETCHED));\n            dispatch(module.exports.addProjectToStudio(studioId));\n        });\n    };\n};\nmodule.exports.leaveStudio = function (studioId, projectId, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setStudioFetchStatus(studioId, module.exports.Status.FETCHING));\n        api({\n            uri: '/studios/' + studioId + '/project/' + projectId,\n            authentication: token,\n            method: 'DELETE'\n        }, function (err, body) {\n            if (err) {\n                dispatch(module.exports.setError(err));\n                return;\n            }\n            if (typeof body === 'undefined') {\n                dispatch(module.exports.setError('Leave studio returned no data'));\n                return;\n            }\n            dispatch(module.exports.setStudioFetchStatus(studioId, module.exports.Status.FETCHED));\n            dispatch(module.exports.removeProjectFromStudio(studioId));\n        });\n    };\n};\nmodule.exports.updateProject = function (id, jsonData, username, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('project', module.exports.Status.FETCHING));\n        api({\n            uri: '/projects/' + id,\n            authentication: token,\n            method: 'PUT',\n            json: jsonData\n        }, function (err, body, res) {\n            if (err) {\n                dispatch(module.exports.setFetchStatus('project', module.exports.Status.ERROR));\n                dispatch(module.exports.setError(err));\n                return;\n            }\n            if (typeof body === 'undefined') {\n                dispatch(module.exports.setFetchStatus('project', module.exports.Status.ERROR));\n                dispatch(module.exports.setError('No project info'));\n                return;\n            }\n            if (res.statusCode >= 400) {\n                // API responding with error\n                dispatch(module.exports.setFetchStatus('project', module.exports.Status.ERROR));\n                dispatch(module.exports.setError('API Error Response'));\n                return;\n            }\n            dispatch(module.exports.setFetchStatus('project', module.exports.Status.FETCHED));\n            dispatch(module.exports.setProjectInfo(body));\n        });\n    };\n};\nmodule.exports.deleteComment = function (projectId, commentId, topLevelCommentId, token) {\n    return function (dispatch) {\n        /* TODO fetching/fetched/error states updates for comment deleting */\n        api({\n            uri: '/proxy/comments/project/' + projectId + '/comment/' + commentId,\n            authentication: token,\n            withCredentials: true,\n            method: 'DELETE',\n            useCsrf: true\n        }, function (err, body, res) {\n            if (err || res.statusCode !== 200) {\n                log.error(err || res.body);\n                return;\n            }\n            dispatch(module.exports.setCommentDeleted(commentId, topLevelCommentId));\n            if (!topLevelCommentId) {\n                dispatch(module.exports.setRepliesDeleted(commentId));\n            }\n        });\n    };\n};\nmodule.exports.reportComment = function (projectId, commentId, topLevelCommentId, token) {\n    return function (dispatch) {\n        api({\n            uri: '/proxy/project/' + projectId + '/comment/' + commentId + '/report',\n            authentication: token,\n            withCredentials: true,\n            method: 'POST',\n            useCsrf: true\n        }, function (err, body, res) {\n            if (err || res.statusCode !== 200) {\n                log.error(err || res.body);\n                return;\n            }\n            // TODO use the reportId in the response for unreporting functionality\n            dispatch(module.exports.setCommentReported(commentId, topLevelCommentId));\n        });\n    };\n};\nmodule.exports.restoreComment = function (projectId, commentId, topLevelCommentId, token) {\n    return function (dispatch) {\n        api({\n            uri: '/proxy/admin/project/' + projectId + '/comment/' + commentId + '/undelete',\n            authentication: token,\n            withCredentials: true,\n            method: 'PUT',\n            useCsrf: true\n        }, function (err, body, res) {\n            if (err || res.statusCode !== 200) {\n                log.error(err || res.body);\n                return;\n            }\n            dispatch(module.exports.setCommentRestored(commentId, topLevelCommentId));\n            if (!topLevelCommentId) {\n                dispatch(module.exports.setRepliesRestored(commentId));\n            }\n        });\n    };\n};\nmodule.exports.shareProject = function (projectId, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('project', module.exports.Status.FETCHING));\n        api({\n            uri: '/proxy/projects/' + projectId + '/share',\n            authentication: token,\n            withCredentials: true,\n            method: 'PUT',\n            useCsrf: true\n        }, function (err, body, res) {\n            if (err || res.statusCode !== 200) {\n                dispatch(module.exports.setFetchStatus('project', module.exports.Status.ERROR));\n                dispatch(module.exports.setError(err));\n                return;\n            }\n            dispatch(module.exports.setFetchStatus('project', module.exports.Status.FETCHED));\n            dispatch(module.exports.updateProjectInfo(body));\n        });\n    };\n};\nmodule.exports.reportProject = function (id, jsonData, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('report', module.exports.Status.FETCHING));\n        // scratchr2 will fail if no thumbnail base64 string provided. If there is not one\n        // included for any reason, include this minimal blank image.\n        defaults(jsonData, {\n            thumbnail: 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC' + '0lEQVR42mP8/x8AAwMCAO+ip1sAAAAASUVORK5CYII='\n        });\n        api({\n            uri: '/proxy/projects/' + id + '/report',\n            authentication: token,\n            withCredentials: true,\n            method: 'POST',\n            useCsrf: true,\n            json: jsonData\n        }, function (err, body, res) {\n            if (err || res.statusCode !== 200) {\n                dispatch(module.exports.setFetchStatus('report', module.exports.Status.ERROR));\n                return;\n            }\n            dispatch(module.exports.setFetchStatus('report', module.exports.Status.FETCHED));\n        });\n    };\n};\nmodule.exports.updateProjectThumbnail = function (id, blob) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('project-thumbnail', module.exports.Status.FETCHING));\n        api({\n            uri: '/internalapi/project/thumbnail/' + id + '/set/',\n            method: 'POST',\n            headers: {\n                'Content-Type': 'image/png'\n            },\n            withCredentials: true,\n            useCsrf: true,\n            body: blob,\n            host: '' // Not handled by the API, use existing infrastructure\n        }, function (err, body, res) {\n            if (err || res.statusCode !== 200) {\n                dispatch(module.exports.setFetchStatus('project-thumbnail', module.exports.Status.ERROR));\n                return;\n            }\n            dispatch(module.exports.setFetchStatus('project-thumbnail', module.exports.Status.FETCHED));\n        });\n    };\n};\nmodule.exports.logProjectView = function (id, authorUsername, token) {\n    return function (dispatch) {\n        dispatch(module.exports.setFetchStatus('project-log-view', module.exports.Status.FETCHING));\n        api({\n            uri: '/users/' + authorUsername + '/projects/' + id + '/views',\n            method: 'POST',\n            authentication: token,\n            withCredentials: true,\n            useCsrf: true\n        }, function (err, body, res) {\n            if (err || res.statusCode !== 200) {\n                dispatch(module.exports.setFetchStatus('project-log-view', module.exports.Status.ERROR));\n                return;\n            }\n            dispatch(module.exports.setFetchStatus('project-log-view', module.exports.Status.FETCHED));\n        });\n    };\n};\n// ./src/redux/preview.js\n// module id = 271\n// module chunks = 0 8\n//# sourceURL=scratch:///./src/redux/preview.js?");
 })