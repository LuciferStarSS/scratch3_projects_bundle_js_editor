/* 581 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\nvar _formik = __webpack_require__(167);\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\nvar bindAll = __webpack_require__(9);\nvar classNames = __webpack_require__(5);\nvar React = __webpack_require__(0);\nvar PropTypes = __webpack_require__(1);\nvar _require = __webpack_require__(4),\n    injectIntl = _require.injectIntl,\n    intlShape = _require.intlShape;\nvar countryData = __webpack_require__(237);\nvar FormikSelect = __webpack_require__(486);\nvar JoinFlowStep = __webpack_require__(190);\nvar FormikCheckbox = __webpack_require__(485);\n__webpack_require__(197);\nvar CountryStep = function (_React$Component) {\n    _inherits(CountryStep, _React$Component);\n    function CountryStep(props) {\n        _classCallCheck(this, CountryStep);\n        var _this = _possibleConstructorReturn(this, (CountryStep.__proto__ || Object.getPrototypeOf(CountryStep)).call(this, props));\n        bindAll(_this, ['handleValidSubmit', 'validateForm', 'validateSelect']);\n        _this.countryOptions = [];\n        return _this;\n    }\n    _createClass(CountryStep, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            if (this.props.sendAnalytics) {\n                this.props.sendAnalytics('join-country');\n            }\n            this.setCountryOptions();\n        }\n    }, {\n        key: 'setCountryOptions',\n        value: function setCountryOptions() {\n            if (this.countryOptions.length === 0) {\n                this.countryOptions = [].concat(_toConsumableArray(countryData.registrationCountryNameOptions));\n                this.countryOptions.unshift({ // add placeholder as first option\n                    disabled: true,\n                    label: this.props.intl.formatMessage({ id: 'registration.selectCountry' }),\n                    value: 'null'\n                });\n            }\n        }\n    }, {\n        key: 'validateSelect',\n        value: function validateSelect(selection) {\n            if (selection === 'null') {\n                return this.props.intl.formatMessage({ id: 'general.required' });\n            }\n            return null;\n        }\n    }, {\n        key: 'validateForm',\n        value: function validateForm() {\n            return {};\n        }\n    }, {\n        key: 'handleValidSubmit',\n        value: function handleValidSubmit(formData, formikBag) {\n            formikBag.setSubmitting(false);\n            this.props.onNextStep(formData);\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this2 = this;\n            this.setCountryOptions();\n            return React.createElement(\n                _formik.Formik,\n                {\n                    initialValues: {\n                        country: 'null'\n                    },\n                    validate: this.validateForm,\n                    validateOnBlur: false,\n                    validateOnChange: false,\n                    onSubmit: this.handleValidSubmit\n                },\n                function (props) {\n                    var errors = props.errors,\n                        handleSubmit = props.handleSubmit,\n                        isSubmitting = props.isSubmitting,\n                        setFieldError = props.setFieldError;\n                    return React.createElement(\n                        JoinFlowStep,\n                        {\n                            headerImgClass: 'country-step-image',\n                            headerImgSrc: '/images/join-flow/country-header.png',\n                            innerClassName: 'join-flow-inner-country-step',\n                            title: _this2.props.intl.formatMessage({ id: 'registration.countryStepTitle' }),\n                            titleClassName: 'join-flow-country-title',\n                            waiting: isSubmitting,\n                            onSubmit: handleSubmit\n                        },\n                        React.createElement(\n                            'div',\n                            {\n                                className: classNames('col-sm-9', 'row')\n                            },\n                            React.createElement(FormikSelect, {\n                                className: classNames('join-flow-select', 'join-flow-select-country', { fail: errors.country }),\n                                error: errors.country,\n                                id: 'country',\n                                name: 'country',\n                                options: _this2.countryOptions,\n                                validate: _this2.validateSelect,\n                                validationClassName: classNames('validation-full-width-input', 'validation-country')\n                                /* eslint-disable react/jsx-no-bind */\n                                , onFocus: function onFocus() {\n                                    return setFieldError('country', null);\n                                }\n                                /* eslint-enable react/jsx-no-bind */\n                            }),\n                            React.createElement(FormikCheckbox, {\n                                id: 'yesno',\n                                label: _this2.props.intl.formatMessage({ id: 'registration.receiveEmails' }),\n                                name: 'yesno',\n                                outerClassName: 'yesNoCheckbox'\n                            })\n                        )\n                    );\n                }\n            );\n        }\n    }]);\n    return CountryStep;\n}(React.Component);\nCountryStep.propTypes = {\n    intl: intlShape,\n    onNextStep: PropTypes.func,\n    sendAnalytics: PropTypes.func.isRequired\n};\nvar IntlCountryStep = injectIntl(CountryStep);\nmodule.exports = IntlCountryStep;\n// ./src/components/join-flow/country-step.jsx\n// module id = 581\n// module chunks = 0 1\n//# sourceURL=scratch:///./src/components/join-flow/country-step.jsx?");
 })