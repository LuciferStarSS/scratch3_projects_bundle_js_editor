/* 582 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\nvar _formik = __webpack_require__(167);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\nvar bindAll = __webpack_require__(9);\nvar classNames = __webpack_require__(5);\nvar React = __webpack_require__(0);\nvar PropTypes = __webpack_require__(1);\nvar _require = __webpack_require__(4),\n    injectIntl = _require.injectIntl,\n    intlShape = _require.intlShape;\nvar FormattedMessage = __webpack_require__(4).FormattedMessage;\nvar validate = __webpack_require__(453);\nvar JoinFlowStep = __webpack_require__(190);\nvar FormikInput = __webpack_require__(450);\nvar InfoButton = __webpack_require__(451);\nvar Captcha = __webpack_require__(236);\n__webpack_require__(197);\nvar EmailStep = function (_React$Component) {\n    _inherits(EmailStep, _React$Component);\n    function EmailStep(props) {\n        _classCallCheck(this, EmailStep);\n        var _this = _possibleConstructorReturn(this, (EmailStep.__proto__ || Object.getPrototypeOf(EmailStep)).call(this, props));\n        bindAll(_this, ['handleSetEmailRef', 'handleValidSubmit', 'validateEmail', 'validateEmailRemotelyWithCache', 'validateForm', 'setCaptchaRef', 'handleCaptchaSolved', 'handleCaptchaLoad']);\n        _this.state = {\n            captchaIsLoading: true\n        };\n        // simple object to memoize remote requests for email addresses.\n        // keeps us from submitting multiple requests for same data.\n        _this.emailRemoteCache = {};\n        return _this;\n    }\n    _createClass(EmailStep, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            if (this.props.sendAnalytics) {\n                this.props.sendAnalytics('join-email');\n            }\n            // automatically start with focus on username field\n            if (this.emailInput) this.emailInput.focus();\n        }\n    }, {\n        key: 'handleSetEmailRef',\n        value: function handleSetEmailRef(emailInputRef) {\n            this.emailInput = emailInputRef;\n        }\n    }, {\n        key: 'handleCaptchaLoad',\n        value: function handleCaptchaLoad() {\n            this.setState({ captchaIsLoading: false });\n        }\n        // simple function to memoize remote requests for usernames\n    }, {\n        key: 'validateEmailRemotelyWithCache',\n        value: function validateEmailRemotelyWithCache(email) {\n            var _this2 = this;\n            if (this.emailRemoteCache.hasOwnProperty(email)) {\n                return Promise.resolve(this.emailRemoteCache[email]);\n            }\n            // email is not in our cache\n            return validate.validateEmailRemotely(email).then(function (remoteResult) {\n                // cache result, if it successfully heard back from server\n                if (remoteResult.requestSucceeded) {\n                    _this2.emailRemoteCache[email] = remoteResult;\n                }\n                return remoteResult;\n            });\n        }\n    }, {\n        key: 'validateEmail',\n        value: function validateEmail(email) {\n            var _this3 = this;\n            if (!email) return this.props.intl.formatMessage({ id: 'general.required' });\n            var localResult = validate.validateEmailLocally(email);\n            if (!localResult.valid) return this.props.intl.formatMessage({ id: localResult.errMsgId });\n            return this.validateEmailRemotelyWithCache(email).then(function (remoteResult) {\n                if (remoteResult.valid === true) {\n                    return null;\n                }\n                return _this3.props.intl.formatMessage({ id: remoteResult.errMsgId });\n            });\n        }\n    }, {\n        key: 'validateForm',\n        value: function validateForm() {\n            return {};\n        }\n    }, {\n        key: 'handleValidSubmit',\n        value: function handleValidSubmit(formData, formikBag) {\n            this.formData = formData;\n            this.formikBag = formikBag;\n            // Change set submitting to false so that if the user clicks out of\n            // the captcha, the button is clickable again (instead of a disabled button with a spinner).\n            this.formikBag.setSubmitting(false);\n            this.captchaRef.executeCaptcha();\n        }\n    }, {\n        key: 'handleCaptchaSolved',\n        value: function handleCaptchaSolved(token) {\n            // Now thatcaptcha is done, we can tell Formik we're submitting.\n            this.formikBag.setSubmitting(true);\n            this.formData['g-recaptcha-response'] = token;\n            this.props.onNextStep(this.formData);\n        }\n    }, {\n        key: 'setCaptchaRef',\n        value: function setCaptchaRef(ref) {\n            this.captchaRef = ref;\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this4 = this;\n            return React.createElement(\n                _formik.Formik,\n                {\n                    initialValues: {\n                        email: ''\n                    },\n                    validate: this.validateForm,\n                    validateOnBlur: false,\n                    validateOnChange: false,\n                    onSubmit: this.handleValidSubmit\n                },\n                function (props) {\n                    var errors = props.errors,\n                        handleSubmit = props.handleSubmit,\n                        isSubmitting = props.isSubmitting,\n                        setFieldError = props.setFieldError,\n                        setFieldTouched = props.setFieldTouched,\n                        setFieldValue = props.setFieldValue,\n                        validateField = props.validateField;\n                    return React.createElement(\n                        JoinFlowStep,\n                        {\n                            footerContent: React.createElement(FormattedMessage, {\n                                id: 'registration.acceptTermsOfUse',\n                                values: {\n                                    privacyPolicyLink: React.createElement(\n                                        'a',\n                                        {\n                                            className: 'join-flow-link',\n                                            href: '/privacy_policy',\n                                            target: '_blank'\n                                        },\n                                        React.createElement(FormattedMessage, { id: 'general.privacyPolicy' })\n                                    ),\n                                    touLink: React.createElement(\n                                        'a',\n                                        {\n                                            className: 'join-flow-link',\n                                            href: '/terms_of_use',\n                                            target: '_blank'\n                                        },\n                                        React.createElement(FormattedMessage, { id: 'general.termsOfUse' })\n                                    )\n                                }\n                            }),\n                            headerImgClass: 'email-step-image',\n                            headerImgSrc: '/images/join-flow/email-header.png',\n                            innerClassName: 'join-flow-inner-email-step',\n                            nextButton: _this4.props.intl.formatMessage({ id: 'registration.createAccount' }),\n                            title: _this4.props.intl.formatMessage({ id: 'registration.emailStepTitle' }),\n                            titleClassName: 'join-flow-email-title',\n                            waiting: _this4.props.waiting || isSubmitting || _this4.state.captchaIsLoading,\n                            onSubmit: handleSubmit\n                        },\n                        React.createElement(FormikInput, {\n                            autoCapitalize: 'off',\n                            autoComplete: 'off',\n                            autoCorrect: 'off',\n                            className: classNames('join-flow-input', 'join-flow-input-tall', { fail: errors.email }),\n                            error: errors.email,\n                            id: 'email',\n                            name: 'email',\n                            placeholder: _this4.props.intl.formatMessage({ id: 'general.emailAddress' }),\n                            type: 'email',\n                            validate: _this4.validateEmail,\n                            validationClassName: 'validation-full-width-input'\n                            /* eslint-disable react/jsx-no-bind */\n                            , onBlur: function onBlur() {\n                                return validateField('email');\n                            },\n                            onChange: function onChange(e) {\n                                setFieldValue('email', e.target.value.substring(0, 254));\n                                setFieldTouched('email');\n                                setFieldError('email', null);\n                            }\n                            /* eslint-enable react/jsx-no-bind */\n                            , onSetRef: _this4.handleSetEmailRef\n                        }),\n                        React.createElement(\n                            'div',\n                            { className: 'join-flow-privacy-message join-flow-email-privacy' },\n                            React.createElement(FormattedMessage, { id: 'registration.private' }),\n                            React.createElement(InfoButton, {\n                                message: _this4.props.intl.formatMessage({ id: 'registration.emailStepInfo' })\n                            })\n                        ),\n                        React.createElement(Captcha, {\n                            ref: _this4.setCaptchaRef,\n                            onCaptchaError: _this4.props.onCaptchaError,\n                            onCaptchaLoad: _this4.handleCaptchaLoad,\n                            onCaptchaSolved: _this4.handleCaptchaSolved\n                        })\n                    );\n                }\n            );\n        }\n    }]);\n    return EmailStep;\n}(React.Component);\nEmailStep.propTypes = {\n    intl: intlShape,\n    onCaptchaError: PropTypes.func,\n    onNextStep: PropTypes.func,\n    sendAnalytics: PropTypes.func.isRequired,\n    waiting: PropTypes.bool\n};\nmodule.exports = injectIntl(EmailStep);\n// ./src/components/join-flow/email-step.jsx\n// module id = 582\n// module chunks = 0 1\n//# sourceURL=scratch:///./src/components/join-flow/email-step.jsx?");
 })