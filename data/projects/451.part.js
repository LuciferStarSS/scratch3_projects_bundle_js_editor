/* 451 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\nvar bindAll = __webpack_require__(9);\nvar PropTypes = __webpack_require__(1);\nvar React = __webpack_require__(0);\nvar MediaQuery = __webpack_require__(60).default;\nvar frameless = __webpack_require__(54);\n__webpack_require__(736);\nvar InfoButton = function (_React$Component) {\n    _inherits(InfoButton, _React$Component);\n    function InfoButton(props) {\n        _classCallCheck(this, InfoButton);\n        var _this = _possibleConstructorReturn(this, (InfoButton.__proto__ || Object.getPrototypeOf(InfoButton)).call(this, props));\n        bindAll(_this, ['handleClick', 'handleMouseLeave', 'handleShowMessage', 'setButtonRef']);\n        _this.state = {\n            requireClickToClose: false, // default to closing on mouseout\n            visible: false\n        };\n        return _this;\n    }\n    _createClass(InfoButton, [{\n        key: 'componentWillMount',\n        value: function componentWillMount() {\n            window.addEventListener('mousedown', this.handleClick, false);\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            window.removeEventListener('mousedown', this.handleClick, false);\n        }\n    }, {\n        key: 'handleClick',\n        value: function handleClick(e) {\n            if (this.buttonRef) {\n                // only handle click if we can tell whether it happened in this component\n                var newVisibleState = false; // for most clicks, hide the info message\n                if (this.buttonRef.contains(e.target)) {\n                    // if the click was inside the info icon...\n                    newVisibleState = !this.state.requireClickToClose; // toggle it\n                }\n                this.setState({\n                    requireClickToClose: newVisibleState,\n                    visible: newVisibleState\n                });\n            }\n        }\n    }, {\n        key: 'handleMouseLeave',\n        value: function handleMouseLeave() {\n            if (this.state.visible && !this.state.requireClickToClose) {\n                this.setState({ visible: false });\n            }\n        }\n    }, {\n        key: 'handleShowMessage',\n        value: function handleShowMessage() {\n            this.setState({ visible: true });\n        }\n    }, {\n        key: 'setButtonRef',\n        value: function setButtonRef(element) {\n            this.buttonRef = element;\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var messageJsx = this.state.visible && React.createElement(\n                'div',\n                { className: 'info-button-message' },\n                this.props.message\n            );\n            return React.createElement(\n                React.Fragment,\n                null,\n                React.createElement(\n                    'div',\n                    {\n                        className: 'info-button',\n                        ref: this.setButtonRef,\n                        onMouseLeave: this.handleMouseLeave,\n                        onMouseOver: this.handleShowMessage\n                    },\n                    React.createElement(\n                        MediaQuery,\n                        { minWidth: frameless.desktop },\n                        messageJsx\n                    )\n                ),\n                React.createElement(\n                    MediaQuery,\n                    { maxWidth: frameless.desktop - 1 },\n                    React.createElement(\n                        'div',\n                        { style: { position: 'relative' } },\n                        messageJsx\n                    )\n                )\n            );\n        }\n    }]);\n    return InfoButton;\n}(React.Component);\nInfoButton.propTypes = {\n    message: PropTypes.string.isRequired\n};\nmodule.exports = InfoButton;\n// ./src/components/info-button/info-button.jsx\n// module id = 451\n// module chunks = 0 1\n//# sourceURL=scratch:///./src/components/info-button/info-button.jsx?");
 })