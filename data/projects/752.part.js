/* 752 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\nvar bindAll = __webpack_require__(9);\nvar React = __webpack_require__(0);\nvar PropTypes = __webpack_require__(1);\nvar FRCInput = __webpack_require__(112).Input;\nvar FRCTextarea = __webpack_require__(112).Textarea;\nvar classNames = __webpack_require__(5);\n__webpack_require__(61);\n__webpack_require__(1411);\nvar InplaceInput = function (_React$Component) {\n    _inherits(InplaceInput, _React$Component);\n    function InplaceInput(props) {\n        _classCallCheck(this, InplaceInput);\n        var _this = _possibleConstructorReturn(this, (InplaceInput.__proto__ || Object.getPrototypeOf(InplaceInput)).call(this, props));\n        bindAll(_this, ['handleBlur', 'setRef']);\n        return _this;\n    }\n    _createClass(InplaceInput, [{\n        key: 'handleBlur',\n        value: function handleBlur(name, value) {\n            if (this.inputRef.props.errorMessages.length === 0) {\n                var jsonData = {};\n                jsonData[name] = value;\n                this.props.handleUpdate(jsonData);\n            }\n        }\n    }, {\n        key: 'setRef',\n        value: function setRef(input) {\n            this.inputRef = input;\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _props = this.props,\n                className = _props.className,\n                type = _props.type,\n                handleUpdate = _props.handleUpdate,\n                props = _objectWithoutProperties(_props, ['className', 'type', 'handleUpdate']);\n            return type === 'textarea' ? React.createElement(FRCTextarea, _extends({\n                className: 'inplace-textarea',\n                componentRef: this.setRef,\n                elementWrapperClassName: 'grow',\n                label: null,\n                rowClassName: classNames('textarea-row no-label', className),\n                onBlur: this.handleBlur\n            }, props)) : React.createElement(FRCInput, _extends({\n                className: 'inplace-input',\n                componentRef: this.setRef,\n                rowClassName: classNames(className, 'no-label'),\n                onBlur: this.handleBlur\n            }, props));\n        }\n    }]);\n    return InplaceInput;\n}(React.Component);\nInplaceInput.propTypes = {\n    className: PropTypes.string,\n    handleUpdate: PropTypes.func.isRequired,\n    type: PropTypes.string\n};\nInplaceInput.defaultProps = {\n    type: 'text',\n    value: ''\n};\nmodule.exports = InplaceInput;\n// ./src/components/forms/inplace-input.jsx\n// module id = 752\n// module chunks = 0\n//# sourceURL=scratch:///./src/components/forms/inplace-input.jsx?");
 })