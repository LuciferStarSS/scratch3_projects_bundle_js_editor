/* 755 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar React = __webpack_require__(0);\nvar PropTypes = __webpack_require__(1);\nvar bindAll = __webpack_require__(9);\nvar classNames = __webpack_require__(5);\nvar keyMirror = __webpack_require__(261);\nvar FormattedMessage = __webpack_require__(4).FormattedMessage;\n\nvar Formsy = __webpack_require__(270).default;\nvar FlexRow = __webpack_require__(12);\nvar Avatar = __webpack_require__(40);\nvar InplaceInput = __webpack_require__(752);\nvar Button = __webpack_require__(15);\nvar CommentingStatus = __webpack_require__(907);\nvar MuteModal = __webpack_require__(920);\nvar formatTime = __webpack_require__(934);\n\nvar connect = __webpack_require__(13).connect;\n\nvar api = __webpack_require__(143);\n\n__webpack_require__(746);\n\nvar onUpdate = function onUpdate(update) {\n    return update;\n};\n\nvar MAX_COMMENT_LENGTH = 500;\n\nvar ComposeStatus = keyMirror({\n    EDITING: null,\n    SUBMITTING: null,\n    REJECTED: null,\n    REJECTED_MUTE: null\n});\n\nvar ComposeComment = function (_React$Component) {\n    _inherits(ComposeComment, _React$Component);\n\n    function ComposeComment(props) {\n        _classCallCheck(this, ComposeComment);\n\n        var _this = _possibleConstructorReturn(this, (ComposeComment.__proto__ || Object.getPrototypeOf(ComposeComment)).call(this, props));\n\n        bindAll(_this, ['handlePost', 'handleCancel', 'handleInput', 'handleMuteClose', 'handleMuteOpen', 'isMuted', 'setupMuteExpirationTimeout']);\n        var muteExpiresAtMs = _this.props.muteStatus.muteExpiresAt ? _this.props.muteStatus.muteExpiresAt * 1000 : 0; // convert to ms\n        _this.state = {\n            message: '',\n            status: ComposeStatus.EDITING,\n            error: null,\n            appealId: null,\n            muteOpen: false,\n            muteExpiresAtMs: muteExpiresAtMs,\n            muteType: _this.props.muteStatus.currentMessageType,\n            showWarning: _this.props.muteStatus.showWarning ? _this.props.muteStatus.showWarning : false\n        };\n        if (_this.isMuted()) {\n            _this.setupMuteExpirationTimeout(muteExpiresAtMs);\n        }\n        return _this;\n    }\n\n    _createClass(ComposeComment, [{\n        key: 'setupMuteExpirationTimeout',\n        value: function setupMuteExpirationTimeout(muteExpiresAtMs) {\n            var _this2 = this;\n\n            // Change state when the mute expiration fires if the user is still on the page.\n            setTimeout(function () {\n                _this2.setState({ message: '', muteExpiresAtMs: 0, muteOpen: false, status: ComposeStatus.EDITING, error: null });\n            }, muteExpiresAtMs - Date.now());\n        }\n    }, {\n        key: 'handleInput',\n        value: function handleInput(event) {\n            this.setState({\n                message: event.target.value,\n                status: ComposeStatus.EDITING,\n                error: null,\n                appealId: null\n            });\n        }\n    }, {\n        key: 'handlePost',\n        value: function handlePost() {\n            var _this3 = this;\n\n            this.setState({ status: ComposeStatus.SUBMITTING });\n            api({\n                uri: '/proxy/comments/project/' + this.props.projectId,\n                authentication: this.props.user.token,\n                withCredentials: true,\n                method: 'POST',\n                useCsrf: true,\n                json: {\n                    content: this.state.message,\n                    parent_id: this.props.parentId || '',\n                    commentee_id: this.props.commenteeId || ''\n                }\n            }, function (err, body, res) {\n                if (err || res.statusCode !== 200) {\n                    body = { rejected: 'error' };\n                }\n                if (body.rejected && _this3.state.status === ComposeStatus.SUBMITTING) {\n                    var muteOpen = false;\n                    var muteExpiresAtMs = 0;\n                    var rejectedStatus = ComposeStatus.REJECTED;\n                    var showWarning = false;\n                    var muteType = null;\n                    if (body.status && body.status.mute_status) {\n                        muteExpiresAtMs = body.status.mute_status.muteExpiresAt * 1000; // convert to ms\n                        rejectedStatus = ComposeStatus.REJECTED_MUTE;\n                        if (_this3.shouldShowMuteModal(body.status.mute_status)) {\n                            muteOpen = true;\n                        }\n                        showWarning = body.status.mute_status.showWarning;\n                        muteType = body.status.mute_status.currentMessageType;\n                        _this3.setupMuteExpirationTimeout(muteExpiresAtMs);\n                    }\n                    // Note: does not reset the message state\n                    _this3.setState({\n                        status: rejectedStatus,\n                        error: body.rejected,\n                        appealId: body.appealId,\n                        muteOpen: muteOpen,\n                        muteExpiresAtMs: muteExpiresAtMs,\n                        muteType: muteType,\n                        showWarning: showWarning\n                    });\n                    return;\n                }\n\n                // Clear the text field and reset status on successful submission\n                _this3.setState({\n                    message: '',\n                    status: ComposeStatus.EDITING,\n                    error: null,\n                    appealId: null\n                });\n\n                // Add the username, which isn't included right now from scratch-api\n                if (body.author) body.author.username = _this3.props.user.username;\n\n                _this3.props.onAddComment(body);\n            });\n        }\n    }, {\n        key: 'convertToMinutesFromNow',\n        value: function convertToMinutesFromNow(timeStampInSec) {\n            return Math.ceil((timeStampInSec * 1000 - Date.now()) / (60 * 1000));\n        }\n    }, {\n        key: 'isMuted',\n        value: function isMuted() {\n            return this.state.muteExpiresAtMs > Date.now();\n        }\n    }, {\n        key: 'handleMuteClose',\n        value: function handleMuteClose() {\n            this.setState({\n                muteOpen: false\n            });\n        }\n    }, {\n        key: 'handleMuteOpen',\n        value: function handleMuteOpen() {\n            this.setState({\n                muteOpen: true\n            });\n        }\n    }, {\n        key: 'shouldShowMuteModal',\n        value: function shouldShowMuteModal(muteStatus) {\n            // We should show the mute modal if the user is in danger of being blocked or\n            // when the user is newly muted or hasn't seen it for a while.\n            // We don't want to show it more than about once a week.\n            // A newly muted user has only 1 offense and it happened in the last coulpe of minutes.\n            // If a user has more than 1 offense, it means that they have have been muted in the\n            // last week.\n            // Assumption: The offenses list is ordered by time with the most recent at the end.\n\n            // This check is here just in case we somehow get bad data back from a backend.\n            if (!muteStatus || !muteStatus.offenses) {\n                return false;\n            }\n\n            // If the backend tells us to show a warning about getting blocked, we should show the modal\n            // regardless of what the offenses list looks like.\n            if (muteStatus.showWarning) {\n                return true;\n            }\n\n            var offensesList = muteStatus.offenses;\n            var numOffenses = offensesList.length;\n            // This isn't intended to be called if there are no offenses, but\n            // say no just in case.\n            if (numOffenses === 0) {\n                return false;\n            }\n\n            var mostRecent = offensesList[numOffenses - 1];\n            var creationTimeMinutesAgo = this.convertToMinutesFromNow(mostRecent.createdAt);\n            return creationTimeMinutesAgo < 2 && numOffenses === 1;\n        }\n    }, {\n        key: 'getMuteMessageInfo',\n        value: function getMuteMessageInfo() {\n            // return the ids for the messages that are shown for this mute type\n            // If mute modals have more than one unique \"step\" we could pass an array of steps\n            var messageInfo = {\n                pii: {\n                    commentType: 'comment.type.pii',\n                    muteStepHeader: 'comment.pii.header',\n                    muteStepContent: ['comment.pii.content1', 'comment.pii.content2', 'comment.pii.content3']\n                },\n                unconstructive: {\n                    commentType: 'comment.type.unconstructive',\n                    muteStepHeader: 'comment.unconstructive.header',\n                    muteStepContent: ['comment.unconstructive.content1', 'comment.unconstructive.content2']\n                },\n                vulgarity: {\n                    commentType: 'comment.type.vulgarity',\n                    muteStepHeader: 'comment.vulgarity.header',\n                    muteStepContent: ['comment.vulgarity.content1', 'comment.vulgarity.content2']\n                },\n                general: {\n                    commentType: 'comment.type.disrespectful',\n                    muteStepHeader: 'comment.disrespectful.header',\n                    muteStepContent: ['comment.disrespectful.content1', 'comment.disrespectful.content2']\n                }\n            };\n\n            if (this.state.muteType && messageInfo[this.state.muteType]) {\n                return messageInfo[this.state.muteType];\n            }\n            return messageInfo.general;\n        }\n    }, {\n        key: 'handleCancel',\n        value: function handleCancel() {\n            this.setState({\n                message: '',\n                status: ComposeStatus.EDITING,\n                error: null,\n                appealId: null\n            });\n            if (this.props.onCancel) this.props.onCancel();\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            return React.createElement(\n                React.Fragment,\n                null,\n                this.isMuted() ? React.createElement(\n                    FlexRow,\n                    { className: 'comment' },\n                    React.createElement(\n                        CommentingStatus,\n                        null,\n                        React.createElement(\n                            'p',\n                            null,\n                            React.createElement(FormattedMessage, { id: this.getMuteMessageInfo().commentType })\n                        ),\n                        React.createElement(\n                            'p',\n                            null,\n                            React.createElement(FormattedMessage, {\n                                id: 'comments.muted.duration',\n                                values: {\n                                    inDuration: formatTime.formatRelativeTime(this.state.muteExpiresAtMs, window._locale)\n                                }\n                            }),\n                            ' ',\n                            React.createElement(FormattedMessage, { id: 'comments.muted.commentingPaused' })\n                        ),\n                        React.createElement(\n                            'p',\n                            { className: 'bottom-text' },\n                            React.createElement(FormattedMessage, {\n                                id: 'comments.muted.moreInfoModal',\n                                values: { clickHereLink: React.createElement(\n                                        'a',\n                                        {\n                                            href: '#comment',\n                                            onClick: this.handleMuteOpen\n                                        },\n                                        React.createElement(FormattedMessage, { id: 'comments.muted.clickHereLinkText' })\n                                    ) }\n                            })\n                        )\n                    )\n                ) : null,\n                !this.isMuted() || this.isMuted() && this.state.status === ComposeStatus.REJECTED_MUTE ? React.createElement(\n                    'div',\n                    {\n                        className: classNames('flex-row', 'comment', this.state.status === ComposeStatus.REJECTED_MUTE ? 'compose-disabled' : '')\n                    },\n                    React.createElement(\n                        'a',\n                        { href: '/users/' + this.props.user.username },\n                        React.createElement(Avatar, { src: this.props.user.thumbnailUrl })\n                    ),\n                    React.createElement(\n                        FlexRow,\n                        { className: 'compose-comment column' },\n                        this.state.error && this.state.status !== ComposeStatus.REJECTED_MUTE ? React.createElement(\n                            FlexRow,\n                            { className: 'compose-error-row' },\n                            React.createElement(\n                                'div',\n                                { className: 'compose-error-tip' },\n                                React.createElement(FormattedMessage, {\n                                    id: 'comments.' + this.state.error,\n                                    values: {\n                                        appealId: this.state.appealId\n                                    }\n                                })\n                            )\n                        ) : null,\n                        React.createElement(\n                            Formsy,\n                            { className: 'full-width-form' },\n                            React.createElement(InplaceInput, {\n                                className: classNames('compose-input', MAX_COMMENT_LENGTH - this.state.message.length >= 0 ? 'compose-valid' : 'compose-invalid'),\n                                disabled: this.state.status === ComposeStatus.REJECTED_MUTE,\n                                handleUpdate: onUpdate,\n                                name: 'compose-comment',\n                                type: 'textarea',\n                                value: this.state.message,\n                                onInput: this.handleInput\n                            }),\n                            React.createElement(\n                                FlexRow,\n                                { className: 'compose-bottom-row' },\n                                React.createElement(\n                                    Button,\n                                    {\n                                        className: 'compose-post',\n                                        disabled: this.state.status === ComposeStatus.SUBMITTING,\n                                        onClick: this.handlePost\n                                    },\n                                    this.state.status === ComposeStatus.SUBMITTING ? React.createElement(FormattedMessage, { id: 'comments.posting' }) : React.createElement(FormattedMessage, { id: 'comments.post' })\n                                ),\n                                React.createElement(\n                                    Button,\n                                    {\n                                        className: 'compose-cancel',\n                                        onClick: this.handleCancel\n                                    },\n                                    React.createElement(FormattedMessage, { id: 'comments.cancel' })\n                                ),\n                                React.createElement(\n                                    'span',\n                                    {\n                                        className: classNames('compose-limit', MAX_COMMENT_LENGTH - this.state.message.length >= 0 ? 'compose-valid' : 'compose-invalid')\n                                    },\n                                    React.createElement(FormattedMessage, {\n                                        id: 'comments.lengthWarning',\n                                        values: {\n                                            remainingCharacters: MAX_COMMENT_LENGTH - this.state.message.length\n                                        }\n                                    })\n                                )\n                            )\n                        )\n                    )\n                ) : null,\n                this.state.muteOpen ? React.createElement(MuteModal, {\n                    isOpen: true,\n                    showCloseButton: true,\n                    useStandardSizes: true,\n                    className: 'mod-mute',\n                    muteModalMessages: this.getMuteMessageInfo(),\n                    shouldCloseOnOverlayClick: false,\n                    showWarning: this.state.showWarning,\n                    timeMuted: formatTime.formatRelativeTime(this.state.muteExpiresAtMs, window._locale),\n                    onRequestClose: this.handleMuteClose\n                }) : null\n            );\n        }\n    }]);\n\n    return ComposeComment;\n}(React.Component);\n\nComposeComment.propTypes = {\n    commenteeId: PropTypes.number,\n    muteStatus: PropTypes.shape({\n        offenses: PropTypes.array,\n        muteExpiresAt: PropTypes.number,\n        currentMessageType: PropTypes.string,\n        showWarning: PropTypes.bool\n    }),\n    onAddComment: PropTypes.func,\n    onCancel: PropTypes.func,\n    parentId: PropTypes.number,\n    projectId: PropTypes.string,\n    user: PropTypes.shape({\n        id: PropTypes.number,\n        username: PropTypes.string,\n        token: PropTypes.string,\n        thumbnailUrl: PropTypes.string\n    })\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n    return {\n        muteStatus: state.session.session.permissions.mute_status ? state.session.session.permissions.mute_status : { muteExpiresAt: 0, offenses: [], showWarning: false },\n        user: state.session.session.user\n    };\n};\n\nvar ConnectedComposeComment = connect(mapStateToProps)(ComposeComment);\n\nmodule.exports = ConnectedComposeComment;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/preview/comment/compose-comment.jsx\n// module id = 755\n// module chunks = 0\n\n//# sourceURL=scratch:///./src/views/preview/comment/compose-comment.jsx?");

/***/ })