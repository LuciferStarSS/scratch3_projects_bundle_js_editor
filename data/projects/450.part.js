/* 450 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\nvar _formik = __webpack_require__(167);\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\nvar classNames = __webpack_require__(5);\nvar PropTypes = __webpack_require__(1);\nvar React = __webpack_require__(0);\nvar ValidationMessage = __webpack_require__(189);\n__webpack_require__(61);\n__webpack_require__(732);\nvar FormikInput = function FormikInput(_ref) {\n    var className = _ref.className,\n        error = _ref.error,\n        onSetRef = _ref.onSetRef,\n        toolTip = _ref.toolTip,\n        validationClassName = _ref.validationClassName,\n        wrapperClassName = _ref.wrapperClassName,\n        props = _objectWithoutProperties(_ref, ['className', 'error', 'onSetRef', 'toolTip', 'validationClassName', 'wrapperClassName']);\n    return React.createElement(\n        'div',\n        {\n            className: classNames('col-sm-9', 'row', 'row-with-tooltip', wrapperClassName)\n        },\n        React.createElement(_formik.Field, _extends({\n            className: classNames('formik-input', { fail: error }, className)\n            /* formik uses \"innerRef\" to return the actual input element */\n            , innerRef: onSetRef\n        }, props)),\n        error ? React.createElement(ValidationMessage, {\n            className: validationClassName,\n            message: error,\n            mode: 'error'\n        }) : toolTip && React.createElement(ValidationMessage, {\n            className: validationClassName,\n            message: toolTip,\n            mode: 'info'\n        })\n    );\n};\nFormikInput.propTypes = {\n    className: PropTypes.string,\n    // error and toolTip can be false, in which case we ignore them\n    error: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    onSetRef: PropTypes.func,\n    toolTip: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    type: PropTypes.string,\n    validationClassName: PropTypes.string,\n    wrapperClassName: PropTypes.string\n};\nmodule.exports = FormikInput;\n// ./src/components/formik-forms/formik-input.jsx\n// module id = 450\n// module chunks = 0 1\n//# sourceURL=scratch:///./src/components/formik-forms/formik-input.jsx?");
 })