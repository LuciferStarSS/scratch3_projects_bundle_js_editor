/* 915 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\nvar bindAll = __webpack_require__(9);\nvar PropTypes = __webpack_require__(1);\nvar React = __webpack_require__(0);\nvar AddToStudioModalPresentation = __webpack_require__(916);\nvar AddToStudioModal = function (_React$Component) {\n    _inherits(AddToStudioModal, _React$Component);\n    function AddToStudioModal(props) {\n        _classCallCheck(this, AddToStudioModal);\n        var _this = _possibleConstructorReturn(this, (AddToStudioModal.__proto__ || Object.getPrototypeOf(AddToStudioModal)).call(this, props));\n        bindAll(_this, ['handleRequestClose', 'handleSubmit', 'handleToggleStudio']);\n        _this.state = {\n            waitingToClose: false\n        };\n        return _this;\n    }\n    _createClass(AddToStudioModal, [{\n        key: 'componentWillUpdate',\n        value: function componentWillUpdate() {\n            this.closeIfFinishedUpdating();\n        }\n    }, {\n        key: 'hasOutstandingUpdates',\n        value: function hasOutstandingUpdates() {\n            return this.props.studios.some(function (studio) {\n                return studio.hasRequestOutstanding === true;\n            });\n        }\n    }, {\n        key: 'closeIfFinishedUpdating',\n        value: function closeIfFinishedUpdating() {\n            if (this.state.waitingToClose === true && this.hasOutstandingUpdates() === false) {\n                this.closeAndStopWaiting();\n            }\n        }\n        // before closing, set waitingToClose to false. That way, if user reopens\n        // modal, it won't unexpectedly close.\n    }, {\n        key: 'closeAndStopWaiting',\n        value: function closeAndStopWaiting() {\n            var _this2 = this;\n            this.setState({ waitingToClose: false }, function () {\n                _this2.props.onRequestClose();\n            });\n        }\n    }, {\n        key: 'handleRequestClose',\n        value: function handleRequestClose() {\n            this.closeAndStopWaiting();\n        }\n    }, {\n        key: 'handleSubmit',\n        value: function handleSubmit() {\n            var _this3 = this;\n            this.setState({ waitingToClose: true }, function () {\n                _this3.closeIfFinishedUpdating();\n            });\n        }\n    }, {\n        key: 'handleToggleStudio',\n        value: function handleToggleStudio(id) {\n            var studioId = parseInt(id, 10);\n            if (isNaN(studioId)) {\n                // sanity check in case event had no integer data-id\n                return;\n            }\n            this.props.onToggleStudio(this.props.studios.find(function (studio) {\n                return studio.id === studioId;\n            }));\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            return React.createElement(AddToStudioModalPresentation, {\n                isOpen: this.props.isOpen,\n                studios: this.props.studios,\n                waitingToClose: this.state.waitingToClose,\n                onRequestClose: this.handleRequestClose,\n                onSubmit: this.handleSubmit,\n                onToggleStudio: this.handleToggleStudio\n            });\n        }\n    }]);\n    return AddToStudioModal;\n}(React.Component);\nAddToStudioModal.propTypes = {\n    isOpen: PropTypes.bool,\n    onRequestClose: PropTypes.func,\n    onToggleStudio: PropTypes.func,\n    studios: PropTypes.arrayOf(PropTypes.object)\n};\nmodule.exports = AddToStudioModal;\n// ./src/components/modal/addtostudio/container.jsx\n// module id = 915\n// module chunks = 0\n//# sourceURL=scratch:///./src/components/modal/addtostudio/container.jsx?");
 })