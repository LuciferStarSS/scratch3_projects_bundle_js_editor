/* 550 */
 (function(module, exports, __webpack_require__) {
"use strict";
eval("\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nvar TextDecoder = __webpack_require__(832).TextDecoder;\nvar TextEncoder = __webpack_require__(832).TextEncoder;\nvar base64js = __webpack_require__(756);\nvar memoizedToString = function () {\n    var strings = {};\n    return function (assetId, data) {\n        if (!strings.hasOwnProperty(assetId)) {\n            strings[assetId] = base64js.fromByteArray(data);\n        }\n        return strings[assetId];\n    };\n}();\nvar Asset = function () {\n    /**\n     * Construct an Asset.\n     * @param {AssetType} assetType - The type of this asset (sound, image, etc.)\n     * @param {string} assetId - The ID of this asset.\n     * @param {DataFormat} [dataFormat] - The format of the data (WAV, PNG, etc.); required iff `data` is present.\n     * @param {Buffer} [data] - The in-memory data for this asset; optional.\n     */\n    function Asset(assetType, assetId, dataFormat, data) {\n        _classCallCheck(this, Asset);\n        /** @type {AssetType} */\n        this.assetType = assetType;\n        /** @type {string} */\n        this.assetId = assetId;\n        this.setData(data, dataFormat || assetType.runtimeFormat);\n        /** @type {Asset[]} */\n        this.dependencies = [];\n    }\n    _createClass(Asset, [{\n        key: 'setData',\n        value: function setData(data, dataFormat) {\n            if (data && !dataFormat) {\n                throw new Error('Data provided without specifying its format');\n            }\n            /** @type {DataFormat} */\n            this.dataFormat = dataFormat;\n            /** @type {Buffer} */\n            this.data = data;\n        }\n        /**\n         * @returns {string} - This asset's data, decoded as text.\n         */\n    }, {\n        key: 'decodeText',\n        value: function decodeText() {\n            var decoder = new TextDecoder();\n            return decoder.decode(this.data);\n        }\n        /**\n         * Same as `setData` but encodes text first.\n         * @param {string} data - the text data to encode and store.\n         * @param {DataFormat} dataFormat - the format of the data (DataFormat.SVG for example).\n         */\n    }, {\n        key: 'encodeTextData',\n        value: function encodeTextData(data, dataFormat) {\n            var encoder = new TextEncoder();\n            this.setData(encoder.encode(data), dataFormat);\n        }\n        /**\n         * @param {string} [contentType] - Optionally override the content type to be included in the data URI.\n         * @returns {string} - A data URI representing the asset's data.\n         */\n    }, {\n        key: 'encodeDataURI',\n        value: function encodeDataURI(contentType) {\n            contentType = contentType || this.assetType.contentType;\n            return 'data:' + contentType + ';base64,' + memoizedToString(this.assetId, this.data);\n        }\n    }]);\n    return Asset;\n}();\nmodule.exports = Asset;\n// ./~/scratch-storage/src/Asset.js\n// module id = 550\n// module chunks = 0\n//# sourceURL=scratch:///./~/scratch-storage/src/Asset.js?");
 })