/* 987 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar React = __webpack_require__(0);\nvar PropTypes = __webpack_require__(1);\nvar bindAll = __webpack_require__(9);\nvar classNames = __webpack_require__(5);\nvar FormattedMessage = __webpack_require__(4).FormattedMessage;\n\nvar FlexRow = __webpack_require__(12);\nvar Comment = __webpack_require__(986);\n\n__webpack_require__(746);\n\nvar TopLevelComment = function (_React$Component) {\n    _inherits(TopLevelComment, _React$Component);\n\n    function TopLevelComment(props) {\n        _classCallCheck(this, TopLevelComment);\n\n        var _this = _possibleConstructorReturn(this, (TopLevelComment.__proto__ || Object.getPrototypeOf(TopLevelComment)).call(this, props));\n\n        bindAll(_this, ['handleExpandThread', 'handleAddComment', 'handleDeleteReply', 'handleReportReply', 'handleRestoreReply']);\n        _this.state = {\n            expanded: _this.props.defaultExpanded\n        };\n\n        // A cache of {userId: username, ...} in order to show reply usernames\n        _this.authorUsernameCache = {};\n        return _this;\n    }\n\n    _createClass(TopLevelComment, [{\n        key: 'handleExpandThread',\n        value: function handleExpandThread() {\n            if (this.state.expanded) {\n                this.props.onLoadMoreReplies(this.props.id, this.props.replies.length);\n            } else {\n                this.setState({ expanded: true });\n            }\n        }\n    }, {\n        key: 'handleDeleteReply',\n        value: function handleDeleteReply(replyId) {\n            // Only apply topLevelCommentId for deleting replies\n            // The top level comment itself just gets passed onDelete directly\n            this.props.onDelete(replyId, this.props.id);\n        }\n    }, {\n        key: 'handleReportReply',\n        value: function handleReportReply(replyId) {\n            // Only apply topLevelCommentId for reporting replies\n            // The top level comment itself just gets passed onReport directly\n            this.props.onReport(replyId, this.props.id);\n        }\n    }, {\n        key: 'handleRestoreReply',\n        value: function handleRestoreReply(replyId) {\n            this.props.onRestore(replyId, this.props.id);\n        }\n    }, {\n        key: 'handleAddComment',\n        value: function handleAddComment(comment) {\n            this.props.onAddComment(comment, this.props.id);\n        }\n    }, {\n        key: 'authorUsername',\n        value: function authorUsername(authorId) {\n            if (this.authorUsernameCache[authorId]) return this.authorUsernameCache[authorId];\n\n            // If the cache misses, rebuild it. Every reply has a parent id that is\n            // either a reply to this top level comment or to one of the replies.\n            this.authorUsernameCache[this.props.author.id] = this.props.author.username;\n            var replies = this.props.replies;\n            for (var i = 0; i < replies.length; i++) {\n                this.authorUsernameCache[replies[i].author.id] = replies[i].author.username;\n            }\n            // Default to top level author if no author is found from authorId\n            // This can happen if there is no commentee_id stored with the comment\n            return this.authorUsernameCache[authorId] || this.props.author.username;\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this2 = this;\n\n            var _props = this.props,\n                author = _props.author,\n                canDelete = _props.canDelete,\n                canDeleteWithoutConfirm = _props.canDeleteWithoutConfirm,\n                canReply = _props.canReply,\n                canReport = _props.canReport,\n                canRestore = _props.canRestore,\n                content = _props.content,\n                datetimeCreated = _props.datetimeCreated,\n                highlightedCommentId = _props.highlightedCommentId,\n                id = _props.id,\n                moreRepliesToLoad = _props.moreRepliesToLoad,\n                onDelete = _props.onDelete,\n                onReport = _props.onReport,\n                onRestore = _props.onRestore,\n                replies = _props.replies,\n                projectId = _props.projectId,\n                visibility = _props.visibility;\n\n\n            var parentVisible = visibility === 'visible';\n\n            return React.createElement(\n                FlexRow,\n                { className: 'comment-container' },\n                React.createElement(Comment, _extends({\n                    highlighted: highlightedCommentId === id,\n                    projectId: projectId,\n                    onAddComment: this.handleAddComment\n                }, {\n                    author: author,\n                    content: content,\n                    datetimeCreated: datetimeCreated,\n                    canDelete: canDelete,\n                    canDeleteWithoutConfirm: canDeleteWithoutConfirm,\n                    canReply: canReply,\n                    canReport: canReport,\n                    canRestore: canRestore,\n                    id: id,\n                    onDelete: onDelete,\n                    onReport: onReport,\n                    onRestore: onRestore,\n                    visibility: visibility\n                })),\n                replies.length > 0 && React.createElement(\n                    FlexRow,\n                    {\n                        className: classNames('replies', 'column', { collapsed: !this.state.expanded && replies.length > 3 }),\n                        key: id\n                    },\n                    (this.state.expanded ? replies : replies.slice(0, 3)).map(function (reply) {\n                        return React.createElement(Comment, {\n                            author: reply.author,\n                            canDelete: canDelete,\n                            canDeleteWithoutConfirm: canDeleteWithoutConfirm,\n                            canReply: canReply,\n                            canReport: canReport,\n                            canRestore: canRestore && parentVisible,\n                            content: reply.content,\n                            datetimeCreated: reply.datetime_created,\n                            highlighted: highlightedCommentId === reply.id,\n                            id: reply.id,\n                            key: reply.id,\n                            parentId: id,\n                            projectId: projectId,\n                            replyUsername: _this2.authorUsername(reply.commentee_id),\n                            visibility: reply.visibility,\n                            onAddComment: _this2.handleAddComment,\n                            onDelete: _this2.handleDeleteReply,\n                            onReport: _this2.handleReportReply,\n                            onRestore: _this2.handleRestoreReply\n                        });\n                    }),\n                    (!this.state.expanded && replies.length > 3 || this.state.expanded && moreRepliesToLoad) && React.createElement(\n                        'a',\n                        {\n                            className: 'expand-thread',\n                            onClick: this.handleExpandThread\n                        },\n                        React.createElement(FormattedMessage, { id: 'comments.loadMoreReplies' })\n                    )\n                )\n            );\n        }\n    }]);\n\n    return TopLevelComment;\n}(React.Component);\n\nTopLevelComment.propTypes = {\n    author: PropTypes.shape({\n        id: PropTypes.number,\n        image: PropTypes.string,\n        scratchteam: PropTypes.bool,\n        username: PropTypes.string\n    }),\n    canDelete: PropTypes.bool,\n    canDeleteWithoutConfirm: PropTypes.bool,\n    canReply: PropTypes.bool,\n    canReport: PropTypes.bool,\n    canRestore: PropTypes.bool,\n    content: PropTypes.string,\n    datetimeCreated: PropTypes.string,\n    defaultExpanded: PropTypes.bool,\n    deletable: PropTypes.bool,\n    highlightedCommentId: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),\n    id: PropTypes.number,\n    moreRepliesToLoad: PropTypes.bool,\n    onAddComment: PropTypes.func,\n    onDelete: PropTypes.func,\n    onLoadMoreReplies: PropTypes.func,\n    onReport: PropTypes.func,\n    onRestore: PropTypes.func,\n    parentId: PropTypes.number,\n    projectId: PropTypes.string,\n    replies: PropTypes.arrayOf(PropTypes.object),\n    visibility: PropTypes.string\n};\n\nTopLevelComment.defaultProps = {\n    canDeleteWithoutConfirm: false,\n    defaultExpanded: false,\n    moreRepliesToLoad: false\n};\n\nmodule.exports = TopLevelComment;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/preview/comment/top-level-comment.jsx\n// module id = 987\n// module chunks = 0\n\n//# sourceURL=scratch:///./src/views/preview/comment/top-level-comment.jsx?");

/***/ })